
sParkTower_contro_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007694  08007694  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08007694  08007694  00017694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800769c  0800769c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800769c  0800769c  0001769c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080076a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000118c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200011f4  200011f4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010fe3  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002927  00000000  00000000  000310be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d70  00000000  00000000  000339e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a4e  00000000  00000000  00034758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025ba1  00000000  00000000  000351a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000114c1  00000000  00000000  0005ad47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc4ef  00000000  00000000  0006c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004480  00000000  00000000  001486f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0014cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006fac 	.word	0x08006fac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08006fac 	.word	0x08006fac

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <control_motor>:
#include <stdio.h>
#include "main.h"
#include "control_motor.h"

void control_motor(int num)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	int i=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
	if(num == 1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	f040 8087 	bne.w	80006de <control_motor+0x122>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	48c1      	ldr	r0, [pc, #772]	; (80008dc <control_motor+0x320>)
 80005d8:	f003 f8d8 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e011      	b.n	8000606 <control_motor+0x4a>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	48bc      	ldr	r0, [pc, #752]	; (80008dc <control_motor+0x320>)
 80005ea:	f003 f8cf 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f002 fa30 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fa:	48b8      	ldr	r0, [pc, #736]	; (80008dc <control_motor+0x320>)
 80005fc:	f003 f8c6 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800060c:	dbe9      	blt.n	80005e2 <control_motor+0x26>
		}
		HAL_Delay(500);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f002 fa1f 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2140      	movs	r1, #64	; 0x40
 800061a:	48b1      	ldr	r0, [pc, #708]	; (80008e0 <control_motor+0x324>)
 800061c:	f003 f8b6 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e00f      	b.n	8000646 <control_motor+0x8a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2120      	movs	r1, #32
 800062a:	48ad      	ldr	r0, [pc, #692]	; (80008e0 <control_motor+0x324>)
 800062c:	f003 f8ae 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000630:	2001      	movs	r0, #1
 8000632:	f002 fa0f 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	48a9      	ldr	r0, [pc, #676]	; (80008e0 <control_motor+0x324>)
 800063c:	f003 f8a6 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800064c:	dbeb      	blt.n	8000626 <control_motor+0x6a>
		}
		HAL_Delay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000652:	f002 f9ff 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065c:	489f      	ldr	r0, [pc, #636]	; (80008dc <control_motor+0x320>)
 800065e:	f003 f895 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	e011      	b.n	800068c <control_motor+0xd0>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	489b      	ldr	r0, [pc, #620]	; (80008dc <control_motor+0x320>)
 8000670:	f003 f88c 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000674:	2001      	movs	r0, #1
 8000676:	f002 f9ed 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000680:	4896      	ldr	r0, [pc, #600]	; (80008dc <control_motor+0x320>)
 8000682:	f003 f883 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000692:	dbe9      	blt.n	8000668 <control_motor+0xac>
		}
		HAL_Delay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f002 f9dc 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	488f      	ldr	r0, [pc, #572]	; (80008e0 <control_motor+0x324>)
 80006a2:	f003 f873 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00f      	b.n	80006cc <control_motor+0x110>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	488b      	ldr	r0, [pc, #556]	; (80008e0 <control_motor+0x324>)
 80006b2:	f003 f86b 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f002 f9cc 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2120      	movs	r1, #32
 80006c0:	4887      	ldr	r0, [pc, #540]	; (80008e0 <control_motor+0x324>)
 80006c2:	f003 f863 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3301      	adds	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80006d2:	dbeb      	blt.n	80006ac <control_motor+0xf0>
		}

		HAL_Delay(500);
 80006d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d8:	f002 f9bc 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		}
		HAL_Delay(500);

	}
}
 80006dc:	e1ea      	b.n	8000ab4 <control_motor+0x4f8>
	else if(num == 2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	f040 80aa 	bne.w	800083a <control_motor+0x27e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	487b      	ldr	r0, [pc, #492]	; (80008dc <control_motor+0x320>)
 80006ee:	f003 f84d 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	e011      	b.n	800071c <control_motor+0x160>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fe:	4877      	ldr	r0, [pc, #476]	; (80008dc <control_motor+0x320>)
 8000700:	f003 f844 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f002 f9a5 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000710:	4872      	ldr	r0, [pc, #456]	; (80008dc <control_motor+0x320>)
 8000712:	f003 f83b 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8000722:	dbe9      	blt.n	80006f8 <control_motor+0x13c>
		HAL_Delay(500);
 8000724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000728:	f002 f994 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	486b      	ldr	r0, [pc, #428]	; (80008e0 <control_motor+0x324>)
 8000732:	f003 f82b 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	e00f      	b.n	800075c <control_motor+0x1a0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	4867      	ldr	r0, [pc, #412]	; (80008e0 <control_motor+0x324>)
 8000742:	f003 f823 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f002 f984 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2120      	movs	r1, #32
 8000750:	4863      	ldr	r0, [pc, #396]	; (80008e0 <control_motor+0x324>)
 8000752:	f003 f81b 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	3301      	adds	r3, #1
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000762:	dbeb      	blt.n	800073c <control_motor+0x180>
		HAL_Delay(500);
 8000764:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000768:	f002 f974 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000772:	485a      	ldr	r0, [pc, #360]	; (80008dc <control_motor+0x320>)
 8000774:	f003 f80a 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<400;i++)
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e011      	b.n	80007a2 <control_motor+0x1e6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000784:	4855      	ldr	r0, [pc, #340]	; (80008dc <control_motor+0x320>)
 8000786:	f003 f801 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f002 f962 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	4851      	ldr	r0, [pc, #324]	; (80008dc <control_motor+0x320>)
 8000798:	f002 fff8 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<400;i++)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80007a8:	dbe9      	blt.n	800077e <control_motor+0x1c2>
		HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ae:	f002 f951 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	484a      	ldr	r0, [pc, #296]	; (80008e0 <control_motor+0x324>)
 80007b8:	f002 ffe8 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e00f      	b.n	80007e2 <control_motor+0x226>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2120      	movs	r1, #32
 80007c6:	4846      	ldr	r0, [pc, #280]	; (80008e0 <control_motor+0x324>)
 80007c8:	f002 ffe0 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f002 f941 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	4842      	ldr	r0, [pc, #264]	; (80008e0 <control_motor+0x324>)
 80007d8:	f002 ffd8 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007e8:	dbeb      	blt.n	80007c2 <control_motor+0x206>
		HAL_Delay(500);
 80007ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ee:	f002 f931 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	4838      	ldr	r0, [pc, #224]	; (80008dc <control_motor+0x320>)
 80007fa:	f002 ffc7 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1040;i++)
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e011      	b.n	8000828 <control_motor+0x26c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	4834      	ldr	r0, [pc, #208]	; (80008dc <control_motor+0x320>)
 800080c:	f002 ffbe 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f002 f91f 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	482f      	ldr	r0, [pc, #188]	; (80008dc <control_motor+0x320>)
 800081e:	f002 ffb5 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1040;i++)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800082e:	dbe9      	blt.n	8000804 <control_motor+0x248>
		HAL_Delay(500);
 8000830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000834:	f002 f90e 	bl	8002a54 <HAL_Delay>
}
 8000838:	e13c      	b.n	8000ab4 <control_motor+0x4f8>
	else if(num == 3)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b03      	cmp	r3, #3
 800083e:	f040 808c 	bne.w	800095a <control_motor+0x39e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	4824      	ldr	r0, [pc, #144]	; (80008dc <control_motor+0x320>)
 800084a:	f002 ff9f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e011      	b.n	8000878 <control_motor+0x2bc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085a:	4820      	ldr	r0, [pc, #128]	; (80008dc <control_motor+0x320>)
 800085c:	f002 ff96 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f002 f8f7 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	481b      	ldr	r0, [pc, #108]	; (80008dc <control_motor+0x320>)
 800086e:	f002 ff8d 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3301      	adds	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800087e:	dbe9      	blt.n	8000854 <control_motor+0x298>
		HAL_Delay(500);
 8000880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000884:	f002 f8e6 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	4814      	ldr	r0, [pc, #80]	; (80008e0 <control_motor+0x324>)
 800088e:	f002 ff7d 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e00f      	b.n	80008b8 <control_motor+0x2fc>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2120      	movs	r1, #32
 800089c:	4810      	ldr	r0, [pc, #64]	; (80008e0 <control_motor+0x324>)
 800089e:	f002 ff75 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80008a2:	2001      	movs	r0, #1
 80008a4:	f002 f8d6 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <control_motor+0x324>)
 80008ae:	f002 ff6d 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80008be:	dbeb      	blt.n	8000898 <control_motor+0x2dc>
		HAL_Delay(500);
 80008c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c4:	f002 f8c6 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <control_motor+0x320>)
 80008d0:	f002 ff5c 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e016      	b.n	8000908 <control_motor+0x34c>
 80008da:	bf00      	nop
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40020000 	.word	0x40020000
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ea:	4874      	ldr	r0, [pc, #464]	; (8000abc <control_motor+0x500>)
 80008ec:	f002 ff4e 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f002 f8af 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fc:	486f      	ldr	r0, [pc, #444]	; (8000abc <control_motor+0x500>)
 80008fe:	f002 ff45 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3301      	adds	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800090e:	dbe9      	blt.n	80008e4 <control_motor+0x328>
		HAL_Delay(500);
 8000910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000914:	f002 f89e 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2140      	movs	r1, #64	; 0x40
 800091c:	4868      	ldr	r0, [pc, #416]	; (8000ac0 <control_motor+0x504>)
 800091e:	f002 ff35 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	e00f      	b.n	8000948 <control_motor+0x38c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	2120      	movs	r1, #32
 800092c:	4864      	ldr	r0, [pc, #400]	; (8000ac0 <control_motor+0x504>)
 800092e:	f002 ff2d 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000932:	2001      	movs	r0, #1
 8000934:	f002 f88e 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2120      	movs	r1, #32
 800093c:	4860      	ldr	r0, [pc, #384]	; (8000ac0 <control_motor+0x504>)
 800093e:	f002 ff25 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800094e:	dbeb      	blt.n	8000928 <control_motor+0x36c>
		HAL_Delay(500);
 8000950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000954:	f002 f87e 	bl	8002a54 <HAL_Delay>
}
 8000958:	e0ac      	b.n	8000ab4 <control_motor+0x4f8>
	else if(num == 4)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b04      	cmp	r3, #4
 800095e:	f040 80a9 	bne.w	8000ab4 <control_motor+0x4f8>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000968:	4854      	ldr	r0, [pc, #336]	; (8000abc <control_motor+0x500>)
 800096a:	f002 ff0f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e011      	b.n	8000998 <control_motor+0x3dc>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4850      	ldr	r0, [pc, #320]	; (8000abc <control_motor+0x500>)
 800097c:	f002 ff06 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f002 f867 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	484b      	ldr	r0, [pc, #300]	; (8000abc <control_motor+0x500>)
 800098e:	f002 fefd 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800099e:	dbe9      	blt.n	8000974 <control_motor+0x3b8>
		HAL_Delay(500);
 80009a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a4:	f002 f856 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	4844      	ldr	r0, [pc, #272]	; (8000ac0 <control_motor+0x504>)
 80009ae:	f002 feed 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e00f      	b.n	80009d8 <control_motor+0x41c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2120      	movs	r1, #32
 80009bc:	4840      	ldr	r0, [pc, #256]	; (8000ac0 <control_motor+0x504>)
 80009be:	f002 fee5 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f002 f846 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2120      	movs	r1, #32
 80009cc:	483c      	ldr	r0, [pc, #240]	; (8000ac0 <control_motor+0x504>)
 80009ce:	f002 fedd 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80009de:	dbeb      	blt.n	80009b8 <control_motor+0x3fc>
		HAL_Delay(500);
 80009e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e4:	f002 f836 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	4833      	ldr	r0, [pc, #204]	; (8000abc <control_motor+0x500>)
 80009f0:	f002 fecc 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<400;i++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	e011      	b.n	8000a1e <control_motor+0x462>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a00:	482e      	ldr	r0, [pc, #184]	; (8000abc <control_motor+0x500>)
 8000a02:	f002 fec3 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f002 f824 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a12:	482a      	ldr	r0, [pc, #168]	; (8000abc <control_motor+0x500>)
 8000a14:	f002 feba 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<400;i++)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a24:	dbe9      	blt.n	80009fa <control_motor+0x43e>
		HAL_Delay(500);
 8000a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2a:	f002 f813 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4823      	ldr	r0, [pc, #140]	; (8000ac0 <control_motor+0x504>)
 8000a34:	f002 feaa 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e00f      	b.n	8000a5e <control_motor+0x4a2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2120      	movs	r1, #32
 8000a42:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <control_motor+0x504>)
 8000a44:	f002 fea2 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f002 f803 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	481b      	ldr	r0, [pc, #108]	; (8000ac0 <control_motor+0x504>)
 8000a54:	f002 fe9a 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000a64:	dbeb      	blt.n	8000a3e <control_motor+0x482>
		HAL_Delay(500);
 8000a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a6a:	f001 fff3 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <control_motor+0x500>)
 8000a76:	f002 fe89 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1040;i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e011      	b.n	8000aa4 <control_motor+0x4e8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <control_motor+0x500>)
 8000a88:	f002 fe80 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f001 ffe1 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <control_motor+0x500>)
 8000a9a:	f002 fe77 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1040;i++)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8000aaa:	dbe9      	blt.n	8000a80 <control_motor+0x4c4>
		HAL_Delay(500);
 8000aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab0:	f001 ffd0 	bl	8002a54 <HAL_Delay>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <move_to_parking_slot>:

void move_to_parking_slot(int from, int to)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	int i=0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
	if(from == 1 && to == 3)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	f040 80ab 	bne.w	8000c30 <move_to_parking_slot+0x16c>
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	f040 80a7 	bne.w	8000c30 <move_to_parking_slot+0x16c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	48bd      	ldr	r0, [pc, #756]	; (8000ddc <move_to_parking_slot+0x318>)
 8000ae8:	f002 fe50 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e00f      	b.n	8000b12 <move_to_parking_slot+0x4e>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2120      	movs	r1, #32
 8000af6:	48b9      	ldr	r0, [pc, #740]	; (8000ddc <move_to_parking_slot+0x318>)
 8000af8:	f002 fe48 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f001 ffa9 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2120      	movs	r1, #32
 8000b06:	48b5      	ldr	r0, [pc, #724]	; (8000ddc <move_to_parking_slot+0x318>)
 8000b08:	f002 fe40 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b18:	dbeb      	blt.n	8000af2 <move_to_parking_slot+0x2e>
		}
		HAL_Delay(500);
 8000b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1e:	f001 ff99 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	48ad      	ldr	r0, [pc, #692]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000b2a:	f002 fe2f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e011      	b.n	8000b58 <move_to_parking_slot+0x94>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3a:	48a9      	ldr	r0, [pc, #676]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000b3c:	f002 fe26 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000b40:	2001      	movs	r0, #1
 8000b42:	f001 ff87 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4c:	48a4      	ldr	r0, [pc, #656]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000b4e:	f002 fe1d 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000b5e:	dbe9      	blt.n	8000b34 <move_to_parking_slot+0x70>
		}
		HAL_Delay(500);
 8000b60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b64:	f001 ff76 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	489b      	ldr	r0, [pc, #620]	; (8000ddc <move_to_parking_slot+0x318>)
 8000b6e:	f002 fe0d 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1600;i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e00f      	b.n	8000b98 <move_to_parking_slot+0xd4>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	4897      	ldr	r0, [pc, #604]	; (8000ddc <move_to_parking_slot+0x318>)
 8000b7e:	f002 fe05 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f001 ff66 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	4893      	ldr	r0, [pc, #588]	; (8000ddc <move_to_parking_slot+0x318>)
 8000b8e:	f002 fdfd 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1600;i++)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000b9e:	dbeb      	blt.n	8000b78 <move_to_parking_slot+0xb4>
		}
		HAL_Delay(500);
 8000ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ba4:	f001 ff56 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bae:	488c      	ldr	r0, [pc, #560]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000bb0:	f002 fdec 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e011      	b.n	8000bde <move_to_parking_slot+0x11a>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	4887      	ldr	r0, [pc, #540]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000bc2:	f002 fde3 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f001 ff44 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd2:	4883      	ldr	r0, [pc, #524]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000bd4:	f002 fdda 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000be4:	dbe9      	blt.n	8000bba <move_to_parking_slot+0xf6>
		}
		HAL_Delay(500);
 8000be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bea:	f001 ff33 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	487a      	ldr	r0, [pc, #488]	; (8000ddc <move_to_parking_slot+0x318>)
 8000bf4:	f002 fdca 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e00f      	b.n	8000c1e <move_to_parking_slot+0x15a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2120      	movs	r1, #32
 8000c02:	4876      	ldr	r0, [pc, #472]	; (8000ddc <move_to_parking_slot+0x318>)
 8000c04:	f002 fdc2 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 ff23 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2120      	movs	r1, #32
 8000c12:	4872      	ldr	r0, [pc, #456]	; (8000ddc <move_to_parking_slot+0x318>)
 8000c14:	f002 fdba 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000c24:	dbeb      	blt.n	8000bfe <move_to_parking_slot+0x13a>
		}
		HAL_Delay(500);
 8000c26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2a:	f001 ff13 	bl	8002a54 <HAL_Delay>
 8000c2e:	e323      	b.n	8001278 <move_to_parking_slot+0x7b4>
	}
	else if(from == 1 && to == 4)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	f040 8112 	bne.w	8000e5c <move_to_parking_slot+0x398>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	f040 810e 	bne.w	8000e5c <move_to_parking_slot+0x398>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	4865      	ldr	r0, [pc, #404]	; (8000ddc <move_to_parking_slot+0x318>)
 8000c46:	f002 fda1 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	e00f      	b.n	8000c70 <move_to_parking_slot+0x1ac>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2120      	movs	r1, #32
 8000c54:	4861      	ldr	r0, [pc, #388]	; (8000ddc <move_to_parking_slot+0x318>)
 8000c56:	f002 fd99 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f001 fefa 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2120      	movs	r1, #32
 8000c64:	485d      	ldr	r0, [pc, #372]	; (8000ddc <move_to_parking_slot+0x318>)
 8000c66:	f002 fd91 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000c76:	dbeb      	blt.n	8000c50 <move_to_parking_slot+0x18c>
		}
		HAL_Delay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f001 feea 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c86:	4856      	ldr	r0, [pc, #344]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000c88:	f002 fd80 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e011      	b.n	8000cb6 <move_to_parking_slot+0x1f2>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	4851      	ldr	r0, [pc, #324]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000c9a:	f002 fd77 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f001 fed8 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	484d      	ldr	r0, [pc, #308]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000cac:	f002 fd6e 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000cbc:	dbe9      	blt.n	8000c92 <move_to_parking_slot+0x1ce>
		}
		HAL_Delay(500);
 8000cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc2:	f001 fec7 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2140      	movs	r1, #64	; 0x40
 8000cca:	4844      	ldr	r0, [pc, #272]	; (8000ddc <move_to_parking_slot+0x318>)
 8000ccc:	f002 fd5e 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e00f      	b.n	8000cf6 <move_to_parking_slot+0x232>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4840      	ldr	r0, [pc, #256]	; (8000ddc <move_to_parking_slot+0x318>)
 8000cdc:	f002 fd56 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f001 feb7 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2120      	movs	r1, #32
 8000cea:	483c      	ldr	r0, [pc, #240]	; (8000ddc <move_to_parking_slot+0x318>)
 8000cec:	f002 fd4e 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000cfc:	dbeb      	blt.n	8000cd6 <move_to_parking_slot+0x212>
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d04:	4836      	ldr	r0, [pc, #216]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000d06:	f002 fd41 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	e011      	b.n	8000d34 <move_to_parking_slot+0x270>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d16:	4832      	ldr	r0, [pc, #200]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000d18:	f002 fd38 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f001 fe99 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	482d      	ldr	r0, [pc, #180]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000d2a:	f002 fd2f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000d3a:	dbe9      	blt.n	8000d10 <move_to_parking_slot+0x24c>
		}
		HAL_Delay(500);
 8000d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d40:	f001 fe88 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	4824      	ldr	r0, [pc, #144]	; (8000ddc <move_to_parking_slot+0x318>)
 8000d4a:	f002 fd1f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	e00f      	b.n	8000d74 <move_to_parking_slot+0x2b0>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2120      	movs	r1, #32
 8000d58:	4820      	ldr	r0, [pc, #128]	; (8000ddc <move_to_parking_slot+0x318>)
 8000d5a:	f002 fd17 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f001 fe78 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2120      	movs	r1, #32
 8000d68:	481c      	ldr	r0, [pc, #112]	; (8000ddc <move_to_parking_slot+0x318>)
 8000d6a:	f002 fd0f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000d7a:	dbeb      	blt.n	8000d54 <move_to_parking_slot+0x290>
		}
		HAL_Delay(500);
 8000d7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d80:	f001 fe68 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000d8c:	f002 fcfe 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e011      	b.n	8000dba <move_to_parking_slot+0x2f6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000d9e:	f002 fcf5 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f001 fe56 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <move_to_parking_slot+0x31c>)
 8000db0:	f002 fcec 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000dc0:	dbe9      	blt.n	8000d96 <move_to_parking_slot+0x2d2>
		}
		HAL_Delay(500);
 8000dc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc6:	f001 fe45 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <move_to_parking_slot+0x318>)
 8000dd0:	f002 fcdc 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e014      	b.n	8000e04 <move_to_parking_slot+0x340>
 8000dda:	bf00      	nop
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2120      	movs	r1, #32
 8000de8:	48c0      	ldr	r0, [pc, #768]	; (80010ec <move_to_parking_slot+0x628>)
 8000dea:	f002 fccf 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f001 fe30 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2120      	movs	r1, #32
 8000df8:	48bc      	ldr	r0, [pc, #752]	; (80010ec <move_to_parking_slot+0x628>)
 8000dfa:	f002 fcc7 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e0a:	dbeb      	blt.n	8000de4 <move_to_parking_slot+0x320>
		}
		HAL_Delay(500);
 8000e0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e10:	f001 fe20 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1a:	48b5      	ldr	r0, [pc, #724]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000e1c:	f002 fcb6 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e011      	b.n	8000e4a <move_to_parking_slot+0x386>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2c:	48b0      	ldr	r0, [pc, #704]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000e2e:	f002 fcad 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f001 fe0e 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	48ac      	ldr	r0, [pc, #688]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000e40:	f002 fca4 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	3301      	adds	r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e50:	dbe9      	blt.n	8000e26 <move_to_parking_slot+0x362>
		}
		HAL_Delay(500);
 8000e52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e56:	f001 fdfd 	bl	8002a54 <HAL_Delay>
 8000e5a:	e20d      	b.n	8001278 <move_to_parking_slot+0x7b4>
	}
	else if(from == 2 && to == 3)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	f040 8111 	bne.w	8001086 <move_to_parking_slot+0x5c2>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	f040 810d 	bne.w	8001086 <move_to_parking_slot+0x5c2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e72:	489f      	ldr	r0, [pc, #636]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000e74:	f002 fc8a 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	e011      	b.n	8000ea2 <move_to_parking_slot+0x3de>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e84:	489a      	ldr	r0, [pc, #616]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000e86:	f002 fc81 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f001 fde2 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e96:	4896      	ldr	r0, [pc, #600]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000e98:	f002 fc78 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ea8:	dbe9      	blt.n	8000e7e <move_to_parking_slot+0x3ba>
		}
		HAL_Delay(500);
 8000eaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eae:	f001 fdd1 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	488d      	ldr	r0, [pc, #564]	; (80010ec <move_to_parking_slot+0x628>)
 8000eb8:	f002 fc68 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e00f      	b.n	8000ee2 <move_to_parking_slot+0x41e>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4889      	ldr	r0, [pc, #548]	; (80010ec <move_to_parking_slot+0x628>)
 8000ec8:	f002 fc60 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f001 fdc1 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4885      	ldr	r0, [pc, #532]	; (80010ec <move_to_parking_slot+0x628>)
 8000ed8:	f002 fc58 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ee8:	dbeb      	blt.n	8000ec2 <move_to_parking_slot+0x3fe>
		}
		HAL_Delay(500);
 8000eea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eee:	f001 fdb1 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef8:	487d      	ldr	r0, [pc, #500]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000efa:	f002 fc47 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e011      	b.n	8000f28 <move_to_parking_slot+0x464>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	4879      	ldr	r0, [pc, #484]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000f0c:	f002 fc3e 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f001 fd9f 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	4874      	ldr	r0, [pc, #464]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000f1e:	f002 fc35 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	3301      	adds	r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000f2e:	dbe9      	blt.n	8000f04 <move_to_parking_slot+0x440>
		}
		HAL_Delay(500);
 8000f30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f34:	f001 fd8e 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	486b      	ldr	r0, [pc, #428]	; (80010ec <move_to_parking_slot+0x628>)
 8000f3e:	f002 fc25 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e00f      	b.n	8000f68 <move_to_parking_slot+0x4a4>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2120      	movs	r1, #32
 8000f4c:	4867      	ldr	r0, [pc, #412]	; (80010ec <move_to_parking_slot+0x628>)
 8000f4e:	f002 fc1d 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000f52:	2001      	movs	r0, #1
 8000f54:	f001 fd7e 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	4863      	ldr	r0, [pc, #396]	; (80010ec <move_to_parking_slot+0x628>)
 8000f5e:	f002 fc15 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000f6e:	dbeb      	blt.n	8000f48 <move_to_parking_slot+0x484>
		}
		HAL_Delay(500);
 8000f70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f74:	f001 fd6e 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7e:	485c      	ldr	r0, [pc, #368]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000f80:	f002 fc04 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e011      	b.n	8000fae <move_to_parking_slot+0x4ea>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	4857      	ldr	r0, [pc, #348]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000f92:	f002 fbfb 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f001 fd5c 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa2:	4853      	ldr	r0, [pc, #332]	; (80010f0 <move_to_parking_slot+0x62c>)
 8000fa4:	f002 fbf2 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000fb4:	dbe9      	blt.n	8000f8a <move_to_parking_slot+0x4c6>
		}
		HAL_Delay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f001 fd4b 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	484a      	ldr	r0, [pc, #296]	; (80010ec <move_to_parking_slot+0x628>)
 8000fc4:	f002 fbe2 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e00f      	b.n	8000fee <move_to_parking_slot+0x52a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4846      	ldr	r0, [pc, #280]	; (80010ec <move_to_parking_slot+0x628>)
 8000fd4:	f002 fbda 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f001 fd3b 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4842      	ldr	r0, [pc, #264]	; (80010ec <move_to_parking_slot+0x628>)
 8000fe4:	f002 fbd2 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ff4:	dbeb      	blt.n	8000fce <move_to_parking_slot+0x50a>
		}
		HAL_Delay(500);
 8000ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffa:	f001 fd2b 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001004:	483a      	ldr	r0, [pc, #232]	; (80010f0 <move_to_parking_slot+0x62c>)
 8001006:	f002 fbc1 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e011      	b.n	8001034 <move_to_parking_slot+0x570>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4836      	ldr	r0, [pc, #216]	; (80010f0 <move_to_parking_slot+0x62c>)
 8001018:	f002 fbb8 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f001 fd19 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001028:	4831      	ldr	r0, [pc, #196]	; (80010f0 <move_to_parking_slot+0x62c>)
 800102a:	f002 fbaf 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800103a:	dbe9      	blt.n	8001010 <move_to_parking_slot+0x54c>
		}
		HAL_Delay(500);
 800103c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001040:	f001 fd08 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	2140      	movs	r1, #64	; 0x40
 8001048:	4828      	ldr	r0, [pc, #160]	; (80010ec <move_to_parking_slot+0x628>)
 800104a:	f002 fb9f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e00f      	b.n	8001074 <move_to_parking_slot+0x5b0>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2120      	movs	r1, #32
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <move_to_parking_slot+0x628>)
 800105a:	f002 fb97 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f001 fcf8 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2120      	movs	r1, #32
 8001068:	4820      	ldr	r0, [pc, #128]	; (80010ec <move_to_parking_slot+0x628>)
 800106a:	f002 fb8f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3301      	adds	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800107a:	dbeb      	blt.n	8001054 <move_to_parking_slot+0x590>
		}
		HAL_Delay(500);
 800107c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001080:	f001 fce8 	bl	8002a54 <HAL_Delay>
 8001084:	e0f8      	b.n	8001278 <move_to_parking_slot+0x7b4>
	}
	else if(from == 2 && to == 4)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	f040 80f5 	bne.w	8001278 <move_to_parking_slot+0x7b4>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b04      	cmp	r3, #4
 8001092:	f040 80f1 	bne.w	8001278 <move_to_parking_slot+0x7b4>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <move_to_parking_slot+0x62c>)
 800109e:	f002 fb75 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	e011      	b.n	80010cc <move_to_parking_slot+0x608>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <move_to_parking_slot+0x62c>)
 80010b0:	f002 fb6c 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80010b4:	2001      	movs	r0, #1
 80010b6:	f001 fccd 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <move_to_parking_slot+0x62c>)
 80010c2:	f002 fb63 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80010d2:	dbe9      	blt.n	80010a8 <move_to_parking_slot+0x5e4>
		}
		HAL_Delay(500);
 80010d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d8:	f001 fcbc 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <move_to_parking_slot+0x628>)
 80010e2:	f002 fb53 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e013      	b.n	8001114 <move_to_parking_slot+0x650>
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4861      	ldr	r0, [pc, #388]	; (8001280 <move_to_parking_slot+0x7bc>)
 80010fa:	f002 fb47 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f001 fca8 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2120      	movs	r1, #32
 8001108:	485d      	ldr	r0, [pc, #372]	; (8001280 <move_to_parking_slot+0x7bc>)
 800110a:	f002 fb3f 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800111a:	dbeb      	blt.n	80010f4 <move_to_parking_slot+0x630>
		}
		HAL_Delay(500);
 800111c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001120:	f001 fc98 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112a:	4856      	ldr	r0, [pc, #344]	; (8001284 <move_to_parking_slot+0x7c0>)
 800112c:	f002 fb2e 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e011      	b.n	800115a <move_to_parking_slot+0x696>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4851      	ldr	r0, [pc, #324]	; (8001284 <move_to_parking_slot+0x7c0>)
 800113e:	f002 fb25 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001142:	2001      	movs	r0, #1
 8001144:	f001 fc86 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114e:	484d      	ldr	r0, [pc, #308]	; (8001284 <move_to_parking_slot+0x7c0>)
 8001150:	f002 fb1c 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001160:	dbe9      	blt.n	8001136 <move_to_parking_slot+0x672>
		}
		HAL_Delay(500);
 8001162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001166:	f001 fc75 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	4844      	ldr	r0, [pc, #272]	; (8001280 <move_to_parking_slot+0x7bc>)
 8001170:	f002 fb0c 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1600;i++)
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e00f      	b.n	800119a <move_to_parking_slot+0x6d6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2120      	movs	r1, #32
 800117e:	4840      	ldr	r0, [pc, #256]	; (8001280 <move_to_parking_slot+0x7bc>)
 8001180:	f002 fb04 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f001 fc65 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	483c      	ldr	r0, [pc, #240]	; (8001280 <move_to_parking_slot+0x7bc>)
 8001190:	f002 fafc 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1600;i++)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80011a0:	dbeb      	blt.n	800117a <move_to_parking_slot+0x6b6>
		}
		HAL_Delay(500);
 80011a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a6:	f001 fc55 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b0:	4834      	ldr	r0, [pc, #208]	; (8001284 <move_to_parking_slot+0x7c0>)
 80011b2:	f002 faeb 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e011      	b.n	80011e0 <move_to_parking_slot+0x71c>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c2:	4830      	ldr	r0, [pc, #192]	; (8001284 <move_to_parking_slot+0x7c0>)
 80011c4:	f002 fae2 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f001 fc43 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	482b      	ldr	r0, [pc, #172]	; (8001284 <move_to_parking_slot+0x7c0>)
 80011d6:	f002 fad9 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<640;i++)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80011e6:	dbe9      	blt.n	80011bc <move_to_parking_slot+0x6f8>
		}
		HAL_Delay(500);
 80011e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ec:	f001 fc32 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2140      	movs	r1, #64	; 0x40
 80011f4:	4822      	ldr	r0, [pc, #136]	; (8001280 <move_to_parking_slot+0x7bc>)
 80011f6:	f002 fac9 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e00f      	b.n	8001220 <move_to_parking_slot+0x75c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2120      	movs	r1, #32
 8001204:	481e      	ldr	r0, [pc, #120]	; (8001280 <move_to_parking_slot+0x7bc>)
 8001206:	f002 fac1 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800120a:	2001      	movs	r0, #1
 800120c:	f001 fc22 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2120      	movs	r1, #32
 8001214:	481a      	ldr	r0, [pc, #104]	; (8001280 <move_to_parking_slot+0x7bc>)
 8001216:	f002 fab9 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001226:	dbeb      	blt.n	8001200 <move_to_parking_slot+0x73c>
		}
		HAL_Delay(500);
 8001228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122c:	f001 fc12 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <move_to_parking_slot+0x7c0>)
 8001238:	f002 faa8 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e011      	b.n	8001266 <move_to_parking_slot+0x7a2>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	480e      	ldr	r0, [pc, #56]	; (8001284 <move_to_parking_slot+0x7c0>)
 800124a:	f002 fa9f 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f001 fc00 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <move_to_parking_slot+0x7c0>)
 800125c:	f002 fa96 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3301      	adds	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800126c:	dbe9      	blt.n	8001242 <move_to_parking_slot+0x77e>
		}
		HAL_Delay(500);
 800126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001272:	f001 fbef 	bl	8002a54 <HAL_Delay>
	}
}
 8001276:	e7ff      	b.n	8001278 <move_to_parking_slot+0x7b4>
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400

08001288 <get_out_parking_tower>:

void get_out_parking_tower(int from)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	int i;
	if(from == 1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b01      	cmp	r3, #1
 8001294:	f040 8087 	bne.w	80013a6 <get_out_parking_tower+0x11e>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	48c0      	ldr	r0, [pc, #768]	; (80015a0 <get_out_parking_tower+0x318>)
 800129e:	f002 fa75 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e00f      	b.n	80012c8 <get_out_parking_tower+0x40>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	48bc      	ldr	r0, [pc, #752]	; (80015a0 <get_out_parking_tower+0x318>)
 80012ae:	f002 fa6d 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f001 fbce 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	48b8      	ldr	r0, [pc, #736]	; (80015a0 <get_out_parking_tower+0x318>)
 80012be:	f002 fa65 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80012ce:	dbeb      	blt.n	80012a8 <get_out_parking_tower+0x20>
		}
		HAL_Delay(500);
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f001 fbbe 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012de:	48b1      	ldr	r0, [pc, #708]	; (80015a4 <get_out_parking_tower+0x31c>)
 80012e0:	f002 fa54 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e011      	b.n	800130e <get_out_parking_tower+0x86>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f0:	48ac      	ldr	r0, [pc, #688]	; (80015a4 <get_out_parking_tower+0x31c>)
 80012f2:	f002 fa4b 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f001 fbac 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	48a8      	ldr	r0, [pc, #672]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001304:	f002 fa42 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001314:	dbe9      	blt.n	80012ea <get_out_parking_tower+0x62>
		}
		HAL_Delay(500);
 8001316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131a:	f001 fb9b 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	489f      	ldr	r0, [pc, #636]	; (80015a0 <get_out_parking_tower+0x318>)
 8001324:	f002 fa32 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e00f      	b.n	800134e <get_out_parking_tower+0xc6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2120      	movs	r1, #32
 8001332:	489b      	ldr	r0, [pc, #620]	; (80015a0 <get_out_parking_tower+0x318>)
 8001334:	f002 fa2a 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f001 fb8b 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2120      	movs	r1, #32
 8001342:	4897      	ldr	r0, [pc, #604]	; (80015a0 <get_out_parking_tower+0x318>)
 8001344:	f002 fa22 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001354:	dbeb      	blt.n	800132e <get_out_parking_tower+0xa6>
		}

		HAL_Delay(500);
 8001356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135a:	f001 fb7b 	bl	8002a54 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001364:	488f      	ldr	r0, [pc, #572]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001366:	f002 fa11 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e011      	b.n	8001394 <get_out_parking_tower+0x10c>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001376:	488b      	ldr	r0, [pc, #556]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001378:	f002 fa08 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f001 fb69 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001388:	4886      	ldr	r0, [pc, #536]	; (80015a4 <get_out_parking_tower+0x31c>)
 800138a:	f002 f9ff 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3301      	adds	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800139a:	dbe9      	blt.n	8001370 <get_out_parking_tower+0xe8>
		}
		HAL_Delay(500);
 800139c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013a0:	f001 fb58 	bl	8002a54 <HAL_Delay>
			HAL_Delay(1);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		}
		HAL_Delay(500);
	}
}
 80013a4:	e1e9      	b.n	800177a <get_out_parking_tower+0x4f2>
	else if(from == 2)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	f040 80aa 	bne.w	8001502 <get_out_parking_tower+0x27a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b4:	487b      	ldr	r0, [pc, #492]	; (80015a4 <get_out_parking_tower+0x31c>)
 80013b6:	f002 f9e9 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e011      	b.n	80013e4 <get_out_parking_tower+0x15c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	4877      	ldr	r0, [pc, #476]	; (80015a4 <get_out_parking_tower+0x31c>)
 80013c8:	f002 f9e0 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f001 fb41 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d8:	4872      	ldr	r0, [pc, #456]	; (80015a4 <get_out_parking_tower+0x31c>)
 80013da:	f002 f9d7 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3301      	adds	r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80013ea:	dbe9      	blt.n	80013c0 <get_out_parking_tower+0x138>
		HAL_Delay(500);
 80013ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f0:	f001 fb30 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	4869      	ldr	r0, [pc, #420]	; (80015a0 <get_out_parking_tower+0x318>)
 80013fa:	f002 f9c7 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e00f      	b.n	8001424 <get_out_parking_tower+0x19c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2120      	movs	r1, #32
 8001408:	4865      	ldr	r0, [pc, #404]	; (80015a0 <get_out_parking_tower+0x318>)
 800140a:	f002 f9bf 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f001 fb20 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2120      	movs	r1, #32
 8001418:	4861      	ldr	r0, [pc, #388]	; (80015a0 <get_out_parking_tower+0x318>)
 800141a:	f002 f9b7 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800142a:	dbeb      	blt.n	8001404 <get_out_parking_tower+0x17c>
		HAL_Delay(500);
 800142c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001430:	f001 fb10 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143a:	485a      	ldr	r0, [pc, #360]	; (80015a4 <get_out_parking_tower+0x31c>)
 800143c:	f002 f9a6 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<440;i++)
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e011      	b.n	800146a <get_out_parking_tower+0x1e2>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144c:	4855      	ldr	r0, [pc, #340]	; (80015a4 <get_out_parking_tower+0x31c>)
 800144e:	f002 f99d 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001452:	2001      	movs	r0, #1
 8001454:	f001 fafe 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	4851      	ldr	r0, [pc, #324]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001460:	f002 f994 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<440;i++)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8001470:	dbe9      	blt.n	8001446 <get_out_parking_tower+0x1be>
		HAL_Delay(500);
 8001472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001476:	f001 faed 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4848      	ldr	r0, [pc, #288]	; (80015a0 <get_out_parking_tower+0x318>)
 8001480:	f002 f984 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e00f      	b.n	80014aa <get_out_parking_tower+0x222>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2120      	movs	r1, #32
 800148e:	4844      	ldr	r0, [pc, #272]	; (80015a0 <get_out_parking_tower+0x318>)
 8001490:	f002 f97c 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f001 fadd 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2120      	movs	r1, #32
 800149e:	4840      	ldr	r0, [pc, #256]	; (80015a0 <get_out_parking_tower+0x318>)
 80014a0:	f002 f974 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80014b0:	dbeb      	blt.n	800148a <get_out_parking_tower+0x202>
		HAL_Delay(500);
 80014b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b6:	f001 facd 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c0:	4838      	ldr	r0, [pc, #224]	; (80015a4 <get_out_parking_tower+0x31c>)
 80014c2:	f002 f963 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e011      	b.n	80014f0 <get_out_parking_tower+0x268>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d2:	4834      	ldr	r0, [pc, #208]	; (80015a4 <get_out_parking_tower+0x31c>)
 80014d4:	f002 f95a 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f001 fabb 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	482f      	ldr	r0, [pc, #188]	; (80015a4 <get_out_parking_tower+0x31c>)
 80014e6:	f002 f951 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80014f6:	dbe9      	blt.n	80014cc <get_out_parking_tower+0x244>
		HAL_Delay(500);
 80014f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014fc:	f001 faaa 	bl	8002a54 <HAL_Delay>
}
 8001500:	e13b      	b.n	800177a <get_out_parking_tower+0x4f2>
	else if(from == 3)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b03      	cmp	r3, #3
 8001506:	f040 808b 	bne.w	8001620 <get_out_parking_tower+0x398>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	4824      	ldr	r0, [pc, #144]	; (80015a0 <get_out_parking_tower+0x318>)
 8001510:	f002 f93c 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e00f      	b.n	800153a <get_out_parking_tower+0x2b2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2120      	movs	r1, #32
 800151e:	4820      	ldr	r0, [pc, #128]	; (80015a0 <get_out_parking_tower+0x318>)
 8001520:	f002 f934 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f001 fa95 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2120      	movs	r1, #32
 800152e:	481c      	ldr	r0, [pc, #112]	; (80015a0 <get_out_parking_tower+0x318>)
 8001530:	f002 f92c 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001540:	dbeb      	blt.n	800151a <get_out_parking_tower+0x292>
		HAL_Delay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f001 fa85 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001550:	4814      	ldr	r0, [pc, #80]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001552:	f002 f91b 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e011      	b.n	8001580 <get_out_parking_tower+0x2f8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001562:	4810      	ldr	r0, [pc, #64]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001564:	f002 f912 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001568:	2001      	movs	r0, #1
 800156a:	f001 fa73 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <get_out_parking_tower+0x31c>)
 8001576:	f002 f909 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3301      	adds	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001586:	dbe9      	blt.n	800155c <get_out_parking_tower+0x2d4>
		HAL_Delay(500);
 8001588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800158c:	f001 fa62 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <get_out_parking_tower+0x318>)
 8001596:	f002 f8f9 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e013      	b.n	80015c8 <get_out_parking_tower+0x340>
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2120      	movs	r1, #32
 80015ac:	4875      	ldr	r0, [pc, #468]	; (8001784 <get_out_parking_tower+0x4fc>)
 80015ae:	f002 f8ed 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f001 fa4e 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2120      	movs	r1, #32
 80015bc:	4871      	ldr	r0, [pc, #452]	; (8001784 <get_out_parking_tower+0x4fc>)
 80015be:	f002 f8e5 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80015ce:	dbeb      	blt.n	80015a8 <get_out_parking_tower+0x320>
		HAL_Delay(500);
 80015d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d4:	f001 fa3e 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	486a      	ldr	r0, [pc, #424]	; (8001788 <get_out_parking_tower+0x500>)
 80015e0:	f002 f8d4 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e011      	b.n	800160e <get_out_parking_tower+0x386>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f0:	4865      	ldr	r0, [pc, #404]	; (8001788 <get_out_parking_tower+0x500>)
 80015f2:	f002 f8cb 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f001 fa2c 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001602:	4861      	ldr	r0, [pc, #388]	; (8001788 <get_out_parking_tower+0x500>)
 8001604:	f002 f8c2 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	3301      	adds	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001614:	dbe9      	blt.n	80015ea <get_out_parking_tower+0x362>
		HAL_Delay(500);
 8001616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161a:	f001 fa1b 	bl	8002a54 <HAL_Delay>
}
 800161e:	e0ac      	b.n	800177a <get_out_parking_tower+0x4f2>
	else if(from == 4)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b04      	cmp	r3, #4
 8001624:	f040 80a9 	bne.w	800177a <get_out_parking_tower+0x4f2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800162e:	4856      	ldr	r0, [pc, #344]	; (8001788 <get_out_parking_tower+0x500>)
 8001630:	f002 f8ac 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e011      	b.n	800165e <get_out_parking_tower+0x3d6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4851      	ldr	r0, [pc, #324]	; (8001788 <get_out_parking_tower+0x500>)
 8001642:	f002 f8a3 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f001 fa04 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001652:	484d      	ldr	r0, [pc, #308]	; (8001788 <get_out_parking_tower+0x500>)
 8001654:	f002 f89a 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3301      	adds	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001664:	dbe9      	blt.n	800163a <get_out_parking_tower+0x3b2>
		HAL_Delay(500);
 8001666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166a:	f001 f9f3 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2140      	movs	r1, #64	; 0x40
 8001672:	4844      	ldr	r0, [pc, #272]	; (8001784 <get_out_parking_tower+0x4fc>)
 8001674:	f002 f88a 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e00f      	b.n	800169e <get_out_parking_tower+0x416>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2120      	movs	r1, #32
 8001682:	4840      	ldr	r0, [pc, #256]	; (8001784 <get_out_parking_tower+0x4fc>)
 8001684:	f002 f882 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f001 f9e3 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2120      	movs	r1, #32
 8001692:	483c      	ldr	r0, [pc, #240]	; (8001784 <get_out_parking_tower+0x4fc>)
 8001694:	f002 f87a 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80016a4:	dbeb      	blt.n	800167e <get_out_parking_tower+0x3f6>
		HAL_Delay(500);
 80016a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016aa:	f001 f9d3 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b4:	4834      	ldr	r0, [pc, #208]	; (8001788 <get_out_parking_tower+0x500>)
 80016b6:	f002 f869 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<440;i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e011      	b.n	80016e4 <get_out_parking_tower+0x45c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c6:	4830      	ldr	r0, [pc, #192]	; (8001788 <get_out_parking_tower+0x500>)
 80016c8:	f002 f860 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f001 f9c1 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d8:	482b      	ldr	r0, [pc, #172]	; (8001788 <get_out_parking_tower+0x500>)
 80016da:	f002 f857 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<440;i++)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80016ea:	dbe9      	blt.n	80016c0 <get_out_parking_tower+0x438>
		HAL_Delay(500);
 80016ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f0:	f001 f9b0 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	4822      	ldr	r0, [pc, #136]	; (8001784 <get_out_parking_tower+0x4fc>)
 80016fa:	f002 f847 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00f      	b.n	8001724 <get_out_parking_tower+0x49c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <get_out_parking_tower+0x4fc>)
 800170a:	f002 f83f 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800170e:	2001      	movs	r0, #1
 8001710:	f001 f9a0 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2120      	movs	r1, #32
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <get_out_parking_tower+0x4fc>)
 800171a:	f002 f837 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<800;i++)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3301      	adds	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800172a:	dbeb      	blt.n	8001704 <get_out_parking_tower+0x47c>
		HAL_Delay(500);
 800172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001730:	f001 f990 	bl	8002a54 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800173a:	4813      	ldr	r0, [pc, #76]	; (8001788 <get_out_parking_tower+0x500>)
 800173c:	f002 f826 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e011      	b.n	800176a <get_out_parking_tower+0x4e2>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <get_out_parking_tower+0x500>)
 800174e:	f002 f81d 	bl	800378c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f001 f97e 	bl	8002a54 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175e:	480a      	ldr	r0, [pc, #40]	; (8001788 <get_out_parking_tower+0x500>)
 8001760:	f002 f814 	bl	800378c <HAL_GPIO_WritePin>
		for(i=0;i<1440;i++)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	3301      	adds	r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8001770:	dbe9      	blt.n	8001746 <get_out_parking_tower+0x4be>
		HAL_Delay(500);
 8001772:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001776:	f001 f96d 	bl	8002a54 <HAL_Delay>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400

0800178c <esp_at_command>:
//static cb_data_t cb_data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart2;

static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	807b      	strh	r3, [r7, #2]
    *length = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80017a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a4:	2100      	movs	r1, #0
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f004 fb70 	bl	8005e8c <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80017ac:	f240 4202 	movw	r2, #1026	; 0x402
 80017b0:	2100      	movs	r1, #0
 80017b2:	4827      	ldr	r0, [pc, #156]	; (8001850 <esp_at_command+0xc4>)
 80017b4:	f004 fb6a 	bl	8005e8c <memset>
    if(HAL_UART_Transmit(&huart2, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7fe fd23 	bl	8000204 <strlen>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	2364      	movs	r3, #100	; 0x64
 80017c4:	68f9      	ldr	r1, [r7, #12]
 80017c6:	4823      	ldr	r0, [pc, #140]	; (8001854 <esp_at_command+0xc8>)
 80017c8:	f002 fe15 	bl	80043f6 <HAL_UART_Transmit>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d031      	beq.n	8001836 <esp_at_command+0xaa>
        return -1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e037      	b.n	8001848 <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <esp_at_command+0xc4>)
 80017da:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80017de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e2:	d302      	bcc.n	80017ea <esp_at_command+0x5e>
            return -2;
 80017e4:	f06f 0301 	mvn.w	r3, #1
 80017e8:	e02e      	b.n	8001848 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80017ea:	491b      	ldr	r1, [pc, #108]	; (8001858 <esp_at_command+0xcc>)
 80017ec:	4818      	ldr	r0, [pc, #96]	; (8001850 <esp_at_command+0xc4>)
 80017ee:	f004 fbd1 	bl	8005f94 <strstr>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <esp_at_command+0x72>
            return -3;
 80017f8:	f06f 0302 	mvn.w	r3, #2
 80017fc:	e024      	b.n	8001848 <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80017fe:	4917      	ldr	r1, [pc, #92]	; (800185c <esp_at_command+0xd0>)
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <esp_at_command+0xc4>)
 8001802:	f004 fbc7 	bl	8005f94 <strstr>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <esp_at_command+0xc4>)
 800180e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001812:	461a      	mov	r2, r3
 8001814:	490e      	ldr	r1, [pc, #56]	; (8001850 <esp_at_command+0xc4>)
 8001816:	68b8      	ldr	r0, [r7, #8]
 8001818:	f004 fc4c 	bl	80060b4 <memcpy>
            *length = cb_data.length;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <esp_at_command+0xc4>)
 800181e:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	801a      	strh	r2, [r3, #0]

            break;
 8001826:	e00a      	b.n	800183e <esp_at_command+0xb2>
        }

        time_out -= 10;
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	3b0a      	subs	r3, #10
 800182c:	b29b      	uxth	r3, r3
 800182e:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8001830:	200a      	movs	r0, #10
 8001832:	f001 f90f 	bl	8002a54 <HAL_Delay>
    while(time_out > 0)
 8001836:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800183a:	2b00      	cmp	r3, #0
 800183c:	dccc      	bgt.n	80017d8 <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 800183e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001842:	f001 f907 	bl	8002a54 <HAL_Delay>
    return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000498 	.word	0x20000498
 8001854:	20000ac4 	.word	0x20000ac4
 8001858:	08006fc4 	.word	0x08006fc4
 800185c:	08006fcc 	.word	0x08006fcc

08001860 <esp_reset>:

static int esp_reset(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800186a:	1dba      	adds	r2, r7, #6
 800186c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001870:	490a      	ldr	r1, [pc, #40]	; (800189c <esp_reset+0x3c>)
 8001872:	480b      	ldr	r0, [pc, #44]	; (80018a0 <esp_reset+0x40>)
 8001874:	f7ff ff8a 	bl	800178c <esp_at_command>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <esp_reset+0x24>
    {
       return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e007      	b.n	8001894 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8001884:	1dba      	adds	r2, r7, #6
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	4904      	ldr	r1, [pc, #16]	; (800189c <esp_reset+0x3c>)
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <esp_reset+0x44>)
 800188e:	f7ff ff7d 	bl	800178c <esp_at_command>
 8001892:	4603      	mov	r3, r0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000094 	.word	0x20000094
 80018a0:	08006fd0 	.word	0x08006fd0
 80018a4:	08006fdc 	.word	0x08006fdc

080018a8 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80018b6:	f107 020a 	add.w	r2, r7, #10
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	492d      	ldr	r1, [pc, #180]	; (8001974 <request_ip_addr+0xcc>)
 80018c0:	482d      	ldr	r0, [pc, #180]	; (8001978 <request_ip_addr+0xd0>)
 80018c2:	f7ff ff63 	bl	800178c <esp_at_command>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80018cc:	482b      	ldr	r0, [pc, #172]	; (800197c <request_ip_addr+0xd4>)
 80018ce:	f004 f9dd 	bl	8005c8c <puts>
 80018d2:	e049      	b.n	8001968 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80018d4:	492a      	ldr	r1, [pc, #168]	; (8001980 <request_ip_addr+0xd8>)
 80018d6:	4827      	ldr	r0, [pc, #156]	; (8001974 <request_ip_addr+0xcc>)
 80018d8:	f004 fb00 	bl	8005edc <strtok>
 80018dc:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03e      	beq.n	8001962 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	e009      	b.n	80018fe <request_ip_addr+0x56>
                printf("%c", response[i]);
 80018ea:	4a22      	ldr	r2, [pc, #136]	; (8001974 <request_ip_addr+0xcc>)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f96e 	bl	8005bd4 <putchar>
            for(int i = 0 ; i < length ; i++)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3301      	adds	r3, #1
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	461a      	mov	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4293      	cmp	r3, r2
 8001906:	dbf0      	blt.n	80018ea <request_ip_addr+0x42>
        }

        while(line != NULL)
 8001908:	e02b      	b.n	8001962 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800190a:	491e      	ldr	r1, [pc, #120]	; (8001984 <request_ip_addr+0xdc>)
 800190c:	6978      	ldr	r0, [r7, #20]
 800190e:	f004 fb41 	bl	8005f94 <strstr>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01f      	beq.n	8001958 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 8001918:	491b      	ldr	r1, [pc, #108]	; (8001988 <request_ip_addr+0xe0>)
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f004 fade 	bl	8005edc <strtok>
                ip = strtok(NULL, "\"");
 8001920:	4919      	ldr	r1, [pc, #100]	; (8001988 <request_ip_addr+0xe0>)
 8001922:	2000      	movs	r0, #0
 8001924:	f004 fada 	bl	8005edc <strtok>
 8001928:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800192a:	4918      	ldr	r1, [pc, #96]	; (800198c <request_ip_addr+0xe4>)
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7fe fc5f 	bl	80001f0 <strcmp>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00f      	beq.n	8001958 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001938:	2210      	movs	r2, #16
 800193a:	2100      	movs	r1, #0
 800193c:	4814      	ldr	r0, [pc, #80]	; (8001990 <request_ip_addr+0xe8>)
 800193e:	f004 faa5 	bl	8005e8c <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7fe fc5e 	bl	8000204 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <request_ip_addr+0xe8>)
 8001950:	f004 fbb0 	bl	80060b4 <memcpy>
                    return 0;
 8001954:	2300      	movs	r3, #0
 8001956:	e009      	b.n	800196c <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <request_ip_addr+0xd8>)
 800195a:	2000      	movs	r0, #0
 800195c:	f004 fabe 	bl	8005edc <strtok>
 8001960:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1d0      	bne.n	800190a <request_ip_addr+0x62>
        }
    }

    return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000094 	.word	0x20000094
 8001978:	08007020 	.word	0x08007020
 800197c:	0800702c 	.word	0x0800702c
 8001980:	08007014 	.word	0x08007014
 8001984:	0800704c 	.word	0x0800704c
 8001988:	0800701c 	.word	0x0800701c
 800198c:	08006fe4 	.word	0x08006fe4
 8001990:	20000084 	.word	0x20000084

08001994 <esp_client_conn>:
int esp_client_conn()
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b092      	sub	sp, #72	; 0x48
 8001998:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	223c      	movs	r2, #60	; 0x3c
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fa70 	bl	8005e8c <memset>
  uint16_t length = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80019b0:	f107 0008 	add.w	r0, r7, #8
 80019b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <esp_client_conn+0x4c>)
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <esp_client_conn+0x50>)
 80019bc:	f004 f96e 	bl	8005c9c <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80019c0:	1dba      	adds	r2, r7, #6
 80019c2:	f107 0008 	add.w	r0, r7, #8
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	4907      	ldr	r1, [pc, #28]	; (80019e8 <esp_client_conn+0x54>)
 80019cc:	f7ff fede 	bl	800178c <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80019d0:	4806      	ldr	r0, [pc, #24]	; (80019ec <esp_client_conn+0x58>)
 80019d2:	f000 f8ef 	bl	8001bb4 <esp_send_data>
	return 0;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3748      	adds	r7, #72	; 0x48
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08007058 	.word	0x08007058
 80019e4:	08007068 	.word	0x08007068
 80019e8:	20000094 	.word	0x20000094
 80019ec:	08007084 	.word	0x08007084

080019f0 <drv_esp_init>:

int drv_esp_init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <drv_esp_init+0x68>)
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <drv_esp_init+0x6c>)
 80019f8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <drv_esp_init+0x68>)
 80019fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a00:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <drv_esp_init+0x68>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <drv_esp_init+0x68>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <drv_esp_init+0x68>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <drv_esp_init+0x68>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <drv_esp_init+0x68>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <drv_esp_init+0x68>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart2) != HAL_OK)
 8001a26:	480c      	ldr	r0, [pc, #48]	; (8001a58 <drv_esp_init+0x68>)
 8001a28:	f002 fc98 	bl	800435c <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <drv_esp_init+0x48>
        return -1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e00c      	b.n	8001a52 <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 8001a38:	2210      	movs	r2, #16
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	; (8001a60 <drv_esp_init+0x70>)
 8001a3e:	f004 fa25 	bl	8005e8c <memset>
    HAL_UART_Receive_IT(&huart2, &data, 1);
 8001a42:	2201      	movs	r2, #1
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <drv_esp_init+0x74>)
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <drv_esp_init+0x68>)
 8001a48:	f002 fd67 	bl	800451a <HAL_UART_Receive_IT>

    return esp_reset();
 8001a4c:	f7ff ff08 	bl	8001860 <esp_reset>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000ac4 	.word	0x20000ac4
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	20000084 	.word	0x20000084
 8001a64:	20000494 	.word	0x20000494

08001a68 <reset_func>:
void reset_func()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8001a6c:	4808      	ldr	r0, [pc, #32]	; (8001a90 <reset_func+0x28>)
 8001a6e:	f004 f89f 	bl	8005bb0 <iprintf>
	if(esp_reset() == 0)
 8001a72:	f7ff fef5 	bl	8001860 <esp_reset>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <reset_func+0x1c>
			printf("OK\r\n");
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <reset_func+0x2c>)
 8001a7e:	f004 f905 	bl	8005c8c <puts>
	else
			printf("fail\r\n");
}
 8001a82:	e002      	b.n	8001a8a <reset_func+0x22>
			printf("fail\r\n");
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <reset_func+0x30>)
 8001a86:	f004 f901 	bl	8005c8c <puts>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08007094 	.word	0x08007094
 8001a94:	080070a4 	.word	0x080070a4
 8001a98:	080070a8 	.word	0x080070a8

08001a9c <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	; 0x50
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	223c      	movs	r2, #60	; 0x3c
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 f9e7 	bl	8005e8c <memset>
  if(ssid == NULL || passwd == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <ap_conn_func+0x2e>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001aca:	4812      	ldr	r0, [pc, #72]	; (8001b14 <ap_conn_func+0x78>)
 8001acc:	f004 f8de 	bl	8005c8c <puts>
 8001ad0:	e01c      	b.n	8001b0c <ap_conn_func+0x70>
      return;
  }

  memset(at_cmd, 0x00, sizeof(at_cmd));
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 f9d6 	bl	8005e8c <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8001ae0:	f107 000c 	add.w	r0, r7, #12
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	490b      	ldr	r1, [pc, #44]	; (8001b18 <ap_conn_func+0x7c>)
 8001aea:	f004 f8d7 	bl	8005c9c <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001aee:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8001af2:	f107 000c 	add.w	r0, r7, #12
 8001af6:	f241 7370 	movw	r3, #6000	; 0x1770
 8001afa:	4908      	ldr	r1, [pc, #32]	; (8001b1c <ap_conn_func+0x80>)
 8001afc:	f7ff fe46 	bl	800178c <esp_at_command>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <ap_conn_func+0x70>
      printf("ap scan command fail\r\n");
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <ap_conn_func+0x84>)
 8001b08:	f004 f8c0 	bl	8005c8c <puts>
  else
  {
//      for(int i = 0 ; i < length ; i++)
//          printf("%c", response[i]);
  }
}
 8001b0c:	3750      	adds	r7, #80	; 0x50
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	080070ec 	.word	0x080070ec
 8001b18:	08007118 	.word	0x08007118
 8001b1c:	20000094 	.word	0x20000094
 8001b20:	080070d4 	.word	0x080070d4

08001b24 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_UART_RxCpltCallback+0x58>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d11d      	bne.n	8001b72 <HAL_UART_RxCpltCallback+0x4e>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_UART_RxCpltCallback+0x5c>)
 8001b38:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b40:	d20d      	bcs.n	8001b5e <HAL_UART_RxCpltCallback+0x3a>
        {
            cb_data.buf[cb_data.length++] = data;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_UART_RxCpltCallback+0x5c>)
 8001b44:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	b291      	uxth	r1, r2
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <HAL_UART_RxCpltCallback+0x5c>)
 8001b4e:	f8a2 1400 	strh.w	r1, [r2, #1024]	; 0x400
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_UART_RxCpltCallback+0x60>)
 8001b56:	7819      	ldrb	r1, [r3, #0]
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_UART_RxCpltCallback+0x5c>)
 8001b5a:	5499      	strb	r1, [r3, r2]
 8001b5c:	e004      	b.n	8001b68 <HAL_UART_RxCpltCallback+0x44>
        }
        else
            HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b62:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_UART_RxCpltCallback+0x64>)
 8001b64:	f001 fe2b 	bl	80037be <HAL_GPIO_TogglePin>
        HAL_UART_Receive_IT(huart, &data, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4906      	ldr	r1, [pc, #24]	; (8001b84 <HAL_UART_RxCpltCallback+0x60>)
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f002 fcd4 	bl	800451a <HAL_UART_Receive_IT>
    }
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40004400 	.word	0x40004400
 8001b80:	20000498 	.word	0x20000498
 8001b84:	20000494 	.word	0x20000494
 8001b88:	40020c00 	.word	0x40020c00

08001b8c <AiotClient_Init>:


void AiotClient_Init()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	reset_func();
 8001b90:	f7ff ff6a 	bl	8001a68 <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 8001b94:	4905      	ldr	r1, [pc, #20]	; (8001bac <AiotClient_Init+0x20>)
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <AiotClient_Init+0x24>)
 8001b98:	f7ff ff80 	bl	8001a9c <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fe83 	bl	80018a8 <request_ip_addr>
	esp_client_conn();
 8001ba2:	f7ff fef7 	bl	8001994 <esp_client_conn>
//	ip_state_func();
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08007478 	.word	0x08007478
 8001bb0:	08007484 	.word	0x08007484

08001bb4 <esp_send_data>:

void esp_send_data(char *data)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b094      	sub	sp, #80	; 0x50
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	223c      	movs	r2, #60	; 0x3c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f004 f95f 	bl	8005e8c <memset>
  uint16_t length = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7fe fb16 	bl	8000204 <strlen>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <esp_send_data+0x64>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 f85b 	bl	8005c9c <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8001be6:	f107 020e 	add.w	r2, r7, #14
 8001bea:	f107 0010 	add.w	r0, r7, #16
 8001bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf2:	490a      	ldr	r1, [pc, #40]	; (8001c1c <esp_send_data+0x68>)
 8001bf4:	f7ff fdca 	bl	800178c <esp_at_command>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8001bfe:	f107 020e 	add.w	r2, r7, #14
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	4905      	ldr	r1, [pc, #20]	; (8001c1c <esp_send_data+0x68>)
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fdbf 	bl	800178c <esp_at_command>
	}
}
 8001c0e:	bf00      	nop
 8001c10:	3750      	adds	r7, #80	; 0x50
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	080074f0 	.word	0x080074f0
 8001c1c:	20000094 	.word	0x20000094

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int ret = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c2a:	f000 fea1 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2e:	f000 f981 	bl	8001f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c32:	f000 fa65 	bl	8002100 <MX_GPIO_Init>
  MX_ETH_Init();
 8001c36:	f000 f9e7 	bl	8002008 <MX_ETH_Init>
//  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
 8001c3a:	f000 fa33 	bl	80020a4 <MX_USB_OTG_FS_PCD_Init>
//  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8001c3e:	f000 fe41 	bl	80028c4 <drv_uart_init>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8001c4a:	f7ff fed1 	bl	80019f0 <drv_esp_init>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	607b      	str	r3, [r7, #4]
  if(ret != 0) Error_Handler();
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <main+0x40>
 8001c5c:	f000 fb12 	bl	8002284 <Error_Handler>

  printf("Start main() \r\n");
 8001c60:	4815      	ldr	r0, [pc, #84]	; (8001cb8 <main+0x98>)
 8001c62:	f004 f813 	bl	8005c8c <puts>
  AiotClient_Init();
 8001c66:	f7ff ff91 	bl	8001b8c <AiotClient_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
  		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001c6a:	4914      	ldr	r1, [pc, #80]	; (8001cbc <main+0x9c>)
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <main+0xa0>)
 8001c6e:	f004 f991 	bl	8005f94 <strstr>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f8      	beq.n	8001c6a <main+0x4a>
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <main+0xa0>)
 8001c7a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <main+0xa0>)
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	2b0a      	cmp	r3, #10
 8001c86:	d1f0      	bne.n	8001c6a <main+0x4a>
      {
      		//?섏떊?щĸ  \r\n+IPD,15:[KSH_LIN]HELLO\n
      		strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8001c88:	215b      	movs	r1, #91	; 0x5b
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <main+0xa0>)
 8001c8c:	f004 f906 	bl	8005e9c <strchr>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4619      	mov	r1, r3
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <main+0xa4>)
 8001c96:	f004 fa05 	bl	80060a4 <strcpy>
      		memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8001c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <main+0xa0>)
 8001ca2:	f004 f8f3 	bl	8005e8c <memset>
      		cb_data.length = 0;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <main+0xa0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
      		esp_event(strBuff);
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <main+0xa4>)
 8001cb0:	f000 f80a 	bl	8001cc8 <esp_event>
  		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001cb4:	e7d9      	b.n	8001c6a <main+0x4a>
 8001cb6:	bf00      	nop
 8001cb8:	08007500 	.word	0x08007500
 8001cbc:	08007510 	.word	0x08007510
 8001cc0:	20000498 	.word	0x20000498
 8001cc4:	20001058 	.word	0x20001058

08001cc8 <esp_event>:
  }
  /* USER CODE END 3 */
}

void esp_event(char * recvBuf)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09c      	sub	sp, #112	; 0x70
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	6078      	str	r0, [r7, #4]
  int i=0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001cd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	223c      	movs	r2, #60	; 0x3c
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f8cb 	bl	8005e8c <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fa84 	bl	8000204 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	4a7c      	ldr	r2, [pc, #496]	; (8001ef4 <esp_event+0x22c>)
 8001d02:	2100      	movs	r1, #0
 8001d04:	54d1      	strb	r1, [r2, r3]
  printf("Debug recv : %s\r\n",recvBuf);
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	487b      	ldr	r0, [pc, #492]	; (8001ef8 <esp_event+0x230>)
 8001d0a:	f003 ff51 	bl	8005bb0 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8001d0e:	497b      	ldr	r1, [pc, #492]	; (8001efc <esp_event+0x234>)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f004 f8e3 	bl	8005edc <strtok>
 8001d16:	6638      	str	r0, [r7, #96]	; 0x60
  while(pToken != NULL)
 8001d18:	e011      	b.n	8001d3e <esp_event+0x76>
  {
    pArray[i] = pToken;
 8001d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3368      	adds	r3, #104	; 0x68
 8001d20:	443b      	add	r3, r7
 8001d22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d24:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	667b      	str	r3, [r7, #100]	; 0x64
 8001d2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	dc08      	bgt.n	8001d46 <esp_event+0x7e>
      break;
    pToken = strtok(NULL,"[@]");
 8001d34:	4971      	ldr	r1, [pc, #452]	; (8001efc <esp_event+0x234>)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f004 f8d0 	bl	8005edc <strtok>
 8001d3c:	6638      	str	r0, [r7, #96]	; 0x60
  while(pToken != NULL)
 8001d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <esp_event+0x52>
 8001d44:	e000      	b.n	8001d48 <esp_event+0x80>
      break;
 8001d46:	bf00      	nop
  }

  if(!strcmp(pArray[1],"Park"))
 8001d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4a:	496d      	ldr	r1, [pc, #436]	; (8001f00 <esp_event+0x238>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fa4f 	bl	80001f0 <strcmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 8096 	bne.w	8001e86 <esp_event+0x1be>
  {
	  if(!strcmp(pArray[2], "1"))
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	4969      	ldr	r1, [pc, #420]	; (8001f04 <esp_event+0x23c>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fa46 	bl	80001f0 <strcmp>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <esp_event+0xaa>
		  control_motor(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7fe fc26 	bl	80005bc <control_motor>
 8001d70:	e07e      	b.n	8001e70 <esp_event+0x1a8>
	  else if(!strcmp(pArray[2], "2"))
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	4964      	ldr	r1, [pc, #400]	; (8001f08 <esp_event+0x240>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fa3a 	bl	80001f0 <strcmp>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <esp_event+0xc2>
		  control_motor(2);
 8001d82:	2002      	movs	r0, #2
 8001d84:	f7fe fc1a 	bl	80005bc <control_motor>
 8001d88:	e072      	b.n	8001e70 <esp_event+0x1a8>
	  else if(!strcmp(pArray[2], "3"))
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	495f      	ldr	r1, [pc, #380]	; (8001f0c <esp_event+0x244>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fa2e 	bl	80001f0 <strcmp>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <esp_event+0xda>
		  control_motor(3);
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f7fe fc0e 	bl	80005bc <control_motor>
 8001da0:	e066      	b.n	8001e70 <esp_event+0x1a8>
	  else if(!strcmp(pArray[2], "4"))
 8001da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da4:	495a      	ldr	r1, [pc, #360]	; (8001f10 <esp_event+0x248>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fa22 	bl	80001f0 <strcmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <esp_event+0xf2>
		  control_motor(4);
 8001db2:	2004      	movs	r0, #4
 8001db4:	f7fe fc02 	bl	80005bc <control_motor>
 8001db8:	e05a      	b.n	8001e70 <esp_event+0x1a8>
	  else if(!strcmp(pArray[2], "on"))
 8001dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbc:	4955      	ldr	r1, [pc, #340]	; (8001f14 <esp_event+0x24c>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fa16 	bl	80001f0 <strcmp>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d133      	bne.n	8001e32 <esp_event+0x16a>
	  {
		  if(!strcmp(pArray[3], "1"))
 8001dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <esp_event+0x23c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fa0e 	bl	80001f0 <strcmp>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <esp_event+0x136>
		  {
			  if(!strcmp(pArray[4], "3"))
 8001dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ddc:	494b      	ldr	r1, [pc, #300]	; (8001f0c <esp_event+0x244>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fa06 	bl	80001f0 <strcmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d104      	bne.n	8001df4 <esp_event+0x12c>
				  move_to_parking_slot(1,3);
 8001dea:	2103      	movs	r1, #3
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7fe fe69 	bl	8000ac4 <move_to_parking_slot>
 8001df2:	e03d      	b.n	8001e70 <esp_event+0x1a8>
			  else
				  move_to_parking_slot(1,4);
 8001df4:	2104      	movs	r1, #4
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7fe fe64 	bl	8000ac4 <move_to_parking_slot>
 8001dfc:	e038      	b.n	8001e70 <esp_event+0x1a8>
		  }
		  else if(!strcmp(pArray[3], "2"))
 8001dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e00:	4941      	ldr	r1, [pc, #260]	; (8001f08 <esp_event+0x240>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe f9f4 	bl	80001f0 <strcmp>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d130      	bne.n	8001e70 <esp_event+0x1a8>
		  {
			  if(!strcmp(pArray[4], "3"))
 8001e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e10:	493e      	ldr	r1, [pc, #248]	; (8001f0c <esp_event+0x244>)
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe f9ec 	bl	80001f0 <strcmp>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d104      	bne.n	8001e28 <esp_event+0x160>
				  move_to_parking_slot(2,3);
 8001e1e:	2103      	movs	r1, #3
 8001e20:	2002      	movs	r0, #2
 8001e22:	f7fe fe4f 	bl	8000ac4 <move_to_parking_slot>
 8001e26:	e023      	b.n	8001e70 <esp_event+0x1a8>
			  else
				  move_to_parking_slot(2,4);
 8001e28:	2104      	movs	r1, #4
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f7fe fe4a 	bl	8000ac4 <move_to_parking_slot>
 8001e30:	e01e      	b.n	8001e70 <esp_event+0x1a8>
		  }
	  }
	  else if(!strcmp(pArray[2], "out"))
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	4938      	ldr	r1, [pc, #224]	; (8001f18 <esp_event+0x250>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe f9da 	bl	80001f0 <strcmp>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <esp_event+0x1a8>
	  {
		  if(!strcmp(pArray[3], "3"))
 8001e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e44:	4931      	ldr	r1, [pc, #196]	; (8001f0c <esp_event+0x244>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe f9d2 	bl	80001f0 <strcmp>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <esp_event+0x192>
			  get_out_parking_tower(3);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f7ff fa18 	bl	8001288 <get_out_parking_tower>
 8001e58:	e00a      	b.n	8001e70 <esp_event+0x1a8>
		  else if(!strcmp(pArray[3], "4"))
 8001e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5c:	492c      	ldr	r1, [pc, #176]	; (8001f10 <esp_event+0x248>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe f9c6 	bl	80001f0 <strcmp>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <esp_event+0x1a8>
			  get_out_parking_tower(4);
 8001e6a:	2004      	movs	r0, #4
 8001e6c:	f7ff fa0c 	bl	8001288 <get_out_parking_tower>
	  }

	  sprintf(sendBuf,"[%s]%s %s\n",pArray[0],pArray[1], pArray[2]);
 8001e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	f107 000c 	add.w	r0, r7, #12
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <esp_event+0x254>)
 8001e80:	f003 ff0c 	bl	8005c9c <siprintf>
 8001e84:	e024      	b.n	8001ed0 <esp_event+0x208>
  }
  else if(!strcmp(pArray[1],"LEDOFF"))
 8001e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e88:	4925      	ldr	r1, [pc, #148]	; (8001f20 <esp_event+0x258>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe f9b0 	bl	80001f0 <strcmp>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <esp_event+0x1de>
  {
  		//MX_GPIO_LED_OFF(LD1_Pin|LD3_Pin|LD2_Pin);
  		sprintf(sendBuf,"[%s]%s\n",pArray[0],pArray[1]);
 8001e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9a:	f107 000c 	add.w	r0, r7, #12
 8001e9e:	4921      	ldr	r1, [pc, #132]	; (8001f24 <esp_event+0x25c>)
 8001ea0:	f003 fefc 	bl	8005c9c <siprintf>
 8001ea4:	e014      	b.n	8001ed0 <esp_event+0x208>
  }
  else if(!strncmp(pArray[1]," New conn",8))
 8001ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	491f      	ldr	r1, [pc, #124]	; (8001f28 <esp_event+0x260>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 f802 	bl	8005eb6 <strncmp>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <esp_event+0x220>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 8001eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eba:	2208      	movs	r2, #8
 8001ebc:	491b      	ldr	r1, [pc, #108]	; (8001f2c <esp_event+0x264>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fff9 	bl	8005eb6 <strncmp>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d110      	bne.n	8001eec <esp_event+0x224>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
			esp_client_conn();
 8001eca:	f7ff fd63 	bl	8001994 <esp_client_conn>
      return;
 8001ece:	e00e      	b.n	8001eee <esp_event+0x226>
  }
  else
      return;

  esp_send_data(sendBuf);
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe6d 	bl	8001bb4 <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4813      	ldr	r0, [pc, #76]	; (8001f30 <esp_event+0x268>)
 8001ee2:	f003 fe65 	bl	8005bb0 <iprintf>
 8001ee6:	e002      	b.n	8001eee <esp_event+0x226>
     return;
 8001ee8:	bf00      	nop
 8001eea:	e000      	b.n	8001eee <esp_event+0x226>
      return;
 8001eec:	bf00      	nop
}
 8001eee:	3768      	adds	r7, #104	; 0x68
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20001058 	.word	0x20001058
 8001ef8:	08007518 	.word	0x08007518
 8001efc:	0800752c 	.word	0x0800752c
 8001f00:	08007530 	.word	0x08007530
 8001f04:	08007538 	.word	0x08007538
 8001f08:	0800753c 	.word	0x0800753c
 8001f0c:	08007540 	.word	0x08007540
 8001f10:	08007544 	.word	0x08007544
 8001f14:	08007548 	.word	0x08007548
 8001f18:	0800754c 	.word	0x0800754c
 8001f1c:	08007550 	.word	0x08007550
 8001f20:	0800755c 	.word	0x0800755c
 8001f24:	08007564 	.word	0x08007564
 8001f28:	0800756c 	.word	0x0800756c
 8001f2c:	08007578 	.word	0x08007578
 8001f30:	08007588 	.word	0x08007588

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b094      	sub	sp, #80	; 0x50
 8001f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3a:	f107 0320 	add.w	r3, r7, #32
 8001f3e:	2230      	movs	r2, #48	; 0x30
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 ffa2 	bl	8005e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <SystemClock_Config+0xcc>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <SystemClock_Config+0xcc>)
 8001f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <SystemClock_Config+0xcc>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <SystemClock_Config+0xd0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <SystemClock_Config+0xd0>)
 8001f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <SystemClock_Config+0xd0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f8c:	607b      	str	r3, [r7, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fa8:	23a8      	movs	r3, #168	; 0xa8
 8001faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fac:	2302      	movs	r3, #2
 8001fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fb0:	2307      	movs	r3, #7
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb4:	f107 0320 	add.w	r3, r7, #32
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fd37 	bl	8003a2c <HAL_RCC_OscConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fc4:	f000 f95e 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	230f      	movs	r3, #15
 8001fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 ff98 	bl	8003f1c <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ff2:	f000 f947 	bl	8002284 <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3750      	adds	r7, #80	; 0x50
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <MX_ETH_Init+0x84>)
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <MX_ETH_Init+0x88>)
 8002010:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <MX_ETH_Init+0x8c>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <MX_ETH_Init+0x8c>)
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <MX_ETH_Init+0x8c>)
 8002020:	22e1      	movs	r2, #225	; 0xe1
 8002022:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <MX_ETH_Init+0x8c>)
 8002026:	2200      	movs	r2, #0
 8002028:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <MX_ETH_Init+0x8c>)
 800202c:	2200      	movs	r2, #0
 800202e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_ETH_Init+0x8c>)
 8002032:	2200      	movs	r2, #0
 8002034:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <MX_ETH_Init+0x84>)
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <MX_ETH_Init+0x8c>)
 800203a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_ETH_Init+0x84>)
 800203e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002042:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_ETH_Init+0x84>)
 8002046:	4a14      	ldr	r2, [pc, #80]	; (8002098 <MX_ETH_Init+0x90>)
 8002048:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <MX_ETH_Init+0x84>)
 800204c:	4a13      	ldr	r2, [pc, #76]	; (800209c <MX_ETH_Init+0x94>)
 800204e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_ETH_Init+0x84>)
 8002052:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002056:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <MX_ETH_Init+0x84>)
 800205a:	f000 fec3 	bl	8002de4 <HAL_ETH_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002064:	f000 f90e 	bl	8002284 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002068:	2238      	movs	r2, #56	; 0x38
 800206a:	2100      	movs	r1, #0
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MX_ETH_Init+0x98>)
 800206e:	f003 ff0d 	bl	8005e8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_ETH_Init+0x98>)
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_ETH_Init+0x98>)
 800207a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800207e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <MX_ETH_Init+0x98>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000a14 	.word	0x20000a14
 8002090:	40028000 	.word	0x40028000
 8002094:	20001098 	.word	0x20001098
 8002098:	20000974 	.word	0x20000974
 800209c:	200008d4 	.word	0x200008d4
 80020a0:	2000089c 	.word	0x2000089c

080020a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b2:	2204      	movs	r2, #4
 80020b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020b8:	2202      	movs	r2, #2
 80020ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c4:	2202      	movs	r2, #2
 80020c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020dc:	2201      	movs	r2, #1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e8:	f001 fb83 	bl	80037f2 <HAL_PCD_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80020f2:	f000 f8c7 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000b4c 	.word	0x20000b4c

08002100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <MX_GPIO_Init+0x170>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a54      	ldr	r2, [pc, #336]	; (8002270 <MX_GPIO_Init+0x170>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b52      	ldr	r3, [pc, #328]	; (8002270 <MX_GPIO_Init+0x170>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <MX_GPIO_Init+0x170>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <MX_GPIO_Init+0x170>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <MX_GPIO_Init+0x170>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <MX_GPIO_Init+0x170>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a46      	ldr	r2, [pc, #280]	; (8002270 <MX_GPIO_Init+0x170>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <MX_GPIO_Init+0x170>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b40      	ldr	r3, [pc, #256]	; (8002270 <MX_GPIO_Init+0x170>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a3f      	ldr	r2, [pc, #252]	; (8002270 <MX_GPIO_Init+0x170>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <MX_GPIO_Init+0x170>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	4b39      	ldr	r3, [pc, #228]	; (8002270 <MX_GPIO_Init+0x170>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a38      	ldr	r2, [pc, #224]	; (8002270 <MX_GPIO_Init+0x170>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <MX_GPIO_Init+0x170>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <MX_GPIO_Init+0x170>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a31      	ldr	r2, [pc, #196]	; (8002270 <MX_GPIO_Init+0x170>)
 80021ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <MX_GPIO_Init+0x170>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2160      	movs	r1, #96	; 0x60
 80021c2:	482c      	ldr	r0, [pc, #176]	; (8002274 <MX_GPIO_Init+0x174>)
 80021c4:	f001 fae2 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 80021c8:	2200      	movs	r2, #0
 80021ca:	f244 3181 	movw	r1, #17281	; 0x4381
 80021ce:	482a      	ldr	r0, [pc, #168]	; (8002278 <MX_GPIO_Init+0x178>)
 80021d0:	f001 fadc 	bl	800378c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2140      	movs	r1, #64	; 0x40
 80021d8:	4828      	ldr	r0, [pc, #160]	; (800227c <MX_GPIO_Init+0x17c>)
 80021da:	f001 fad7 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	4822      	ldr	r0, [pc, #136]	; (8002280 <MX_GPIO_Init+0x180>)
 80021f6:	f001 f91d 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021fa:	2360      	movs	r3, #96	; 0x60
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	4818      	ldr	r0, [pc, #96]	; (8002274 <MX_GPIO_Init+0x174>)
 8002212:	f001 f90f 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8002216:	f244 3381 	movw	r3, #17281	; 0x4381
 800221a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 031c 	add.w	r3, r7, #28
 800222c:	4619      	mov	r1, r3
 800222e:	4812      	ldr	r0, [pc, #72]	; (8002278 <MX_GPIO_Init+0x178>)
 8002230:	f001 f900 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002234:	2340      	movs	r3, #64	; 0x40
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <MX_GPIO_Init+0x17c>)
 800224c:	f001 f8f2 	bl	8003434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	; (800227c <MX_GPIO_Init+0x17c>)
 8002264:	f001 f8e6 	bl	8003434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002268:	bf00      	nop
 800226a:	3730      	adds	r7, #48	; 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40021800 	.word	0x40021800
 8002280:	40020800 	.word	0x40020800

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	4804      	ldr	r0, [pc, #16]	; (80022a0 <Error_Handler+0x1c>)
 8002290:	f001 fa95 	bl	80037be <HAL_GPIO_TogglePin>
  	  HAL_Delay(500);
 8002294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002298:	f000 fbdc 	bl	8002a54 <HAL_Delay>
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800229c:	e7f6      	b.n	800228c <Error_Handler+0x8>
 800229e:	bf00      	nop
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_MspInit+0x4c>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_MspInit+0x4c>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_MspInit+0x4c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_MspInit+0x4c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_MspInit+0x4c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_MspInit+0x4c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	; 0x38
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a55      	ldr	r2, [pc, #340]	; (8002468 <HAL_ETH_MspInit+0x174>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f040 80a4 	bne.w	8002460 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_ETH_MspInit+0x178>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_ETH_MspInit+0x178>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	623b      	str	r3, [r7, #32]
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_ETH_MspInit+0x178>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_ETH_MspInit+0x178>)
 800233e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	4b45      	ldr	r3, [pc, #276]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4a44      	ldr	r2, [pc, #272]	; (800246c <HAL_ETH_MspInit+0x178>)
 800235a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800235e:	6313      	str	r3, [r2, #48]	; 0x30
 8002360:	4b42      	ldr	r3, [pc, #264]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a3d      	ldr	r2, [pc, #244]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b3b      	ldr	r3, [pc, #236]	; (800246c <HAL_ETH_MspInit+0x178>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_ETH_MspInit+0x178>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a36      	ldr	r2, [pc, #216]	; (800246c <HAL_ETH_MspInit+0x178>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_ETH_MspInit+0x178>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	6313      	str	r3, [r2, #48]	; 0x30
 80023b4:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ce:	6313      	str	r3, [r2, #48]	; 0x30
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_ETH_MspInit+0x178>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023dc:	2332      	movs	r3, #50	; 0x32
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023ec:	230b      	movs	r3, #11
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	4619      	mov	r1, r3
 80023f6:	481e      	ldr	r0, [pc, #120]	; (8002470 <HAL_ETH_MspInit+0x17c>)
 80023f8:	f001 f81c 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80023fc:	2386      	movs	r3, #134	; 0x86
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800240c:	230b      	movs	r3, #11
 800240e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	4619      	mov	r1, r3
 8002416:	4817      	ldr	r0, [pc, #92]	; (8002474 <HAL_ETH_MspInit+0x180>)
 8002418:	f001 f80c 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800241c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800242e:	230b      	movs	r3, #11
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002436:	4619      	mov	r1, r3
 8002438:	480f      	ldr	r0, [pc, #60]	; (8002478 <HAL_ETH_MspInit+0x184>)
 800243a:	f000 fffb 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800243e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002450:	230b      	movs	r3, #11
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	4808      	ldr	r0, [pc, #32]	; (800247c <HAL_ETH_MspInit+0x188>)
 800245c:	f000 ffea 	bl	8003434 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3738      	adds	r7, #56	; 0x38
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40028000 	.word	0x40028000
 800246c:	40023800 	.word	0x40023800
 8002470:	40020800 	.word	0x40020800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40021800 	.word	0x40021800

08002480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08c      	sub	sp, #48	; 0x30
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a45      	ldr	r2, [pc, #276]	; (80025b4 <HAL_UART_MspInit+0x134>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d152      	bne.n	8002548 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a35      	ldr	r2, [pc, #212]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_UART_MspInit+0x138>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024f6:	2308      	movs	r3, #8
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002506:	2307      	movs	r3, #7
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	482a      	ldr	r0, [pc, #168]	; (80025bc <HAL_UART_MspInit+0x13c>)
 8002512:	f000 ff8f 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002516:	2320      	movs	r3, #32
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002526:	2307      	movs	r3, #7
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	4619      	mov	r1, r3
 8002530:	4823      	ldr	r0, [pc, #140]	; (80025c0 <HAL_UART_MspInit+0x140>)
 8002532:	f000 ff7f 	bl	8003434 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2026      	movs	r0, #38	; 0x26
 800253c:	f000 fb89 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002540:	2026      	movs	r0, #38	; 0x26
 8002542:	f000 fba2 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002546:	e031      	b.n	80025ac <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_UART_MspInit+0x144>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12c      	bne.n	80025ac <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_UART_MspInit+0x138>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_UART_MspInit+0x138>)
 800255c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002560:	6413      	str	r3, [r2, #64]	; 0x40
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_UART_MspInit+0x138>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_UART_MspInit+0x138>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_UART_MspInit+0x138>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_UART_MspInit+0x138>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800258a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800259c:	2307      	movs	r3, #7
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <HAL_UART_MspInit+0x140>)
 80025a8:	f000 ff44 	bl	8003434 <HAL_GPIO_Init>
}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40004400 	.word	0x40004400
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40004800 	.word	0x40004800

080025c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e8:	d13f      	bne.n	800266a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <HAL_PCD_MspInit+0xac>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a20      	ldr	r2, [pc, #128]	; (8002674 <HAL_PCD_MspInit+0xac>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_PCD_MspInit+0xac>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002606:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800260a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002618:	230a      	movs	r3, #10
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4619      	mov	r1, r3
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002624:	f000 ff06 	bl	8003434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	480e      	ldr	r0, [pc, #56]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 800263e:	f000 fef9 	bl	8003434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <HAL_PCD_MspInit+0xac>)
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <HAL_PCD_MspInit+0xac>)
 8002648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264c:	6353      	str	r3, [r2, #52]	; 0x34
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_PCD_MspInit+0xac>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_PCD_MspInit+0xac>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_PCD_MspInit+0xac>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40020000 	.word	0x40020000

0800267c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <NMI_Handler+0x4>

08002682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <HardFault_Handler+0x4>

08002688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <MemManage_Handler+0x4>

0800268e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <BusFault_Handler+0x4>

08002694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002698:	e7fe      	b.n	8002698 <UsageFault_Handler+0x4>

0800269a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800269a:	b480      	push	{r7}
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c8:	f000 f9a4 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <USART2_IRQHandler+0x10>)
 80026d6:	f001 ff51 	bl	800457c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000ac4 	.word	0x20000ac4

080026e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return 1;
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_kill>:

int _kill(int pid, int sig)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026fe:	f003 fca5 	bl	800604c <__errno>
 8002702:	4603      	mov	r3, r0
 8002704:	2216      	movs	r2, #22
 8002706:	601a      	str	r2, [r3, #0]
  return -1;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_exit>:

void _exit (int status)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ffe7 	bl	80026f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002726:	e7fe      	b.n	8002726 <_exit+0x12>

08002728 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	e00a      	b.n	8002750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800273a:	f3af 8000 	nop.w
 800273e:	4601      	mov	r1, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	b2ca      	uxtb	r2, r1
 8002748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf0      	blt.n	800273a <_read+0x12>
  }

  return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	60f8      	str	r0, [r7, #12]
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e009      	b.n	8002788 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	60ba      	str	r2, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f889 	bl	8002894 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbf1      	blt.n	8002774 <_write+0x12>
  }
  return len;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_close>:

int _close(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027c2:	605a      	str	r2, [r3, #4]
  return 0;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <_isatty>:

int _isatty(int file)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027da:	2301      	movs	r3, #1
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <_sbrk+0x5c>)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <_sbrk+0x60>)
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <_sbrk+0x64>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <_sbrk+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d207      	bcs.n	8002844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002834:	f003 fc0a 	bl	800604c <__errno>
 8002838:	4603      	mov	r3, r0
 800283a:	220c      	movs	r2, #12
 800283c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	e009      	b.n	8002858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <_sbrk+0x64>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <_sbrk+0x64>)
 8002854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20030000 	.word	0x20030000
 8002864:	00000400 	.word	0x00000400
 8002868:	200010a0 	.word	0x200010a0
 800286c:	200011f8 	.word	0x200011f8

08002870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <SystemInit+0x20>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <SystemInit+0x20>)
 800287c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__io_putchar>:

//static UART_HandleTypeDef huart3;
extern UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10) == HAL_OK)
 800289c:	1d39      	adds	r1, r7, #4
 800289e:	230a      	movs	r3, #10
 80028a0:	2201      	movs	r2, #1
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <__io_putchar+0x2c>)
 80028a4:	f001 fda7 	bl	80043f6 <HAL_UART_Transmit>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <__io_putchar+0x1e>
        return ch;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	e001      	b.n	80028b6 <__io_putchar+0x22>
    return -1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000b08 	.word	0x20000b08

080028c4 <drv_uart_init>:


int drv_uart_init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
    huart3.Instance = USART3;
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <drv_uart_init+0x50>)
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <drv_uart_init+0x54>)
 80028cc:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <drv_uart_init+0x50>)
 80028d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d4:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <drv_uart_init+0x50>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <drv_uart_init+0x50>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <drv_uart_init+0x50>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <drv_uart_init+0x50>)
 80028ea:	220c      	movs	r2, #12
 80028ec:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <drv_uart_init+0x50>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <drv_uart_init+0x50>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80028fa:	4806      	ldr	r0, [pc, #24]	; (8002914 <drv_uart_init+0x50>)
 80028fc:	f001 fd2e 	bl	800435c <HAL_UART_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <drv_uart_init+0x48>
        return -1;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295
 800290a:	e000      	b.n	800290e <drv_uart_init+0x4a>

    return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000b08 	.word	0x20000b08
 8002918:	40004800 	.word	0x40004800

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0b      	ldr	r2, [pc, #44]	; (8002964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002938:	4c0b      	ldr	r4, [pc, #44]	; (8002968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002946:	f7ff ff93 	bl	8002870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294a:	f003 fb85 	bl	8006058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7ff f967 	bl	8001c20 <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002954:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002960:	080076a4 	.word	0x080076a4
  ldr r2, =_sbss
 8002964:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002968:	200011f4 	.word	0x200011f4

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 f94f 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	2000      	movs	r0, #0
 80029a0:	f000 f808 	bl	80029b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7ff fc7e 	bl	80022a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_InitTick+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f967 	bl	8002ca6 <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00e      	b.n	8002a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d80a      	bhi.n	80029fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e8:	2200      	movs	r2, #0
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f000 f92f 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_InitTick+0x5c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x20>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x24>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_IncTick+0x24>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000008 	.word	0x20000008
 8002a38:	200010a4 	.word	0x200010a4

08002a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_GetTick+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200010a4 	.word	0x200010a4

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ffee 	bl	8002a3c <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d005      	beq.n	8002a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_Delay+0x44>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a7a:	bf00      	nop
 8002a7c:	f7ff ffde 	bl	8002a3c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d8f7      	bhi.n	8002a7c <HAL_Delay+0x28>
  {
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000008 	.word	0x20000008

08002a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	60d3      	str	r3, [r2, #12]
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db0b      	blt.n	8002b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <__NVIC_EnableIRQ+0x38>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2001      	movs	r0, #1
 8002b22:	fa00 f202 	lsl.w	r2, r0, r2
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
         );
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1c:	f7ff ff8e 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff29 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff3e 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff8e 	bl	8002b90 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5d 	bl	8002b3c <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff31 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff feb6 	bl	8002a3c <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d008      	beq.n	8002cf0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e052      	b.n	8002d96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0216 	bic.w	r2, r2, #22
 8002cfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d103      	bne.n	8002d20 <HAL_DMA_Abort+0x62>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0208 	bic.w	r2, r2, #8
 8002d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d40:	e013      	b.n	8002d6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d42:	f7ff fe7b 	bl	8002a3c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d90c      	bls.n	8002d6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2203      	movs	r2, #3
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e015      	b.n	8002d96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e4      	bne.n	8002d42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	223f      	movs	r2, #63	; 0x3f
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d004      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2280      	movs	r2, #128	; 0x80
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e00c      	b.n	8002dd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06c      	b.n	8002ed0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2223      	movs	r2, #35	; 0x23
 8002e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fa73 	bl	80022f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_ETH_Init+0xf4>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_ETH_Init+0xf4>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <HAL_ETH_Init+0xf4>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_ETH_Init+0xf8>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <HAL_ETH_Init+0xf8>)
 8002e30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e34:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e36:	4b29      	ldr	r3, [pc, #164]	; (8002edc <HAL_ETH_Init+0xf8>)
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	4927      	ldr	r1, [pc, #156]	; (8002edc <HAL_ETH_Init+0xf8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_ETH_Init+0xf8>)
 8002e46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e60:	f7ff fdec 	bl	8002a3c <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e66:	e011      	b.n	8002e8c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e68:	f7ff fde8 	bl	8002a3c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e76:	d909      	bls.n	8002e8c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	22e0      	movs	r2, #224	; 0xe0
 8002e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e021      	b.n	8002ed0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f958 	bl	8003154 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9ff 	bl	80032a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa55 	bl	800335a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9bd 	bl	8003238 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800

08002ee0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4b51      	ldr	r3, [pc, #324]	; (800303c <ETH_SetMACConfig+0x15c>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	7c1b      	ldrb	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <ETH_SetMACConfig+0x28>
 8002f02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f06:	e000      	b.n	8002f0a <ETH_SetMACConfig+0x2a>
 8002f08:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	7c5b      	ldrb	r3, [r3, #17]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <ETH_SetMACConfig+0x38>
 8002f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f16:	e000      	b.n	8002f1a <ETH_SetMACConfig+0x3a>
 8002f18:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f1a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	7fdb      	ldrb	r3, [r3, #31]
 8002f26:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f28:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	7f92      	ldrb	r2, [r2, #30]
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d102      	bne.n	8002f3e <ETH_SetMACConfig+0x5e>
 8002f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f3c:	e000      	b.n	8002f40 <ETH_SetMACConfig+0x60>
 8002f3e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7f1b      	ldrb	r3, [r3, #28]
 8002f46:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f48:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	791b      	ldrb	r3, [r3, #4]
 8002f54:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	d102      	bne.n	8002f68 <ETH_SetMACConfig+0x88>
 8002f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f66:	e000      	b.n	8002f6a <ETH_SetMACConfig+0x8a>
 8002f68:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7bdb      	ldrb	r3, [r3, #15]
 8002f70:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f72:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f80:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f82:	4313      	orrs	r3, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7ff fd5a 	bl	8002a54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002fc6:	2a00      	cmp	r2, #0
 8002fc8:	d101      	bne.n	8002fce <ETH_SetMACConfig+0xee>
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	e000      	b.n	8002fd0 <ETH_SetMACConfig+0xf0>
 8002fce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fd0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002fde:	2a01      	cmp	r2, #1
 8002fe0:	d101      	bne.n	8002fe6 <ETH_SetMACConfig+0x106>
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	e000      	b.n	8002fe8 <ETH_SetMACConfig+0x108>
 8002fe6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fe8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ff0:	2a01      	cmp	r2, #1
 8002ff2:	d101      	bne.n	8002ff8 <ETH_SetMACConfig+0x118>
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	e000      	b.n	8002ffa <ETH_SetMACConfig+0x11a>
 8002ff8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ffa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003002:	2a01      	cmp	r2, #1
 8003004:	d101      	bne.n	800300a <ETH_SetMACConfig+0x12a>
 8003006:	2202      	movs	r2, #2
 8003008:	e000      	b.n	800300c <ETH_SetMACConfig+0x12c>
 800300a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800300c:	4313      	orrs	r3, r2
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003024:	2001      	movs	r0, #1
 8003026:	f7ff fd15 	bl	8002a54 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	ff20810f 	.word	0xff20810f

08003040 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <ETH_SetDMAConfig+0x110>)
 800305a:	4013      	ands	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	7b1b      	ldrb	r3, [r3, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <ETH_SetDMAConfig+0x2c>
 8003066:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800306a:	e000      	b.n	800306e <ETH_SetDMAConfig+0x2e>
 800306c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	7b5b      	ldrb	r3, [r3, #13]
 8003072:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003074:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	7f52      	ldrb	r2, [r2, #29]
 800307a:	2a00      	cmp	r2, #0
 800307c:	d102      	bne.n	8003084 <ETH_SetDMAConfig+0x44>
 800307e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003082:	e000      	b.n	8003086 <ETH_SetDMAConfig+0x46>
 8003084:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003086:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	7b9b      	ldrb	r3, [r3, #14]
 800308c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800308e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003094:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	7f1b      	ldrb	r3, [r3, #28]
 800309a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800309c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7f9b      	ldrb	r3, [r3, #30]
 80030a2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030a4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030aa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030b4:	4313      	orrs	r3, r2
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c4:	461a      	mov	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f7ff fcbc 	bl	8002a54 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e4:	461a      	mov	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	791b      	ldrb	r3, [r3, #4]
 80030ee:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030f4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030fa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003100:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003108:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800310a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003112:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003118:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003122:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003126:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003134:	2001      	movs	r0, #1
 8003136:	f7ff fc8d 	bl	8002a54 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	f8de3f23 	.word	0xf8de3f23

08003154 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0a6      	sub	sp, #152	; 0x98
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800315c:	2301      	movs	r3, #1
 800315e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003168:	2300      	movs	r3, #0
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003190:	2300      	movs	r3, #0
 8003192:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800319a:	2300      	movs	r3, #0
 800319c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fe86 	bl	8002ee0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031d8:	2301      	movs	r3, #1
 80031da:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031f6:	2300      	movs	r3, #0
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003200:	2301      	movs	r3, #1
 8003202:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003208:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800320a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800320e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003214:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003216:	2301      	movs	r3, #1
 8003218:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800321c:	2300      	movs	r3, #0
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff08 	bl	8003040 <ETH_SetDMAConfig>
}
 8003230:	bf00      	nop
 8003232:	3798      	adds	r7, #152	; 0x98
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3305      	adds	r3, #5
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	3204      	adds	r2, #4
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <ETH_MACAddressConfig+0x68>)
 800325a:	4413      	add	r3, r2
 800325c:	461a      	mov	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3303      	adds	r3, #3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	061a      	lsls	r2, r3, #24
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3302      	adds	r3, #2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3301      	adds	r3, #1
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	4313      	orrs	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <ETH_MACAddressConfig+0x6c>)
 800328a:	4413      	add	r3, r2
 800328c:	461a      	mov	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6013      	str	r3, [r2, #0]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40028040 	.word	0x40028040
 80032a4:	40028044 	.word	0x40028044

080032a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e03e      	b.n	8003334 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68d9      	ldr	r1, [r3, #12]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	3206      	adds	r2, #6
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d80c      	bhi.n	8003318 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	e004      	b.n	8003322 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3301      	adds	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d9bd      	bls.n	80032b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334c:	611a      	str	r2, [r3, #16]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800335a:	b480      	push	{r7}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e046      	b.n	80033f6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6919      	ldr	r1, [r3, #16]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80033ac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	3212      	adds	r2, #18
 80033c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d80c      	bhi.n	80033e6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6919      	ldr	r1, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	440b      	add	r3, r1
 80033de:	461a      	mov	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e004      	b.n	80033f0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d9b5      	bls.n	8003368 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	60da      	str	r2, [r3, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e177      	b.n	8003740 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003450:	2201      	movs	r2, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	429a      	cmp	r2, r3
 800346a:	f040 8166 	bne.w	800373a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d005      	beq.n	8003486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003482:	2b02      	cmp	r3, #2
 8003484:	d130      	bne.n	80034e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 0201 	and.w	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d017      	beq.n	8003524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	2203      	movs	r2, #3
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d123      	bne.n	8003578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	220f      	movs	r2, #15
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	08da      	lsrs	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3208      	adds	r2, #8
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	2203      	movs	r2, #3
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80c0 	beq.w	800373a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b66      	ldr	r3, [pc, #408]	; (8003758 <HAL_GPIO_Init+0x324>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	4a65      	ldr	r2, [pc, #404]	; (8003758 <HAL_GPIO_Init+0x324>)
 80035c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ca:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_GPIO_Init+0x324>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d6:	4a61      	ldr	r2, [pc, #388]	; (800375c <HAL_GPIO_Init+0x328>)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	089b      	lsrs	r3, r3, #2
 80035dc:	3302      	adds	r3, #2
 80035de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	220f      	movs	r2, #15
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_GPIO_Init+0x32c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d037      	beq.n	8003672 <HAL_GPIO_Init+0x23e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a57      	ldr	r2, [pc, #348]	; (8003764 <HAL_GPIO_Init+0x330>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d031      	beq.n	800366e <HAL_GPIO_Init+0x23a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a56      	ldr	r2, [pc, #344]	; (8003768 <HAL_GPIO_Init+0x334>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d02b      	beq.n	800366a <HAL_GPIO_Init+0x236>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_GPIO_Init+0x338>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d025      	beq.n	8003666 <HAL_GPIO_Init+0x232>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a54      	ldr	r2, [pc, #336]	; (8003770 <HAL_GPIO_Init+0x33c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01f      	beq.n	8003662 <HAL_GPIO_Init+0x22e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a53      	ldr	r2, [pc, #332]	; (8003774 <HAL_GPIO_Init+0x340>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d019      	beq.n	800365e <HAL_GPIO_Init+0x22a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a52      	ldr	r2, [pc, #328]	; (8003778 <HAL_GPIO_Init+0x344>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <HAL_GPIO_Init+0x226>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a51      	ldr	r2, [pc, #324]	; (800377c <HAL_GPIO_Init+0x348>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00d      	beq.n	8003656 <HAL_GPIO_Init+0x222>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a50      	ldr	r2, [pc, #320]	; (8003780 <HAL_GPIO_Init+0x34c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d007      	beq.n	8003652 <HAL_GPIO_Init+0x21e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a4f      	ldr	r2, [pc, #316]	; (8003784 <HAL_GPIO_Init+0x350>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_GPIO_Init+0x21a>
 800364a:	2309      	movs	r3, #9
 800364c:	e012      	b.n	8003674 <HAL_GPIO_Init+0x240>
 800364e:	230a      	movs	r3, #10
 8003650:	e010      	b.n	8003674 <HAL_GPIO_Init+0x240>
 8003652:	2308      	movs	r3, #8
 8003654:	e00e      	b.n	8003674 <HAL_GPIO_Init+0x240>
 8003656:	2307      	movs	r3, #7
 8003658:	e00c      	b.n	8003674 <HAL_GPIO_Init+0x240>
 800365a:	2306      	movs	r3, #6
 800365c:	e00a      	b.n	8003674 <HAL_GPIO_Init+0x240>
 800365e:	2305      	movs	r3, #5
 8003660:	e008      	b.n	8003674 <HAL_GPIO_Init+0x240>
 8003662:	2304      	movs	r3, #4
 8003664:	e006      	b.n	8003674 <HAL_GPIO_Init+0x240>
 8003666:	2303      	movs	r3, #3
 8003668:	e004      	b.n	8003674 <HAL_GPIO_Init+0x240>
 800366a:	2302      	movs	r3, #2
 800366c:	e002      	b.n	8003674 <HAL_GPIO_Init+0x240>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x240>
 8003672:	2300      	movs	r3, #0
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	f002 0203 	and.w	r2, r2, #3
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	4093      	lsls	r3, r2
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003684:	4935      	ldr	r1, [pc, #212]	; (800375c <HAL_GPIO_Init+0x328>)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_GPIO_Init+0x354>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036b6:	4a34      	ldr	r2, [pc, #208]	; (8003788 <HAL_GPIO_Init+0x354>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <HAL_GPIO_Init+0x354>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036e0:	4a29      	ldr	r2, [pc, #164]	; (8003788 <HAL_GPIO_Init+0x354>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_GPIO_Init+0x354>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800370a:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <HAL_GPIO_Init+0x354>)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_GPIO_Init+0x354>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_GPIO_Init+0x354>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3301      	adds	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	f67f ae84 	bls.w	8003450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800
 800375c:	40013800 	.word	0x40013800
 8003760:	40020000 	.word	0x40020000
 8003764:	40020400 	.word	0x40020400
 8003768:	40020800 	.word	0x40020800
 800376c:	40020c00 	.word	0x40020c00
 8003770:	40021000 	.word	0x40021000
 8003774:	40021400 	.word	0x40021400
 8003778:	40021800 	.word	0x40021800
 800377c:	40021c00 	.word	0x40021c00
 8003780:	40022000 	.word	0x40022000
 8003784:	40022400 	.word	0x40022400
 8003788:	40013c00 	.word	0x40013c00

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
 8003798:	4613      	mov	r3, r2
 800379a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800379c:	787b      	ldrb	r3, [r7, #1]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037a8:	e003      	b.n	80037b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037aa:	887b      	ldrh	r3, [r7, #2]
 80037ac:	041a      	lsls	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	619a      	str	r2, [r3, #24]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037d0:	887a      	ldrh	r2, [r7, #2]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	041a      	lsls	r2, r3, #16
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43d9      	mvns	r1, r3
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	400b      	ands	r3, r1
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	619a      	str	r2, [r3, #24]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f4:	b08f      	sub	sp, #60	; 0x3c
 80037f6:	af0a      	add	r7, sp, #40	; 0x28
 80037f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e10f      	b.n	8003a24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe fed2 	bl	80025c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2203      	movs	r2, #3
 8003828:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fe63 	bl	800550e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	687e      	ldr	r6, [r7, #4]
 8003850:	466d      	mov	r5, sp
 8003852:	f106 0410 	add.w	r4, r6, #16
 8003856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003862:	e885 0003 	stmia.w	r5, {r0, r1}
 8003866:	1d33      	adds	r3, r6, #4
 8003868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386a:	6838      	ldr	r0, [r7, #0]
 800386c:	f001 fdee 	bl	800544c <USB_CoreInit>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0d0      	b.n	8003a24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fe51 	bl	8005530 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e04a      	b.n	800392a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	333d      	adds	r3, #61	; 0x3d
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	333c      	adds	r3, #60	; 0x3c
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	b298      	uxth	r0, r3
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3344      	adds	r3, #68	; 0x44
 80038d0:	4602      	mov	r2, r0
 80038d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3340      	adds	r3, #64	; 0x40
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3348      	adds	r3, #72	; 0x48
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334c      	adds	r3, #76	; 0x4c
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	3354      	adds	r3, #84	; 0x54
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	3301      	adds	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d3af      	bcc.n	8003894 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	e044      	b.n	80039c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800393a:	7bfa      	ldrb	r2, [r7, #15]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800397c:	7bfa      	ldrb	r2, [r7, #15]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003992:	7bfa      	ldrb	r2, [r7, #15]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	3301      	adds	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3b5      	bcc.n	800393a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	687e      	ldr	r6, [r7, #4]
 80039d6:	466d      	mov	r5, sp
 80039d8:	f106 0410 	add.w	r4, r6, #16
 80039dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039ec:	1d33      	adds	r3, r6, #4
 80039ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039f0:	6838      	ldr	r0, [r7, #0]
 80039f2:	f001 fde9 	bl	80055c8 <USB_DevInit>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e00d      	b.n	8003a24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 ffb4 	bl	800598a <USB_DevDisconnect>

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e267      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d075      	beq.n	8003b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d00c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a56:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d112      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d10b      	bne.n	8003a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	4b7e      	ldr	r3, [pc, #504]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_RCC_OscConfig+0x108>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d157      	bne.n	8003b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e242      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x74>
 8003a92:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a75      	ldr	r2, [pc, #468]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x98>
 8003aaa:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a6f      	ldr	r2, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6c      	ldr	r2, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xb0>
 8003ac4:	4b69      	ldr	r3, [pc, #420]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a68      	ldr	r2, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe ffaa 	bl	8002a3c <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe ffa6 	bl	8002a3c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e207      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5b      	ldr	r3, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xc0>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe ff96 	bl	8002a3c <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe ff92 	bl	8002a3c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1f3      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0xe8>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	4b4a      	ldr	r3, [pc, #296]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b44      	ldr	r3, [pc, #272]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c7      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4937      	ldr	r1, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe ff4b 	bl	8002a3c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe ff47 	bl	8002a3c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a8      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b28      	ldr	r3, [pc, #160]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4925      	ldr	r1, [pc, #148]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_OscConfig+0x244>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe ff2a 	bl	8002a3c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe ff26 	bl	8002a3c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e187      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe ff0a 	bl	8002a3c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe ff06 	bl	8002a3c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e167      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x240>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x200>
 8003c4a:	e01b      	b.n	8003c84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x248>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fe fef3 	bl	8002a3c <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	e00e      	b.n	8003c78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fe feef 	bl	8002a3c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d907      	bls.n	8003c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e150      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470000 	.word	0x42470000
 8003c74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ea      	bne.n	8003c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8097 	beq.w	8003dc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c96:	4b81      	ldr	r3, [pc, #516]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10f      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	4b7d      	ldr	r3, [pc, #500]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	4a7c      	ldr	r2, [pc, #496]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b77      	ldr	r3, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d118      	bne.n	8003d00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cce:	4b74      	ldr	r3, [pc, #464]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cda:	f7fe feaf 	bl	8002a3c <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe feab 	bl	8002a3c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e10c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf4:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x474>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2ea>
 8003d08:	4b64      	ldr	r3, [pc, #400]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a63      	ldr	r2, [pc, #396]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x30c>
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	4a5e      	ldr	r2, [pc, #376]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6713      	str	r3, [r2, #112]	; 0x70
 8003d2a:	4b5c      	ldr	r3, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x324>
 8003d38:	4b58      	ldr	r3, [pc, #352]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a57      	ldr	r2, [pc, #348]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	4b55      	ldr	r3, [pc, #340]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a54      	ldr	r2, [pc, #336]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 0304 	bic.w	r3, r3, #4
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fe fe70 	bl	8002a3c <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d60:	f7fe fe6c 	bl	8002a3c <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0cb      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ee      	beq.n	8003d60 <HAL_RCC_OscConfig+0x334>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fe fe5a 	bl	8002a3c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fe56 	bl	8002a3c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0b5      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da2:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ee      	bne.n	8003d8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	4a38      	ldr	r2, [pc, #224]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a1 	beq.w	8003f0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dca:	4b34      	ldr	r3, [pc, #208]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d05c      	beq.n	8003e90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d141      	bne.n	8003e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fe fe2a 	bl	8002a3c <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fe26 	bl	8002a3c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e087      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	491b      	ldr	r1, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e34:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fdff 	bl	8002a3c <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e42:	f7fe fdfb 	bl	8002a3c <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e05c      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x416>
 8003e60:	e054      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCC_OscConfig+0x478>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fde8 	bl	8002a3c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fde4 	bl	8002a3c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e045      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_OscConfig+0x470>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0x444>
 8003e8e:	e03d      	b.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e038      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4ec>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d028      	beq.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d121      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d11a      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d111      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d107      	bne.n	8003f08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0cc      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d90c      	bls.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0b8      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d020      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f70:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a58      	ldr	r2, [pc, #352]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f88:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a52      	ldr	r2, [pc, #328]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f94:	4b50      	ldr	r3, [pc, #320]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	494d      	ldr	r1, [pc, #308]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d044      	beq.n	800403c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b47      	ldr	r3, [pc, #284]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d119      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e07f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e067      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4934      	ldr	r1, [pc, #208]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fe fd16 	bl	8002a3c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fe fd12 	bl	8002a3c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04f      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d20c      	bcs.n	8004064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004070:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4916      	ldr	r1, [pc, #88]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	490e      	ldr	r1, [pc, #56]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f821 	bl	80040e8 <HAL_RCC_GetSysClockFreq>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	490a      	ldr	r1, [pc, #40]	; (80040dc <HAL_RCC_ClockConfig+0x1c0>)
 80040b4:	5ccb      	ldrb	r3, [r1, r3]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fc76 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40023c00 	.word	0x40023c00
 80040d8:	40023800 	.word	0x40023800
 80040dc:	0800759c 	.word	0x0800759c
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000004 	.word	0x20000004

080040e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b094      	sub	sp, #80	; 0x50
 80040ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	647b      	str	r3, [r7, #68]	; 0x44
 80040f4:	2300      	movs	r3, #0
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	2300      	movs	r3, #0
 80040fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004100:	4b79      	ldr	r3, [pc, #484]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00d      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x40>
 800410c:	2b08      	cmp	r3, #8
 800410e:	f200 80e1 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_RCC_GetSysClockFreq+0x34>
 8004116:	2b04      	cmp	r3, #4
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x3a>
 800411a:	e0db      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b73      	ldr	r3, [pc, #460]	; (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004120:	e0db      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004126:	e0d8      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004128:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004132:	4b6d      	ldr	r3, [pc, #436]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d063      	beq.n	8004206 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413e:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	2200      	movs	r2, #0
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38
 8004148:	63fa      	str	r2, [r7, #60]	; 0x3c
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004150:	633b      	str	r3, [r7, #48]	; 0x30
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
 8004156:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4621      	mov	r1, r4
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	6139      	str	r1, [r7, #16]
 8004178:	4629      	mov	r1, r5
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800418c:	4659      	mov	r1, fp
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4651      	mov	r1, sl
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4651      	mov	r1, sl
 800419c:	ebb2 0801 	subs.w	r8, r2, r1
 80041a0:	4659      	mov	r1, fp
 80041a2:	eb63 0901 	sbc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	462b      	mov	r3, r5
 80041c8:	eb49 0303 	adc.w	r3, r9, r3
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041da:	4629      	mov	r1, r5
 80041dc:	024b      	lsls	r3, r1, #9
 80041de:	4621      	mov	r1, r4
 80041e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e4:	4621      	mov	r1, r4
 80041e6:	024a      	lsls	r2, r1, #9
 80041e8:	4610      	mov	r0, r2
 80041ea:	4619      	mov	r1, r3
 80041ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ee:	2200      	movs	r2, #0
 80041f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041f8:	f7fc f862 	bl	80002c0 <__aeabi_uldivmod>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4613      	mov	r3, r2
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	e058      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	4618      	mov	r0, r3
 8004210:	4611      	mov	r1, r2
 8004212:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	2300      	movs	r3, #0
 800421a:	627b      	str	r3, [r7, #36]	; 0x24
 800421c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	0159      	lsls	r1, r3, #5
 800422e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004232:	0150      	lsls	r0, r2, #5
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4641      	mov	r1, r8
 800423a:	ebb2 0a01 	subs.w	sl, r2, r1
 800423e:	4649      	mov	r1, r9
 8004240:	eb63 0b01 	sbc.w	fp, r3, r1
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004250:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004254:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004258:	ebb2 040a 	subs.w	r4, r2, sl
 800425c:	eb63 050b 	sbc.w	r5, r3, fp
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	00eb      	lsls	r3, r5, #3
 800426a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426e:	00e2      	lsls	r2, r4, #3
 8004270:	4614      	mov	r4, r2
 8004272:	461d      	mov	r5, r3
 8004274:	4643      	mov	r3, r8
 8004276:	18e3      	adds	r3, r4, r3
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	464b      	mov	r3, r9
 800427c:	eb45 0303 	adc.w	r3, r5, r3
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428e:	4629      	mov	r1, r5
 8004290:	028b      	lsls	r3, r1, #10
 8004292:	4621      	mov	r1, r4
 8004294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004298:	4621      	mov	r1, r4
 800429a:	028a      	lsls	r2, r1, #10
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a2:	2200      	movs	r2, #0
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	61fa      	str	r2, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	f7fc f808 	bl	80002c0 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetSysClockFreq+0x204>)
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3750      	adds	r7, #80	; 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042e6:	bf00      	nop
 80042e8:	40023800 	.word	0x40023800
 80042ec:	00f42400 	.word	0x00f42400
 80042f0:	007a1200 	.word	0x007a1200

080042f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_GetHCLKFreq+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000000 	.word	0x20000000

0800430c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004310:	f7ff fff0 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 8004314:	4602      	mov	r2, r0
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	4903      	ldr	r1, [pc, #12]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004322:	5ccb      	ldrb	r3, [r1, r3]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40023800 	.word	0x40023800
 8004330:	080075ac 	.word	0x080075ac

08004334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004338:	f7ff ffdc 	bl	80042f4 <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0b5b      	lsrs	r3, r3, #13
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	080075ac 	.word	0x080075ac

0800435c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e03f      	b.n	80043ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fe f87c 	bl	8002480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fddf 	bl	8004f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b08a      	sub	sp, #40	; 0x28
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d17c      	bne.n	8004510 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_Transmit+0x2c>
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e075      	b.n	8004512 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_UART_Transmit+0x3e>
 8004430:	2302      	movs	r3, #2
 8004432:	e06e      	b.n	8004512 <HAL_UART_Transmit+0x11c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fe faf7 	bl	8002a3c <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d108      	bne.n	8004478 <HAL_UART_Transmit+0x82>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d104      	bne.n	8004478 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e003      	b.n	8004480 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004488:	e02a      	b.n	80044e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 fb1f 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e036      	b.n	8004512 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10b      	bne.n	80044c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	3302      	adds	r3, #2
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	e007      	b.n	80044d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3301      	adds	r3, #1
 80044d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1cf      	bne.n	800448a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2140      	movs	r1, #64	; 0x40
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 faef 	bl	8004ad8 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	4613      	mov	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	d11d      	bne.n	8004570 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_UART_Receive_IT+0x26>
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e016      	b.n	8004572 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_UART_Receive_IT+0x38>
 800454e:	2302      	movs	r3, #2
 8004550:	e00f      	b.n	8004572 <HAL_UART_Receive_IT+0x58>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	461a      	mov	r2, r3
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fb24 	bl	8004bb4 <UART_Start_Receive_IT>
 800456c:	4603      	mov	r3, r0
 800456e:	e000      	b.n	8004572 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0ba      	sub	sp, #232	; 0xe8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_UART_IRQHandler+0x66>
 80045ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fc07 	bl	8004dee <UART_Receive_IT>
      return;
 80045e0:	e256      	b.n	8004a90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80de 	beq.w	80047a8 <HAL_UART_IRQHandler+0x22c>
 80045ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80d1 	beq.w	80047a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_UART_IRQHandler+0xae>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_UART_IRQHandler+0xd2>
 8004636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0202 	orr.w	r2, r3, #2
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_UART_IRQHandler+0xf6>
 800465a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f043 0204 	orr.w	r2, r3, #4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <HAL_UART_IRQHandler+0x126>
 800467e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800468a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f043 0208 	orr.w	r2, r3, #8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 81ed 	beq.w	8004a86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_UART_IRQHandler+0x14e>
 80046b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb92 	bl	8004dee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <HAL_UART_IRQHandler+0x17a>
 80046ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d04f      	beq.n	8004796 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fa9a 	bl	8004c30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	d141      	bne.n	800478e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004720:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004736:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800473a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004742:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800474e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1d9      	bne.n	800470a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	2b00      	cmp	r3, #0
 800475c:	d013      	beq.n	8004786 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	4a7d      	ldr	r2, [pc, #500]	; (8004958 <HAL_UART_IRQHandler+0x3dc>)
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fb17 	bl	8002d9e <HAL_DMA_Abort_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004780:	4610      	mov	r0, r2
 8004782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	e00e      	b.n	80047a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f990 	bl	8004aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	e00a      	b.n	80047a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f98c 	bl	8004aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e006      	b.n	80047a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f988 	bl	8004aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047a2:	e170      	b.n	8004a86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	bf00      	nop
    return;
 80047a6:	e16e      	b.n	8004a86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	f040 814a 	bne.w	8004a46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8143 	beq.w	8004a46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 813c 	beq.w	8004a46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	f040 80b4 	bne.w	800495c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004800:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8140 	beq.w	8004a8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004812:	429a      	cmp	r2, r3
 8004814:	f080 8139 	bcs.w	8004a8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800481e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482a:	f000 8088 	beq.w	800493e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800485a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800485e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004866:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1d9      	bne.n	800482e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3314      	adds	r3, #20
 8004880:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800488a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800489e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e1      	bne.n	800487a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3314      	adds	r3, #20
 80048bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e3      	bne.n	80048b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	f023 0310 	bic.w	r3, r3, #16
 8004912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004920:	65ba      	str	r2, [r7, #88]	; 0x58
 8004922:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800492e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e3      	bne.n	80048fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe f9c0 	bl	8002cbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004946:	b29b      	uxth	r3, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	b29b      	uxth	r3, r3
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8b6 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004954:	e099      	b.n	8004a8a <HAL_UART_IRQHandler+0x50e>
 8004956:	bf00      	nop
 8004958:	08004cf7 	.word	0x08004cf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 808b 	beq.w	8004a8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8086 	beq.w	8004a8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049a6:	647a      	str	r2, [r7, #68]	; 0x44
 80049a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e3      	bne.n	8004982 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049de:	633a      	str	r2, [r7, #48]	; 0x30
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0310 	bic.w	r3, r3, #16
 8004a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a24:	61fa      	str	r2, [r7, #28]
 8004a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	617b      	str	r3, [r7, #20]
   return(result);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e3      	bne.n	8004a00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f83e 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a44:	e023      	b.n	8004a8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_UART_IRQHandler+0x4ea>
 8004a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f95d 	bl	8004d1e <UART_Transmit_IT>
    return;
 8004a64:	e014      	b.n	8004a90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <HAL_UART_IRQHandler+0x514>
 8004a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f99d 	bl	8004dbe <UART_EndTransmit_IT>
    return;
 8004a84:	e004      	b.n	8004a90 <HAL_UART_IRQHandler+0x514>
    return;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_UART_IRQHandler+0x514>
      return;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_UART_IRQHandler+0x514>
      return;
 8004a8e:	bf00      	nop
  }
}
 8004a90:	37e8      	adds	r7, #232	; 0xe8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop

08004a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b090      	sub	sp, #64	; 0x40
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae8:	e050      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d04c      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8004af8:	f7fd ffa0 	bl	8002a3c <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d241      	bcs.n	8004b8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b28:	637a      	str	r2, [r7, #52]	; 0x34
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e5      	bne.n	8004b08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3314      	adds	r3, #20
 8004b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b5c:	623a      	str	r2, [r7, #32]
 8004b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	69f9      	ldr	r1, [r7, #28]
 8004b62:	6a3a      	ldr	r2, [r7, #32]
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e5      	bne.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e00f      	b.n	8004bac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d09f      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3740      	adds	r7, #64	; 0x40
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2222      	movs	r2, #34	; 0x22
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b095      	sub	sp, #84	; 0x54
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c58:	643a      	str	r2, [r7, #64]	; 0x40
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d119      	bne.n	8004cdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	330c      	adds	r3, #12
 8004cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f023 0310 	bic.w	r3, r3, #16
 8004cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc8:	61ba      	str	r2, [r7, #24]
 8004cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cea:	bf00      	nop
 8004cec:	3754      	adds	r7, #84	; 0x54
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff fecb 	bl	8004aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b21      	cmp	r3, #33	; 0x21
 8004d30:	d13e      	bne.n	8004db0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3a:	d114      	bne.n	8004d66 <UART_Transmit_IT+0x48>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d110      	bne.n	8004d66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	1c9a      	adds	r2, r3, #2
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	621a      	str	r2, [r3, #32]
 8004d64:	e008      	b.n	8004d78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6211      	str	r1, [r2, #32]
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4619      	mov	r1, r3
 8004d86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10f      	bne.n	8004dac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004daa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fe5a 	bl	8004a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b08c      	sub	sp, #48	; 0x30
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b22      	cmp	r3, #34	; 0x22
 8004e00:	f040 80ab 	bne.w	8004f5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0c:	d117      	bne.n	8004e3e <UART_Receive_IT+0x50>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d113      	bne.n	8004e3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	1c9a      	adds	r2, r3, #2
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e3c:	e026      	b.n	8004e8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d007      	beq.n	8004e62 <UART_Receive_IT+0x74>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <UART_Receive_IT+0x82>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e008      	b.n	8004e82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d15a      	bne.n	8004f56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0220 	bic.w	r2, r2, #32
 8004eae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ebe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0201 	bic.w	r2, r2, #1
 8004ece:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d135      	bne.n	8004f4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	623a      	str	r2, [r7, #32]
 8004f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e5      	bne.n	8004ee6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d10a      	bne.n	8004f3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fdbb 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
 8004f4a:	e002      	b.n	8004f52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fc fde9 	bl	8001b24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e002      	b.n	8004f5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3730      	adds	r7, #48	; 0x30
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f68:	b0c0      	sub	sp, #256	; 0x100
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f80:	68d9      	ldr	r1, [r3, #12]
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	ea40 0301 	orr.w	r3, r0, r1
 8004f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fbc:	f021 010c 	bic.w	r1, r1, #12
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	6999      	ldr	r1, [r3, #24]
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	ea40 0301 	orr.w	r3, r0, r1
 8004fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b8f      	ldr	r3, [pc, #572]	; (8005230 <UART_SetConfig+0x2cc>)
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d005      	beq.n	8005004 <UART_SetConfig+0xa0>
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <UART_SetConfig+0x2d0>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d104      	bne.n	800500e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005004:	f7ff f996 	bl	8004334 <HAL_RCC_GetPCLK2Freq>
 8005008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800500c:	e003      	b.n	8005016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800500e:	f7ff f97d 	bl	800430c <HAL_RCC_GetPCLK1Freq>
 8005012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	f040 810c 	bne.w	800523c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005028:	2200      	movs	r2, #0
 800502a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800502e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005036:	4622      	mov	r2, r4
 8005038:	462b      	mov	r3, r5
 800503a:	1891      	adds	r1, r2, r2
 800503c:	65b9      	str	r1, [r7, #88]	; 0x58
 800503e:	415b      	adcs	r3, r3
 8005040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005046:	4621      	mov	r1, r4
 8005048:	eb12 0801 	adds.w	r8, r2, r1
 800504c:	4629      	mov	r1, r5
 800504e:	eb43 0901 	adc.w	r9, r3, r1
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800505e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005066:	4690      	mov	r8, r2
 8005068:	4699      	mov	r9, r3
 800506a:	4623      	mov	r3, r4
 800506c:	eb18 0303 	adds.w	r3, r8, r3
 8005070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005074:	462b      	mov	r3, r5
 8005076:	eb49 0303 	adc.w	r3, r9, r3
 800507a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800508a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800508e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005092:	460b      	mov	r3, r1
 8005094:	18db      	adds	r3, r3, r3
 8005096:	653b      	str	r3, [r7, #80]	; 0x50
 8005098:	4613      	mov	r3, r2
 800509a:	eb42 0303 	adc.w	r3, r2, r3
 800509e:	657b      	str	r3, [r7, #84]	; 0x54
 80050a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050a8:	f7fb f90a 	bl	80002c0 <__aeabi_uldivmod>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4b61      	ldr	r3, [pc, #388]	; (8005238 <UART_SetConfig+0x2d4>)
 80050b2:	fba3 2302 	umull	r2, r3, r3, r2
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	011c      	lsls	r4, r3, #4
 80050ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	1891      	adds	r1, r2, r2
 80050d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050d4:	415b      	adcs	r3, r3
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050dc:	4641      	mov	r1, r8
 80050de:	eb12 0a01 	adds.w	sl, r2, r1
 80050e2:	4649      	mov	r1, r9
 80050e4:	eb43 0b01 	adc.w	fp, r3, r1
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050fc:	4692      	mov	sl, r2
 80050fe:	469b      	mov	fp, r3
 8005100:	4643      	mov	r3, r8
 8005102:	eb1a 0303 	adds.w	r3, sl, r3
 8005106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800510a:	464b      	mov	r3, r9
 800510c:	eb4b 0303 	adc.w	r3, fp, r3
 8005110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005128:	460b      	mov	r3, r1
 800512a:	18db      	adds	r3, r3, r3
 800512c:	643b      	str	r3, [r7, #64]	; 0x40
 800512e:	4613      	mov	r3, r2
 8005130:	eb42 0303 	adc.w	r3, r2, r3
 8005134:	647b      	str	r3, [r7, #68]	; 0x44
 8005136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800513a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800513e:	f7fb f8bf 	bl	80002c0 <__aeabi_uldivmod>
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	4611      	mov	r1, r2
 8005148:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <UART_SetConfig+0x2d4>)
 800514a:	fba3 2301 	umull	r2, r3, r3, r1
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2264      	movs	r2, #100	; 0x64
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	1acb      	subs	r3, r1, r3
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <UART_SetConfig+0x2d4>)
 8005160:	fba3 2302 	umull	r2, r3, r3, r2
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800516c:	441c      	add	r4, r3
 800516e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005172:	2200      	movs	r2, #0
 8005174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800517c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005180:	4642      	mov	r2, r8
 8005182:	464b      	mov	r3, r9
 8005184:	1891      	adds	r1, r2, r2
 8005186:	63b9      	str	r1, [r7, #56]	; 0x38
 8005188:	415b      	adcs	r3, r3
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005190:	4641      	mov	r1, r8
 8005192:	1851      	adds	r1, r2, r1
 8005194:	6339      	str	r1, [r7, #48]	; 0x30
 8005196:	4649      	mov	r1, r9
 8005198:	414b      	adcs	r3, r1
 800519a:	637b      	str	r3, [r7, #52]	; 0x34
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051a8:	4659      	mov	r1, fp
 80051aa:	00cb      	lsls	r3, r1, #3
 80051ac:	4651      	mov	r1, sl
 80051ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051b2:	4651      	mov	r1, sl
 80051b4:	00ca      	lsls	r2, r1, #3
 80051b6:	4610      	mov	r0, r2
 80051b8:	4619      	mov	r1, r3
 80051ba:	4603      	mov	r3, r0
 80051bc:	4642      	mov	r2, r8
 80051be:	189b      	adds	r3, r3, r2
 80051c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051c4:	464b      	mov	r3, r9
 80051c6:	460a      	mov	r2, r1
 80051c8:	eb42 0303 	adc.w	r3, r2, r3
 80051cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051e4:	460b      	mov	r3, r1
 80051e6:	18db      	adds	r3, r3, r3
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ea:	4613      	mov	r3, r2
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051fa:	f7fb f861 	bl	80002c0 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4b0d      	ldr	r3, [pc, #52]	; (8005238 <UART_SetConfig+0x2d4>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a08      	ldr	r2, [pc, #32]	; (8005238 <UART_SetConfig+0x2d4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 0207 	and.w	r2, r3, #7
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4422      	add	r2, r4
 800522a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800522c:	e106      	b.n	800543c <UART_SetConfig+0x4d8>
 800522e:	bf00      	nop
 8005230:	40011000 	.word	0x40011000
 8005234:	40011400 	.word	0x40011400
 8005238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005240:	2200      	movs	r2, #0
 8005242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800524a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800524e:	4642      	mov	r2, r8
 8005250:	464b      	mov	r3, r9
 8005252:	1891      	adds	r1, r2, r2
 8005254:	6239      	str	r1, [r7, #32]
 8005256:	415b      	adcs	r3, r3
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525e:	4641      	mov	r1, r8
 8005260:	1854      	adds	r4, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb43 0501 	adc.w	r5, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	00eb      	lsls	r3, r5, #3
 8005272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005276:	00e2      	lsls	r2, r4, #3
 8005278:	4614      	mov	r4, r2
 800527a:	461d      	mov	r5, r3
 800527c:	4643      	mov	r3, r8
 800527e:	18e3      	adds	r3, r4, r3
 8005280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005284:	464b      	mov	r3, r9
 8005286:	eb45 0303 	adc.w	r3, r5, r3
 800528a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800529a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052aa:	4629      	mov	r1, r5
 80052ac:	008b      	lsls	r3, r1, #2
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b4:	4621      	mov	r1, r4
 80052b6:	008a      	lsls	r2, r1, #2
 80052b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052bc:	f7fb f800 	bl	80002c0 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4b60      	ldr	r3, [pc, #384]	; (8005448 <UART_SetConfig+0x4e4>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	011c      	lsls	r4, r3, #4
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	1891      	adds	r1, r2, r2
 80052e6:	61b9      	str	r1, [r7, #24]
 80052e8:	415b      	adcs	r3, r3
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f0:	4641      	mov	r1, r8
 80052f2:	1851      	adds	r1, r2, r1
 80052f4:	6139      	str	r1, [r7, #16]
 80052f6:	4649      	mov	r1, r9
 80052f8:	414b      	adcs	r3, r1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005308:	4659      	mov	r1, fp
 800530a:	00cb      	lsls	r3, r1, #3
 800530c:	4651      	mov	r1, sl
 800530e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005312:	4651      	mov	r1, sl
 8005314:	00ca      	lsls	r2, r1, #3
 8005316:	4610      	mov	r0, r2
 8005318:	4619      	mov	r1, r3
 800531a:	4603      	mov	r3, r0
 800531c:	4642      	mov	r2, r8
 800531e:	189b      	adds	r3, r3, r2
 8005320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005324:	464b      	mov	r3, r9
 8005326:	460a      	mov	r2, r1
 8005328:	eb42 0303 	adc.w	r3, r2, r3
 800532c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	67bb      	str	r3, [r7, #120]	; 0x78
 800533a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005348:	4649      	mov	r1, r9
 800534a:	008b      	lsls	r3, r1, #2
 800534c:	4641      	mov	r1, r8
 800534e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005352:	4641      	mov	r1, r8
 8005354:	008a      	lsls	r2, r1, #2
 8005356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800535a:	f7fa ffb1 	bl	80002c0 <__aeabi_uldivmod>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	4611      	mov	r1, r2
 8005364:	4b38      	ldr	r3, [pc, #224]	; (8005448 <UART_SetConfig+0x4e4>)
 8005366:	fba3 2301 	umull	r2, r3, r3, r1
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2264      	movs	r2, #100	; 0x64
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	1acb      	subs	r3, r1, r3
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	3332      	adds	r3, #50	; 0x32
 8005378:	4a33      	ldr	r2, [pc, #204]	; (8005448 <UART_SetConfig+0x4e4>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005384:	441c      	add	r4, r3
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	673b      	str	r3, [r7, #112]	; 0x70
 800538e:	677a      	str	r2, [r7, #116]	; 0x74
 8005390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	415b      	adcs	r3, r3
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d6:	464b      	mov	r3, r9
 80053d8:	460a      	mov	r2, r1
 80053da:	eb42 0303 	adc.w	r3, r2, r3
 80053de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ea:	667a      	str	r2, [r7, #100]	; 0x64
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053f8:	4649      	mov	r1, r9
 80053fa:	008b      	lsls	r3, r1, #2
 80053fc:	4641      	mov	r1, r8
 80053fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005402:	4641      	mov	r1, r8
 8005404:	008a      	lsls	r2, r1, #2
 8005406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800540a:	f7fa ff59 	bl	80002c0 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <UART_SetConfig+0x4e4>)
 8005414:	fba3 1302 	umull	r1, r3, r3, r2
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	2164      	movs	r1, #100	; 0x64
 800541c:	fb01 f303 	mul.w	r3, r1, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	3332      	adds	r3, #50	; 0x32
 8005426:	4a08      	ldr	r2, [pc, #32]	; (8005448 <UART_SetConfig+0x4e4>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	095b      	lsrs	r3, r3, #5
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4422      	add	r2, r4
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005442:	46bd      	mov	sp, r7
 8005444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005448:	51eb851f 	.word	0x51eb851f

0800544c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800544c:	b084      	sub	sp, #16
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	f107 001c 	add.w	r0, r7, #28
 800545a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2b01      	cmp	r3, #1
 8005462:	d122      	bne.n	80054aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d105      	bne.n	800549e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 faa2 	bl	80059e8 <USB_CoreReset>
 80054a4:	4603      	mov	r3, r0
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	e01a      	b.n	80054e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa96 	bl	80059e8 <USB_CoreReset>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
 80054d2:	e005      	b.n	80054e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10b      	bne.n	80054fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f043 0206 	orr.w	r2, r3, #6
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800550a:	b004      	add	sp, #16
 800550c:	4770      	bx	lr

0800550e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f023 0201 	bic.w	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d115      	bne.n	800557e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800555e:	2001      	movs	r0, #1
 8005560:	f7fd fa78 	bl	8002a54 <HAL_Delay>
      ms++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fa2e 	bl	80059cc <USB_GetMode>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d01e      	beq.n	80055b4 <USB_SetCurrentMode+0x84>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b31      	cmp	r3, #49	; 0x31
 800557a:	d9f0      	bls.n	800555e <USB_SetCurrentMode+0x2e>
 800557c:	e01a      	b.n	80055b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d115      	bne.n	80055b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005590:	2001      	movs	r0, #1
 8005592:	f7fd fa5f 	bl	8002a54 <HAL_Delay>
      ms++;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3301      	adds	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fa15 	bl	80059cc <USB_GetMode>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <USB_SetCurrentMode+0x84>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b31      	cmp	r3, #49	; 0x31
 80055ac:	d9f0      	bls.n	8005590 <USB_SetCurrentMode+0x60>
 80055ae:	e001      	b.n	80055b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e005      	b.n	80055c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b32      	cmp	r3, #50	; 0x32
 80055b8:	d101      	bne.n	80055be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c8:	b084      	sub	sp, #16
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b086      	sub	sp, #24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e009      	b.n	80055fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	3340      	adds	r3, #64	; 0x40
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	3301      	adds	r3, #1
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b0e      	cmp	r3, #14
 8005600:	d9f2      	bls.n	80055e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11c      	bne.n	8005642 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005616:	f043 0302 	orr.w	r3, r3, #2
 800561a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
 8005640:	e00b      	b.n	800565a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005660:	461a      	mov	r2, r3
 8005662:	2300      	movs	r3, #0
 8005664:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	4619      	mov	r1, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	461a      	mov	r2, r3
 8005676:	680b      	ldr	r3, [r1, #0]
 8005678:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10c      	bne.n	800569a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d104      	bne.n	8005690 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005686:	2100      	movs	r1, #0
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f965 	bl	8005958 <USB_SetDevSpeed>
 800568e:	e008      	b.n	80056a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005690:	2101      	movs	r1, #1
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f960 	bl	8005958 <USB_SetDevSpeed>
 8005698:	e003      	b.n	80056a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800569a:	2103      	movs	r1, #3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f95b 	bl	8005958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056a2:	2110      	movs	r1, #16
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f8f3 	bl	8005890 <USB_FlushTxFifo>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f91f 	bl	80058f8 <USB_FlushRxFifo>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	461a      	mov	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	461a      	mov	r2, r3
 80056d8:	2300      	movs	r3, #0
 80056da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e043      	b.n	8005776 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005704:	d118      	bne.n	8005738 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	461a      	mov	r2, r3
 800571a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	e013      	b.n	800574a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	461a      	mov	r2, r3
 8005730:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e008      	b.n	800574a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	461a      	mov	r2, r3
 8005758:	2300      	movs	r3, #0
 800575a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	461a      	mov	r2, r3
 800576a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800576e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	3301      	adds	r3, #1
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	429a      	cmp	r2, r3
 800577c:	d3b7      	bcc.n	80056ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800577e:	2300      	movs	r3, #0
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e043      	b.n	800580c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005796:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579a:	d118      	bne.n	80057ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	461a      	mov	r2, r3
 80057b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e013      	b.n	80057e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	461a      	mov	r2, r3
 80057c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	e008      	b.n	80057e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057da:	461a      	mov	r2, r3
 80057dc:	2300      	movs	r3, #0
 80057de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	461a      	mov	r2, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	461a      	mov	r2, r3
 8005800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005804:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	3301      	adds	r3, #1
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d3b7      	bcc.n	8005784 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005826:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005834:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	f043 0210 	orr.w	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <USB_DevInit+0x2c4>)
 800584e:	4313      	orrs	r3, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f043 0208 	orr.w	r2, r3, #8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005874:	f043 0304 	orr.w	r3, r3, #4
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800587c:	7dfb      	ldrb	r3, [r7, #23]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005888:	b004      	add	sp, #16
 800588a:	4770      	bx	lr
 800588c:	803c3800 	.word	0x803c3800

08005890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <USB_FlushTxFifo+0x64>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e01b      	b.n	80058e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	daf2      	bge.n	800589e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	019b      	lsls	r3, r3, #6
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <USB_FlushTxFifo+0x64>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d0f0      	beq.n	80058c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	00030d40 	.word	0x00030d40

080058f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <USB_FlushRxFifo+0x5c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e018      	b.n	8005948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	daf2      	bge.n	8005904 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2210      	movs	r2, #16
 8005926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <USB_FlushRxFifo+0x5c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e006      	b.n	8005948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b10      	cmp	r3, #16
 8005944:	d0f0      	beq.n	8005928 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	00030d40 	.word	0x00030d40

08005958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059a4:	f023 0303 	bic.w	r3, r3, #3
 80059a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b8:	f043 0302 	orr.w	r3, r3, #2
 80059bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	f003 0301 	and.w	r3, r3, #1
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <USB_CoreReset+0x64>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e01b      	b.n	8005a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	daf2      	bge.n	80059f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f043 0201 	orr.w	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <USB_CoreReset+0x64>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e006      	b.n	8005a3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d0f0      	beq.n	8005a1e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <std>:
 8005a50:	2300      	movs	r3, #0
 8005a52:	b510      	push	{r4, lr}
 8005a54:	4604      	mov	r4, r0
 8005a56:	e9c0 3300 	strd	r3, r3, [r0]
 8005a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a5e:	6083      	str	r3, [r0, #8]
 8005a60:	8181      	strh	r1, [r0, #12]
 8005a62:	6643      	str	r3, [r0, #100]	; 0x64
 8005a64:	81c2      	strh	r2, [r0, #14]
 8005a66:	6183      	str	r3, [r0, #24]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	305c      	adds	r0, #92	; 0x5c
 8005a6e:	f000 fa0d 	bl	8005e8c <memset>
 8005a72:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <std+0x38>)
 8005a74:	6263      	str	r3, [r4, #36]	; 0x24
 8005a76:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <std+0x3c>)
 8005a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <std+0x40>)
 8005a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <std+0x44>)
 8005a80:	6224      	str	r4, [r4, #32]
 8005a82:	6323      	str	r3, [r4, #48]	; 0x30
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	bf00      	nop
 8005a88:	08005cdd 	.word	0x08005cdd
 8005a8c:	08005cff 	.word	0x08005cff
 8005a90:	08005d37 	.word	0x08005d37
 8005a94:	08005d5b 	.word	0x08005d5b

08005a98 <stdio_exit_handler>:
 8005a98:	4a02      	ldr	r2, [pc, #8]	; (8005aa4 <stdio_exit_handler+0xc>)
 8005a9a:	4903      	ldr	r1, [pc, #12]	; (8005aa8 <stdio_exit_handler+0x10>)
 8005a9c:	4803      	ldr	r0, [pc, #12]	; (8005aac <stdio_exit_handler+0x14>)
 8005a9e:	f000 b869 	b.w	8005b74 <_fwalk_sglue>
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	08006c71 	.word	0x08006c71
 8005aac:	20000018 	.word	0x20000018

08005ab0 <cleanup_stdio>:
 8005ab0:	6841      	ldr	r1, [r0, #4]
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <cleanup_stdio+0x34>)
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	b510      	push	{r4, lr}
 8005ab8:	4604      	mov	r4, r0
 8005aba:	d001      	beq.n	8005ac0 <cleanup_stdio+0x10>
 8005abc:	f001 f8d8 	bl	8006c70 <_fflush_r>
 8005ac0:	68a1      	ldr	r1, [r4, #8]
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <cleanup_stdio+0x38>)
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d002      	beq.n	8005ace <cleanup_stdio+0x1e>
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f001 f8d1 	bl	8006c70 <_fflush_r>
 8005ace:	68e1      	ldr	r1, [r4, #12]
 8005ad0:	4b06      	ldr	r3, [pc, #24]	; (8005aec <cleanup_stdio+0x3c>)
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	d004      	beq.n	8005ae0 <cleanup_stdio+0x30>
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005adc:	f001 b8c8 	b.w	8006c70 <_fflush_r>
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200010a8 	.word	0x200010a8
 8005ae8:	20001110 	.word	0x20001110
 8005aec:	20001178 	.word	0x20001178

08005af0 <global_stdio_init.part.0>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <global_stdio_init.part.0+0x30>)
 8005af4:	4c0b      	ldr	r4, [pc, #44]	; (8005b24 <global_stdio_init.part.0+0x34>)
 8005af6:	4a0c      	ldr	r2, [pc, #48]	; (8005b28 <global_stdio_init.part.0+0x38>)
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	4620      	mov	r0, r4
 8005afc:	2200      	movs	r2, #0
 8005afe:	2104      	movs	r1, #4
 8005b00:	f7ff ffa6 	bl	8005a50 <std>
 8005b04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b08:	2201      	movs	r2, #1
 8005b0a:	2109      	movs	r1, #9
 8005b0c:	f7ff ffa0 	bl	8005a50 <std>
 8005b10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b14:	2202      	movs	r2, #2
 8005b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b1a:	2112      	movs	r1, #18
 8005b1c:	f7ff bf98 	b.w	8005a50 <std>
 8005b20:	200011e0 	.word	0x200011e0
 8005b24:	200010a8 	.word	0x200010a8
 8005b28:	08005a99 	.word	0x08005a99

08005b2c <__sfp_lock_acquire>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__sfp_lock_acquire+0x8>)
 8005b2e:	f000 bab7 	b.w	80060a0 <__retarget_lock_acquire_recursive>
 8005b32:	bf00      	nop
 8005b34:	200011e9 	.word	0x200011e9

08005b38 <__sfp_lock_release>:
 8005b38:	4801      	ldr	r0, [pc, #4]	; (8005b40 <__sfp_lock_release+0x8>)
 8005b3a:	f000 bab2 	b.w	80060a2 <__retarget_lock_release_recursive>
 8005b3e:	bf00      	nop
 8005b40:	200011e9 	.word	0x200011e9

08005b44 <__sinit>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	f7ff fff0 	bl	8005b2c <__sfp_lock_acquire>
 8005b4c:	6a23      	ldr	r3, [r4, #32]
 8005b4e:	b11b      	cbz	r3, 8005b58 <__sinit+0x14>
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	f7ff bff0 	b.w	8005b38 <__sfp_lock_release>
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <__sinit+0x28>)
 8005b5a:	6223      	str	r3, [r4, #32]
 8005b5c:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <__sinit+0x2c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f5      	bne.n	8005b50 <__sinit+0xc>
 8005b64:	f7ff ffc4 	bl	8005af0 <global_stdio_init.part.0>
 8005b68:	e7f2      	b.n	8005b50 <__sinit+0xc>
 8005b6a:	bf00      	nop
 8005b6c:	08005ab1 	.word	0x08005ab1
 8005b70:	200011e0 	.word	0x200011e0

08005b74 <_fwalk_sglue>:
 8005b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b78:	4607      	mov	r7, r0
 8005b7a:	4688      	mov	r8, r1
 8005b7c:	4614      	mov	r4, r2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b84:	f1b9 0901 	subs.w	r9, r9, #1
 8005b88:	d505      	bpl.n	8005b96 <_fwalk_sglue+0x22>
 8005b8a:	6824      	ldr	r4, [r4, #0]
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	d1f7      	bne.n	8005b80 <_fwalk_sglue+0xc>
 8005b90:	4630      	mov	r0, r6
 8005b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d907      	bls.n	8005bac <_fwalk_sglue+0x38>
 8005b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	d003      	beq.n	8005bac <_fwalk_sglue+0x38>
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	47c0      	blx	r8
 8005baa:	4306      	orrs	r6, r0
 8005bac:	3568      	adds	r5, #104	; 0x68
 8005bae:	e7e9      	b.n	8005b84 <_fwalk_sglue+0x10>

08005bb0 <iprintf>:
 8005bb0:	b40f      	push	{r0, r1, r2, r3}
 8005bb2:	b507      	push	{r0, r1, r2, lr}
 8005bb4:	4906      	ldr	r1, [pc, #24]	; (8005bd0 <iprintf+0x20>)
 8005bb6:	ab04      	add	r3, sp, #16
 8005bb8:	6808      	ldr	r0, [r1, #0]
 8005bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bbe:	6881      	ldr	r1, [r0, #8]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	f000 fd25 	bl	8006610 <_vfiprintf_r>
 8005bc6:	b003      	add	sp, #12
 8005bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bcc:	b004      	add	sp, #16
 8005bce:	4770      	bx	lr
 8005bd0:	20000064 	.word	0x20000064

08005bd4 <putchar>:
 8005bd4:	4b02      	ldr	r3, [pc, #8]	; (8005be0 <putchar+0xc>)
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	6882      	ldr	r2, [r0, #8]
 8005bdc:	f001 b8e4 	b.w	8006da8 <_putc_r>
 8005be0:	20000064 	.word	0x20000064

08005be4 <_puts_r>:
 8005be4:	6a03      	ldr	r3, [r0, #32]
 8005be6:	b570      	push	{r4, r5, r6, lr}
 8005be8:	6884      	ldr	r4, [r0, #8]
 8005bea:	4605      	mov	r5, r0
 8005bec:	460e      	mov	r6, r1
 8005bee:	b90b      	cbnz	r3, 8005bf4 <_puts_r+0x10>
 8005bf0:	f7ff ffa8 	bl	8005b44 <__sinit>
 8005bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf6:	07db      	lsls	r3, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_puts_r+0x22>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	0598      	lsls	r0, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_puts_r+0x22>
 8005c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c02:	f000 fa4d 	bl	80060a0 <__retarget_lock_acquire_recursive>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	d513      	bpl.n	8005c34 <_puts_r+0x50>
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	b18b      	cbz	r3, 8005c34 <_puts_r+0x50>
 8005c10:	3e01      	subs	r6, #1
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	b9e9      	cbnz	r1, 8005c5a <_puts_r+0x76>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da2e      	bge.n	8005c80 <_puts_r+0x9c>
 8005c22:	4622      	mov	r2, r4
 8005c24:	210a      	movs	r1, #10
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f89b 	bl	8005d62 <__swbuf_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d007      	beq.n	8005c40 <_puts_r+0x5c>
 8005c30:	250a      	movs	r5, #10
 8005c32:	e007      	b.n	8005c44 <_puts_r+0x60>
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f8d0 	bl	8005ddc <__swsetup_r>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d0e7      	beq.n	8005c10 <_puts_r+0x2c>
 8005c40:	f04f 35ff 	mov.w	r5, #4294967295
 8005c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c46:	07da      	lsls	r2, r3, #31
 8005c48:	d405      	bmi.n	8005c56 <_puts_r+0x72>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	059b      	lsls	r3, r3, #22
 8005c4e:	d402      	bmi.n	8005c56 <_puts_r+0x72>
 8005c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c52:	f000 fa26 	bl	80060a2 <__retarget_lock_release_recursive>
 8005c56:	4628      	mov	r0, r5
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da04      	bge.n	8005c68 <_puts_r+0x84>
 8005c5e:	69a2      	ldr	r2, [r4, #24]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	dc06      	bgt.n	8005c72 <_puts_r+0x8e>
 8005c64:	290a      	cmp	r1, #10
 8005c66:	d004      	beq.n	8005c72 <_puts_r+0x8e>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	6022      	str	r2, [r4, #0]
 8005c6e:	7019      	strb	r1, [r3, #0]
 8005c70:	e7cf      	b.n	8005c12 <_puts_r+0x2e>
 8005c72:	4622      	mov	r2, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 f874 	bl	8005d62 <__swbuf_r>
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d1c9      	bne.n	8005c12 <_puts_r+0x2e>
 8005c7e:	e7df      	b.n	8005c40 <_puts_r+0x5c>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	250a      	movs	r5, #10
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	6022      	str	r2, [r4, #0]
 8005c88:	701d      	strb	r5, [r3, #0]
 8005c8a:	e7db      	b.n	8005c44 <_puts_r+0x60>

08005c8c <puts>:
 8005c8c:	4b02      	ldr	r3, [pc, #8]	; (8005c98 <puts+0xc>)
 8005c8e:	4601      	mov	r1, r0
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	f7ff bfa7 	b.w	8005be4 <_puts_r>
 8005c96:	bf00      	nop
 8005c98:	20000064 	.word	0x20000064

08005c9c <siprintf>:
 8005c9c:	b40e      	push	{r1, r2, r3}
 8005c9e:	b500      	push	{lr}
 8005ca0:	b09c      	sub	sp, #112	; 0x70
 8005ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ca4:	9002      	str	r0, [sp, #8]
 8005ca6:	9006      	str	r0, [sp, #24]
 8005ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cac:	4809      	ldr	r0, [pc, #36]	; (8005cd4 <siprintf+0x38>)
 8005cae:	9107      	str	r1, [sp, #28]
 8005cb0:	9104      	str	r1, [sp, #16]
 8005cb2:	4909      	ldr	r1, [pc, #36]	; (8005cd8 <siprintf+0x3c>)
 8005cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb8:	9105      	str	r1, [sp, #20]
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	a902      	add	r1, sp, #8
 8005cc0:	f000 fb7e 	bl	80063c0 <_svfiprintf_r>
 8005cc4:	9b02      	ldr	r3, [sp, #8]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	b01c      	add	sp, #112	; 0x70
 8005ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd0:	b003      	add	sp, #12
 8005cd2:	4770      	bx	lr
 8005cd4:	20000064 	.word	0x20000064
 8005cd8:	ffff0208 	.word	0xffff0208

08005cdc <__sread>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	460c      	mov	r4, r1
 8005ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce4:	f000 f98e 	bl	8006004 <_read_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	bfab      	itete	ge
 8005cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cee:	89a3      	ldrhlt	r3, [r4, #12]
 8005cf0:	181b      	addge	r3, r3, r0
 8005cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cf6:	bfac      	ite	ge
 8005cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cfa:	81a3      	strhlt	r3, [r4, #12]
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <__swrite>:
 8005cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	461f      	mov	r7, r3
 8005d04:	898b      	ldrh	r3, [r1, #12]
 8005d06:	05db      	lsls	r3, r3, #23
 8005d08:	4605      	mov	r5, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	d505      	bpl.n	8005d1c <__swrite+0x1e>
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	2302      	movs	r3, #2
 8005d16:	2200      	movs	r2, #0
 8005d18:	f000 f962 	bl	8005fe0 <_lseek_r>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d26:	81a3      	strh	r3, [r4, #12]
 8005d28:	4632      	mov	r2, r6
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	f000 b979 	b.w	8006028 <_write_r>

08005d36 <__sseek>:
 8005d36:	b510      	push	{r4, lr}
 8005d38:	460c      	mov	r4, r1
 8005d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3e:	f000 f94f 	bl	8005fe0 <_lseek_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	bf15      	itete	ne
 8005d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d52:	81a3      	strheq	r3, [r4, #12]
 8005d54:	bf18      	it	ne
 8005d56:	81a3      	strhne	r3, [r4, #12]
 8005d58:	bd10      	pop	{r4, pc}

08005d5a <__sclose>:
 8005d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5e:	f000 b92f 	b.w	8005fc0 <_close_r>

08005d62 <__swbuf_r>:
 8005d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d64:	460e      	mov	r6, r1
 8005d66:	4614      	mov	r4, r2
 8005d68:	4605      	mov	r5, r0
 8005d6a:	b118      	cbz	r0, 8005d74 <__swbuf_r+0x12>
 8005d6c:	6a03      	ldr	r3, [r0, #32]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <__swbuf_r+0x12>
 8005d70:	f7ff fee8 	bl	8005b44 <__sinit>
 8005d74:	69a3      	ldr	r3, [r4, #24]
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	071a      	lsls	r2, r3, #28
 8005d7c:	d525      	bpl.n	8005dca <__swbuf_r+0x68>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	b31b      	cbz	r3, 8005dca <__swbuf_r+0x68>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	6922      	ldr	r2, [r4, #16]
 8005d86:	1a98      	subs	r0, r3, r2
 8005d88:	6963      	ldr	r3, [r4, #20]
 8005d8a:	b2f6      	uxtb	r6, r6
 8005d8c:	4283      	cmp	r3, r0
 8005d8e:	4637      	mov	r7, r6
 8005d90:	dc04      	bgt.n	8005d9c <__swbuf_r+0x3a>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 ff6b 	bl	8006c70 <_fflush_r>
 8005d9a:	b9e0      	cbnz	r0, 8005dd6 <__swbuf_r+0x74>
 8005d9c:	68a3      	ldr	r3, [r4, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	701e      	strb	r6, [r3, #0]
 8005daa:	6962      	ldr	r2, [r4, #20]
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d004      	beq.n	8005dbc <__swbuf_r+0x5a>
 8005db2:	89a3      	ldrh	r3, [r4, #12]
 8005db4:	07db      	lsls	r3, r3, #31
 8005db6:	d506      	bpl.n	8005dc6 <__swbuf_r+0x64>
 8005db8:	2e0a      	cmp	r6, #10
 8005dba:	d104      	bne.n	8005dc6 <__swbuf_r+0x64>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 ff56 	bl	8006c70 <_fflush_r>
 8005dc4:	b938      	cbnz	r0, 8005dd6 <__swbuf_r+0x74>
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 f805 	bl	8005ddc <__swsetup_r>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0d5      	beq.n	8005d82 <__swbuf_r+0x20>
 8005dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8005dda:	e7f4      	b.n	8005dc6 <__swbuf_r+0x64>

08005ddc <__swsetup_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <__swsetup_r+0xac>)
 8005de0:	4605      	mov	r5, r0
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	460c      	mov	r4, r1
 8005de6:	b118      	cbz	r0, 8005df0 <__swsetup_r+0x14>
 8005de8:	6a03      	ldr	r3, [r0, #32]
 8005dea:	b90b      	cbnz	r3, 8005df0 <__swsetup_r+0x14>
 8005dec:	f7ff feaa 	bl	8005b44 <__sinit>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005df6:	0718      	lsls	r0, r3, #28
 8005df8:	d422      	bmi.n	8005e40 <__swsetup_r+0x64>
 8005dfa:	06d9      	lsls	r1, r3, #27
 8005dfc:	d407      	bmi.n	8005e0e <__swsetup_r+0x32>
 8005dfe:	2309      	movs	r3, #9
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	e034      	b.n	8005e78 <__swsetup_r+0x9c>
 8005e0e:	0758      	lsls	r0, r3, #29
 8005e10:	d512      	bpl.n	8005e38 <__swsetup_r+0x5c>
 8005e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e14:	b141      	cbz	r1, 8005e28 <__swsetup_r+0x4c>
 8005e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	d002      	beq.n	8005e24 <__swsetup_r+0x48>
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 f974 	bl	800610c <_free_r>
 8005e24:	2300      	movs	r3, #0
 8005e26:	6363      	str	r3, [r4, #52]	; 0x34
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	2300      	movs	r3, #0
 8005e32:	6063      	str	r3, [r4, #4]
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f043 0308 	orr.w	r3, r3, #8
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	b94b      	cbnz	r3, 8005e58 <__swsetup_r+0x7c>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4e:	d003      	beq.n	8005e58 <__swsetup_r+0x7c>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 ff6c 	bl	8006d30 <__smakebuf_r>
 8005e58:	89a0      	ldrh	r0, [r4, #12]
 8005e5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5e:	f010 0301 	ands.w	r3, r0, #1
 8005e62:	d00a      	beq.n	8005e7a <__swsetup_r+0x9e>
 8005e64:	2300      	movs	r3, #0
 8005e66:	60a3      	str	r3, [r4, #8]
 8005e68:	6963      	ldr	r3, [r4, #20]
 8005e6a:	425b      	negs	r3, r3
 8005e6c:	61a3      	str	r3, [r4, #24]
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	b943      	cbnz	r3, 8005e84 <__swsetup_r+0xa8>
 8005e72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e76:	d1c4      	bne.n	8005e02 <__swsetup_r+0x26>
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	0781      	lsls	r1, r0, #30
 8005e7c:	bf58      	it	pl
 8005e7e:	6963      	ldrpl	r3, [r4, #20]
 8005e80:	60a3      	str	r3, [r4, #8]
 8005e82:	e7f4      	b.n	8005e6e <__swsetup_r+0x92>
 8005e84:	2000      	movs	r0, #0
 8005e86:	e7f7      	b.n	8005e78 <__swsetup_r+0x9c>
 8005e88:	20000064 	.word	0x20000064

08005e8c <memset>:
 8005e8c:	4402      	add	r2, r0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d100      	bne.n	8005e96 <memset+0xa>
 8005e94:	4770      	bx	lr
 8005e96:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9a:	e7f9      	b.n	8005e90 <memset+0x4>

08005e9c <strchr>:
 8005e9c:	b2c9      	uxtb	r1, r1
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea4:	b11a      	cbz	r2, 8005eae <strchr+0x12>
 8005ea6:	428a      	cmp	r2, r1
 8005ea8:	d1f9      	bne.n	8005e9e <strchr+0x2>
 8005eaa:	4618      	mov	r0, r3
 8005eac:	4770      	bx	lr
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	bf18      	it	ne
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	e7f9      	b.n	8005eaa <strchr+0xe>

08005eb6 <strncmp>:
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	b16a      	cbz	r2, 8005ed6 <strncmp+0x20>
 8005eba:	3901      	subs	r1, #1
 8005ebc:	1884      	adds	r4, r0, r2
 8005ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ec2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d103      	bne.n	8005ed2 <strncmp+0x1c>
 8005eca:	42a0      	cmp	r0, r4
 8005ecc:	d001      	beq.n	8005ed2 <strncmp+0x1c>
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	d1f5      	bne.n	8005ebe <strncmp+0x8>
 8005ed2:	1ad0      	subs	r0, r2, r3
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	e7fc      	b.n	8005ed4 <strncmp+0x1e>
	...

08005edc <strtok>:
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <strtok+0x5c>)
 8005ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ee0:	681e      	ldr	r6, [r3, #0]
 8005ee2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	b9fc      	cbnz	r4, 8005f28 <strtok+0x4c>
 8005ee8:	2050      	movs	r0, #80	; 0x50
 8005eea:	9101      	str	r1, [sp, #4]
 8005eec:	f000 f95a 	bl	80061a4 <malloc>
 8005ef0:	9901      	ldr	r1, [sp, #4]
 8005ef2:	6470      	str	r0, [r6, #68]	; 0x44
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	b920      	cbnz	r0, 8005f02 <strtok+0x26>
 8005ef8:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <strtok+0x60>)
 8005efa:	4811      	ldr	r0, [pc, #68]	; (8005f40 <strtok+0x64>)
 8005efc:	215b      	movs	r1, #91	; 0x5b
 8005efe:	f000 f8e7 	bl	80060d0 <__assert_func>
 8005f02:	e9c0 4400 	strd	r4, r4, [r0]
 8005f06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005f0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005f0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005f12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005f16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005f1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005f1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005f22:	6184      	str	r4, [r0, #24]
 8005f24:	7704      	strb	r4, [r0, #28]
 8005f26:	6244      	str	r4, [r0, #36]	; 0x24
 8005f28:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	b002      	add	sp, #8
 8005f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f34:	f000 b806 	b.w	8005f44 <__strtok_r>
 8005f38:	20000064 	.word	0x20000064
 8005f3c:	080075b4 	.word	0x080075b4
 8005f40:	080075cb 	.word	0x080075cb

08005f44 <__strtok_r>:
 8005f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f46:	b908      	cbnz	r0, 8005f4c <__strtok_r+0x8>
 8005f48:	6810      	ldr	r0, [r2, #0]
 8005f4a:	b188      	cbz	r0, 8005f70 <__strtok_r+0x2c>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f54:	460f      	mov	r7, r1
 8005f56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f5a:	b91e      	cbnz	r6, 8005f64 <__strtok_r+0x20>
 8005f5c:	b965      	cbnz	r5, 8005f78 <__strtok_r+0x34>
 8005f5e:	6015      	str	r5, [r2, #0]
 8005f60:	4628      	mov	r0, r5
 8005f62:	e005      	b.n	8005f70 <__strtok_r+0x2c>
 8005f64:	42b5      	cmp	r5, r6
 8005f66:	d1f6      	bne.n	8005f56 <__strtok_r+0x12>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f0      	bne.n	8005f4e <__strtok_r+0xa>
 8005f6c:	6014      	str	r4, [r2, #0]
 8005f6e:	7003      	strb	r3, [r0, #0]
 8005f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f72:	461c      	mov	r4, r3
 8005f74:	e00c      	b.n	8005f90 <__strtok_r+0x4c>
 8005f76:	b915      	cbnz	r5, 8005f7e <__strtok_r+0x3a>
 8005f78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	d1f7      	bne.n	8005f76 <__strtok_r+0x32>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f3      	beq.n	8005f72 <__strtok_r+0x2e>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	e7ed      	b.n	8005f70 <__strtok_r+0x2c>

08005f94 <strstr>:
 8005f94:	780a      	ldrb	r2, [r1, #0]
 8005f96:	b570      	push	{r4, r5, r6, lr}
 8005f98:	b96a      	cbnz	r2, 8005fb6 <strstr+0x22>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d109      	bne.n	8005fb4 <strstr+0x20>
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f6      	beq.n	8005f9a <strstr+0x6>
 8005fac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005fb0:	429e      	cmp	r6, r3
 8005fb2:	d0f7      	beq.n	8005fa4 <strstr+0x10>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	7803      	ldrb	r3, [r0, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1ef      	bne.n	8005f9c <strstr+0x8>
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	e7ec      	b.n	8005f9a <strstr+0x6>

08005fc0 <_close_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d06      	ldr	r5, [pc, #24]	; (8005fdc <_close_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fc fbe5 	bl	800279a <_close>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_close_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_close_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200011e4 	.word	0x200011e4

08005fe0 <_lseek_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_lseek_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fc fbfa 	bl	80027e8 <_lseek>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_lseek_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_lseek_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	200011e4 	.word	0x200011e4

08006004 <_read_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d07      	ldr	r5, [pc, #28]	; (8006024 <_read_r+0x20>)
 8006008:	4604      	mov	r4, r0
 800600a:	4608      	mov	r0, r1
 800600c:	4611      	mov	r1, r2
 800600e:	2200      	movs	r2, #0
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	f7fc fb88 	bl	8002728 <_read>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_read_r+0x1e>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_read_r+0x1e>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	200011e4 	.word	0x200011e4

08006028 <_write_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	; (8006048 <_write_r+0x20>)
 800602c:	4604      	mov	r4, r0
 800602e:	4608      	mov	r0, r1
 8006030:	4611      	mov	r1, r2
 8006032:	2200      	movs	r2, #0
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fc fb93 	bl	8002762 <_write>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_write_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_write_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	200011e4 	.word	0x200011e4

0800604c <__errno>:
 800604c:	4b01      	ldr	r3, [pc, #4]	; (8006054 <__errno+0x8>)
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000064 	.word	0x20000064

08006058 <__libc_init_array>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4d0d      	ldr	r5, [pc, #52]	; (8006090 <__libc_init_array+0x38>)
 800605c:	4c0d      	ldr	r4, [pc, #52]	; (8006094 <__libc_init_array+0x3c>)
 800605e:	1b64      	subs	r4, r4, r5
 8006060:	10a4      	asrs	r4, r4, #2
 8006062:	2600      	movs	r6, #0
 8006064:	42a6      	cmp	r6, r4
 8006066:	d109      	bne.n	800607c <__libc_init_array+0x24>
 8006068:	4d0b      	ldr	r5, [pc, #44]	; (8006098 <__libc_init_array+0x40>)
 800606a:	4c0c      	ldr	r4, [pc, #48]	; (800609c <__libc_init_array+0x44>)
 800606c:	f000 ff9e 	bl	8006fac <_init>
 8006070:	1b64      	subs	r4, r4, r5
 8006072:	10a4      	asrs	r4, r4, #2
 8006074:	2600      	movs	r6, #0
 8006076:	42a6      	cmp	r6, r4
 8006078:	d105      	bne.n	8006086 <__libc_init_array+0x2e>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006080:	4798      	blx	r3
 8006082:	3601      	adds	r6, #1
 8006084:	e7ee      	b.n	8006064 <__libc_init_array+0xc>
 8006086:	f855 3b04 	ldr.w	r3, [r5], #4
 800608a:	4798      	blx	r3
 800608c:	3601      	adds	r6, #1
 800608e:	e7f2      	b.n	8006076 <__libc_init_array+0x1e>
 8006090:	0800769c 	.word	0x0800769c
 8006094:	0800769c 	.word	0x0800769c
 8006098:	0800769c 	.word	0x0800769c
 800609c:	080076a0 	.word	0x080076a0

080060a0 <__retarget_lock_acquire_recursive>:
 80060a0:	4770      	bx	lr

080060a2 <__retarget_lock_release_recursive>:
 80060a2:	4770      	bx	lr

080060a4 <strcpy>:
 80060a4:	4603      	mov	r3, r0
 80060a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060aa:	f803 2b01 	strb.w	r2, [r3], #1
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	d1f9      	bne.n	80060a6 <strcpy+0x2>
 80060b2:	4770      	bx	lr

080060b4 <memcpy>:
 80060b4:	440a      	add	r2, r1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060bc:	d100      	bne.n	80060c0 <memcpy+0xc>
 80060be:	4770      	bx	lr
 80060c0:	b510      	push	{r4, lr}
 80060c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ca:	4291      	cmp	r1, r2
 80060cc:	d1f9      	bne.n	80060c2 <memcpy+0xe>
 80060ce:	bd10      	pop	{r4, pc}

080060d0 <__assert_func>:
 80060d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060d2:	4614      	mov	r4, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <__assert_func+0x2c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4605      	mov	r5, r0
 80060dc:	68d8      	ldr	r0, [r3, #12]
 80060de:	b14c      	cbz	r4, 80060f4 <__assert_func+0x24>
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <__assert_func+0x30>)
 80060e2:	9100      	str	r1, [sp, #0]
 80060e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060e8:	4906      	ldr	r1, [pc, #24]	; (8006104 <__assert_func+0x34>)
 80060ea:	462b      	mov	r3, r5
 80060ec:	f000 fde8 	bl	8006cc0 <fiprintf>
 80060f0:	f000 feda 	bl	8006ea8 <abort>
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <__assert_func+0x38>)
 80060f6:	461c      	mov	r4, r3
 80060f8:	e7f3      	b.n	80060e2 <__assert_func+0x12>
 80060fa:	bf00      	nop
 80060fc:	20000064 	.word	0x20000064
 8006100:	08007625 	.word	0x08007625
 8006104:	08007632 	.word	0x08007632
 8006108:	08007660 	.word	0x08007660

0800610c <_free_r>:
 800610c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800610e:	2900      	cmp	r1, #0
 8006110:	d044      	beq.n	800619c <_free_r+0x90>
 8006112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006116:	9001      	str	r0, [sp, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f1a1 0404 	sub.w	r4, r1, #4
 800611e:	bfb8      	it	lt
 8006120:	18e4      	addlt	r4, r4, r3
 8006122:	f000 f8e7 	bl	80062f4 <__malloc_lock>
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <_free_r+0x94>)
 8006128:	9801      	ldr	r0, [sp, #4]
 800612a:	6813      	ldr	r3, [r2, #0]
 800612c:	b933      	cbnz	r3, 800613c <_free_r+0x30>
 800612e:	6063      	str	r3, [r4, #4]
 8006130:	6014      	str	r4, [r2, #0]
 8006132:	b003      	add	sp, #12
 8006134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006138:	f000 b8e2 	b.w	8006300 <__malloc_unlock>
 800613c:	42a3      	cmp	r3, r4
 800613e:	d908      	bls.n	8006152 <_free_r+0x46>
 8006140:	6825      	ldr	r5, [r4, #0]
 8006142:	1961      	adds	r1, r4, r5
 8006144:	428b      	cmp	r3, r1
 8006146:	bf01      	itttt	eq
 8006148:	6819      	ldreq	r1, [r3, #0]
 800614a:	685b      	ldreq	r3, [r3, #4]
 800614c:	1949      	addeq	r1, r1, r5
 800614e:	6021      	streq	r1, [r4, #0]
 8006150:	e7ed      	b.n	800612e <_free_r+0x22>
 8006152:	461a      	mov	r2, r3
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	b10b      	cbz	r3, 800615c <_free_r+0x50>
 8006158:	42a3      	cmp	r3, r4
 800615a:	d9fa      	bls.n	8006152 <_free_r+0x46>
 800615c:	6811      	ldr	r1, [r2, #0]
 800615e:	1855      	adds	r5, r2, r1
 8006160:	42a5      	cmp	r5, r4
 8006162:	d10b      	bne.n	800617c <_free_r+0x70>
 8006164:	6824      	ldr	r4, [r4, #0]
 8006166:	4421      	add	r1, r4
 8006168:	1854      	adds	r4, r2, r1
 800616a:	42a3      	cmp	r3, r4
 800616c:	6011      	str	r1, [r2, #0]
 800616e:	d1e0      	bne.n	8006132 <_free_r+0x26>
 8006170:	681c      	ldr	r4, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	6053      	str	r3, [r2, #4]
 8006176:	440c      	add	r4, r1
 8006178:	6014      	str	r4, [r2, #0]
 800617a:	e7da      	b.n	8006132 <_free_r+0x26>
 800617c:	d902      	bls.n	8006184 <_free_r+0x78>
 800617e:	230c      	movs	r3, #12
 8006180:	6003      	str	r3, [r0, #0]
 8006182:	e7d6      	b.n	8006132 <_free_r+0x26>
 8006184:	6825      	ldr	r5, [r4, #0]
 8006186:	1961      	adds	r1, r4, r5
 8006188:	428b      	cmp	r3, r1
 800618a:	bf04      	itt	eq
 800618c:	6819      	ldreq	r1, [r3, #0]
 800618e:	685b      	ldreq	r3, [r3, #4]
 8006190:	6063      	str	r3, [r4, #4]
 8006192:	bf04      	itt	eq
 8006194:	1949      	addeq	r1, r1, r5
 8006196:	6021      	streq	r1, [r4, #0]
 8006198:	6054      	str	r4, [r2, #4]
 800619a:	e7ca      	b.n	8006132 <_free_r+0x26>
 800619c:	b003      	add	sp, #12
 800619e:	bd30      	pop	{r4, r5, pc}
 80061a0:	200011ec 	.word	0x200011ec

080061a4 <malloc>:
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <malloc+0xc>)
 80061a6:	4601      	mov	r1, r0
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f000 b823 	b.w	80061f4 <_malloc_r>
 80061ae:	bf00      	nop
 80061b0:	20000064 	.word	0x20000064

080061b4 <sbrk_aligned>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	4e0e      	ldr	r6, [pc, #56]	; (80061f0 <sbrk_aligned+0x3c>)
 80061b8:	460c      	mov	r4, r1
 80061ba:	6831      	ldr	r1, [r6, #0]
 80061bc:	4605      	mov	r5, r0
 80061be:	b911      	cbnz	r1, 80061c6 <sbrk_aligned+0x12>
 80061c0:	f000 fe62 	bl	8006e88 <_sbrk_r>
 80061c4:	6030      	str	r0, [r6, #0]
 80061c6:	4621      	mov	r1, r4
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 fe5d 	bl	8006e88 <_sbrk_r>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	d00a      	beq.n	80061e8 <sbrk_aligned+0x34>
 80061d2:	1cc4      	adds	r4, r0, #3
 80061d4:	f024 0403 	bic.w	r4, r4, #3
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d007      	beq.n	80061ec <sbrk_aligned+0x38>
 80061dc:	1a21      	subs	r1, r4, r0
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fe52 	bl	8006e88 <_sbrk_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d101      	bne.n	80061ec <sbrk_aligned+0x38>
 80061e8:	f04f 34ff 	mov.w	r4, #4294967295
 80061ec:	4620      	mov	r0, r4
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	200011f0 	.word	0x200011f0

080061f4 <_malloc_r>:
 80061f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f8:	1ccd      	adds	r5, r1, #3
 80061fa:	f025 0503 	bic.w	r5, r5, #3
 80061fe:	3508      	adds	r5, #8
 8006200:	2d0c      	cmp	r5, #12
 8006202:	bf38      	it	cc
 8006204:	250c      	movcc	r5, #12
 8006206:	2d00      	cmp	r5, #0
 8006208:	4607      	mov	r7, r0
 800620a:	db01      	blt.n	8006210 <_malloc_r+0x1c>
 800620c:	42a9      	cmp	r1, r5
 800620e:	d905      	bls.n	800621c <_malloc_r+0x28>
 8006210:	230c      	movs	r3, #12
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	2600      	movs	r6, #0
 8006216:	4630      	mov	r0, r6
 8006218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800621c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062f0 <_malloc_r+0xfc>
 8006220:	f000 f868 	bl	80062f4 <__malloc_lock>
 8006224:	f8d8 3000 	ldr.w	r3, [r8]
 8006228:	461c      	mov	r4, r3
 800622a:	bb5c      	cbnz	r4, 8006284 <_malloc_r+0x90>
 800622c:	4629      	mov	r1, r5
 800622e:	4638      	mov	r0, r7
 8006230:	f7ff ffc0 	bl	80061b4 <sbrk_aligned>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	4604      	mov	r4, r0
 8006238:	d155      	bne.n	80062e6 <_malloc_r+0xf2>
 800623a:	f8d8 4000 	ldr.w	r4, [r8]
 800623e:	4626      	mov	r6, r4
 8006240:	2e00      	cmp	r6, #0
 8006242:	d145      	bne.n	80062d0 <_malloc_r+0xdc>
 8006244:	2c00      	cmp	r4, #0
 8006246:	d048      	beq.n	80062da <_malloc_r+0xe6>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	4631      	mov	r1, r6
 800624c:	4638      	mov	r0, r7
 800624e:	eb04 0903 	add.w	r9, r4, r3
 8006252:	f000 fe19 	bl	8006e88 <_sbrk_r>
 8006256:	4581      	cmp	r9, r0
 8006258:	d13f      	bne.n	80062da <_malloc_r+0xe6>
 800625a:	6821      	ldr	r1, [r4, #0]
 800625c:	1a6d      	subs	r5, r5, r1
 800625e:	4629      	mov	r1, r5
 8006260:	4638      	mov	r0, r7
 8006262:	f7ff ffa7 	bl	80061b4 <sbrk_aligned>
 8006266:	3001      	adds	r0, #1
 8006268:	d037      	beq.n	80062da <_malloc_r+0xe6>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	442b      	add	r3, r5
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	f8d8 3000 	ldr.w	r3, [r8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d038      	beq.n	80062ea <_malloc_r+0xf6>
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	42a2      	cmp	r2, r4
 800627c:	d12b      	bne.n	80062d6 <_malloc_r+0xe2>
 800627e:	2200      	movs	r2, #0
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	e00f      	b.n	80062a4 <_malloc_r+0xb0>
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	1b52      	subs	r2, r2, r5
 8006288:	d41f      	bmi.n	80062ca <_malloc_r+0xd6>
 800628a:	2a0b      	cmp	r2, #11
 800628c:	d917      	bls.n	80062be <_malloc_r+0xca>
 800628e:	1961      	adds	r1, r4, r5
 8006290:	42a3      	cmp	r3, r4
 8006292:	6025      	str	r5, [r4, #0]
 8006294:	bf18      	it	ne
 8006296:	6059      	strne	r1, [r3, #4]
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	bf08      	it	eq
 800629c:	f8c8 1000 	streq.w	r1, [r8]
 80062a0:	5162      	str	r2, [r4, r5]
 80062a2:	604b      	str	r3, [r1, #4]
 80062a4:	4638      	mov	r0, r7
 80062a6:	f104 060b 	add.w	r6, r4, #11
 80062aa:	f000 f829 	bl	8006300 <__malloc_unlock>
 80062ae:	f026 0607 	bic.w	r6, r6, #7
 80062b2:	1d23      	adds	r3, r4, #4
 80062b4:	1af2      	subs	r2, r6, r3
 80062b6:	d0ae      	beq.n	8006216 <_malloc_r+0x22>
 80062b8:	1b9b      	subs	r3, r3, r6
 80062ba:	50a3      	str	r3, [r4, r2]
 80062bc:	e7ab      	b.n	8006216 <_malloc_r+0x22>
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6862      	ldr	r2, [r4, #4]
 80062c2:	d1dd      	bne.n	8006280 <_malloc_r+0x8c>
 80062c4:	f8c8 2000 	str.w	r2, [r8]
 80062c8:	e7ec      	b.n	80062a4 <_malloc_r+0xb0>
 80062ca:	4623      	mov	r3, r4
 80062cc:	6864      	ldr	r4, [r4, #4]
 80062ce:	e7ac      	b.n	800622a <_malloc_r+0x36>
 80062d0:	4634      	mov	r4, r6
 80062d2:	6876      	ldr	r6, [r6, #4]
 80062d4:	e7b4      	b.n	8006240 <_malloc_r+0x4c>
 80062d6:	4613      	mov	r3, r2
 80062d8:	e7cc      	b.n	8006274 <_malloc_r+0x80>
 80062da:	230c      	movs	r3, #12
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4638      	mov	r0, r7
 80062e0:	f000 f80e 	bl	8006300 <__malloc_unlock>
 80062e4:	e797      	b.n	8006216 <_malloc_r+0x22>
 80062e6:	6025      	str	r5, [r4, #0]
 80062e8:	e7dc      	b.n	80062a4 <_malloc_r+0xb0>
 80062ea:	605b      	str	r3, [r3, #4]
 80062ec:	deff      	udf	#255	; 0xff
 80062ee:	bf00      	nop
 80062f0:	200011ec 	.word	0x200011ec

080062f4 <__malloc_lock>:
 80062f4:	4801      	ldr	r0, [pc, #4]	; (80062fc <__malloc_lock+0x8>)
 80062f6:	f7ff bed3 	b.w	80060a0 <__retarget_lock_acquire_recursive>
 80062fa:	bf00      	nop
 80062fc:	200011e8 	.word	0x200011e8

08006300 <__malloc_unlock>:
 8006300:	4801      	ldr	r0, [pc, #4]	; (8006308 <__malloc_unlock+0x8>)
 8006302:	f7ff bece 	b.w	80060a2 <__retarget_lock_release_recursive>
 8006306:	bf00      	nop
 8006308:	200011e8 	.word	0x200011e8

0800630c <__ssputs_r>:
 800630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	688e      	ldr	r6, [r1, #8]
 8006312:	461f      	mov	r7, r3
 8006314:	42be      	cmp	r6, r7
 8006316:	680b      	ldr	r3, [r1, #0]
 8006318:	4682      	mov	sl, r0
 800631a:	460c      	mov	r4, r1
 800631c:	4690      	mov	r8, r2
 800631e:	d82c      	bhi.n	800637a <__ssputs_r+0x6e>
 8006320:	898a      	ldrh	r2, [r1, #12]
 8006322:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006326:	d026      	beq.n	8006376 <__ssputs_r+0x6a>
 8006328:	6965      	ldr	r5, [r4, #20]
 800632a:	6909      	ldr	r1, [r1, #16]
 800632c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006330:	eba3 0901 	sub.w	r9, r3, r1
 8006334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006338:	1c7b      	adds	r3, r7, #1
 800633a:	444b      	add	r3, r9
 800633c:	106d      	asrs	r5, r5, #1
 800633e:	429d      	cmp	r5, r3
 8006340:	bf38      	it	cc
 8006342:	461d      	movcc	r5, r3
 8006344:	0553      	lsls	r3, r2, #21
 8006346:	d527      	bpl.n	8006398 <__ssputs_r+0x8c>
 8006348:	4629      	mov	r1, r5
 800634a:	f7ff ff53 	bl	80061f4 <_malloc_r>
 800634e:	4606      	mov	r6, r0
 8006350:	b360      	cbz	r0, 80063ac <__ssputs_r+0xa0>
 8006352:	6921      	ldr	r1, [r4, #16]
 8006354:	464a      	mov	r2, r9
 8006356:	f7ff fead 	bl	80060b4 <memcpy>
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	6126      	str	r6, [r4, #16]
 8006368:	6165      	str	r5, [r4, #20]
 800636a:	444e      	add	r6, r9
 800636c:	eba5 0509 	sub.w	r5, r5, r9
 8006370:	6026      	str	r6, [r4, #0]
 8006372:	60a5      	str	r5, [r4, #8]
 8006374:	463e      	mov	r6, r7
 8006376:	42be      	cmp	r6, r7
 8006378:	d900      	bls.n	800637c <__ssputs_r+0x70>
 800637a:	463e      	mov	r6, r7
 800637c:	6820      	ldr	r0, [r4, #0]
 800637e:	4632      	mov	r2, r6
 8006380:	4641      	mov	r1, r8
 8006382:	f000 fd45 	bl	8006e10 <memmove>
 8006386:	68a3      	ldr	r3, [r4, #8]
 8006388:	1b9b      	subs	r3, r3, r6
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	4433      	add	r3, r6
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	2000      	movs	r0, #0
 8006394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006398:	462a      	mov	r2, r5
 800639a:	f000 fd8c 	bl	8006eb6 <_realloc_r>
 800639e:	4606      	mov	r6, r0
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1e0      	bne.n	8006366 <__ssputs_r+0x5a>
 80063a4:	6921      	ldr	r1, [r4, #16]
 80063a6:	4650      	mov	r0, sl
 80063a8:	f7ff feb0 	bl	800610c <_free_r>
 80063ac:	230c      	movs	r3, #12
 80063ae:	f8ca 3000 	str.w	r3, [sl]
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	e7e9      	b.n	8006394 <__ssputs_r+0x88>

080063c0 <_svfiprintf_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	4698      	mov	r8, r3
 80063c6:	898b      	ldrh	r3, [r1, #12]
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	b09d      	sub	sp, #116	; 0x74
 80063cc:	4607      	mov	r7, r0
 80063ce:	460d      	mov	r5, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	d50e      	bpl.n	80063f2 <_svfiprintf_r+0x32>
 80063d4:	690b      	ldr	r3, [r1, #16]
 80063d6:	b963      	cbnz	r3, 80063f2 <_svfiprintf_r+0x32>
 80063d8:	2140      	movs	r1, #64	; 0x40
 80063da:	f7ff ff0b 	bl	80061f4 <_malloc_r>
 80063de:	6028      	str	r0, [r5, #0]
 80063e0:	6128      	str	r0, [r5, #16]
 80063e2:	b920      	cbnz	r0, 80063ee <_svfiprintf_r+0x2e>
 80063e4:	230c      	movs	r3, #12
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ec:	e0d0      	b.n	8006590 <_svfiprintf_r+0x1d0>
 80063ee:	2340      	movs	r3, #64	; 0x40
 80063f0:	616b      	str	r3, [r5, #20]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9309      	str	r3, [sp, #36]	; 0x24
 80063f6:	2320      	movs	r3, #32
 80063f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006400:	2330      	movs	r3, #48	; 0x30
 8006402:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065a8 <_svfiprintf_r+0x1e8>
 8006406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800640a:	f04f 0901 	mov.w	r9, #1
 800640e:	4623      	mov	r3, r4
 8006410:	469a      	mov	sl, r3
 8006412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006416:	b10a      	cbz	r2, 800641c <_svfiprintf_r+0x5c>
 8006418:	2a25      	cmp	r2, #37	; 0x25
 800641a:	d1f9      	bne.n	8006410 <_svfiprintf_r+0x50>
 800641c:	ebba 0b04 	subs.w	fp, sl, r4
 8006420:	d00b      	beq.n	800643a <_svfiprintf_r+0x7a>
 8006422:	465b      	mov	r3, fp
 8006424:	4622      	mov	r2, r4
 8006426:	4629      	mov	r1, r5
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff6f 	bl	800630c <__ssputs_r>
 800642e:	3001      	adds	r0, #1
 8006430:	f000 80a9 	beq.w	8006586 <_svfiprintf_r+0x1c6>
 8006434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006436:	445a      	add	r2, fp
 8006438:	9209      	str	r2, [sp, #36]	; 0x24
 800643a:	f89a 3000 	ldrb.w	r3, [sl]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80a1 	beq.w	8006586 <_svfiprintf_r+0x1c6>
 8006444:	2300      	movs	r3, #0
 8006446:	f04f 32ff 	mov.w	r2, #4294967295
 800644a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800644e:	f10a 0a01 	add.w	sl, sl, #1
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	9307      	str	r3, [sp, #28]
 8006456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800645a:	931a      	str	r3, [sp, #104]	; 0x68
 800645c:	4654      	mov	r4, sl
 800645e:	2205      	movs	r2, #5
 8006460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006464:	4850      	ldr	r0, [pc, #320]	; (80065a8 <_svfiprintf_r+0x1e8>)
 8006466:	f7f9 fedb 	bl	8000220 <memchr>
 800646a:	9a04      	ldr	r2, [sp, #16]
 800646c:	b9d8      	cbnz	r0, 80064a6 <_svfiprintf_r+0xe6>
 800646e:	06d0      	lsls	r0, r2, #27
 8006470:	bf44      	itt	mi
 8006472:	2320      	movmi	r3, #32
 8006474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006478:	0711      	lsls	r1, r2, #28
 800647a:	bf44      	itt	mi
 800647c:	232b      	movmi	r3, #43	; 0x2b
 800647e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006482:	f89a 3000 	ldrb.w	r3, [sl]
 8006486:	2b2a      	cmp	r3, #42	; 0x2a
 8006488:	d015      	beq.n	80064b6 <_svfiprintf_r+0xf6>
 800648a:	9a07      	ldr	r2, [sp, #28]
 800648c:	4654      	mov	r4, sl
 800648e:	2000      	movs	r0, #0
 8006490:	f04f 0c0a 	mov.w	ip, #10
 8006494:	4621      	mov	r1, r4
 8006496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800649a:	3b30      	subs	r3, #48	; 0x30
 800649c:	2b09      	cmp	r3, #9
 800649e:	d94d      	bls.n	800653c <_svfiprintf_r+0x17c>
 80064a0:	b1b0      	cbz	r0, 80064d0 <_svfiprintf_r+0x110>
 80064a2:	9207      	str	r2, [sp, #28]
 80064a4:	e014      	b.n	80064d0 <_svfiprintf_r+0x110>
 80064a6:	eba0 0308 	sub.w	r3, r0, r8
 80064aa:	fa09 f303 	lsl.w	r3, r9, r3
 80064ae:	4313      	orrs	r3, r2
 80064b0:	9304      	str	r3, [sp, #16]
 80064b2:	46a2      	mov	sl, r4
 80064b4:	e7d2      	b.n	800645c <_svfiprintf_r+0x9c>
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	1d19      	adds	r1, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	9103      	str	r1, [sp, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfbb      	ittet	lt
 80064c2:	425b      	neglt	r3, r3
 80064c4:	f042 0202 	orrlt.w	r2, r2, #2
 80064c8:	9307      	strge	r3, [sp, #28]
 80064ca:	9307      	strlt	r3, [sp, #28]
 80064cc:	bfb8      	it	lt
 80064ce:	9204      	strlt	r2, [sp, #16]
 80064d0:	7823      	ldrb	r3, [r4, #0]
 80064d2:	2b2e      	cmp	r3, #46	; 0x2e
 80064d4:	d10c      	bne.n	80064f0 <_svfiprintf_r+0x130>
 80064d6:	7863      	ldrb	r3, [r4, #1]
 80064d8:	2b2a      	cmp	r3, #42	; 0x2a
 80064da:	d134      	bne.n	8006546 <_svfiprintf_r+0x186>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	9203      	str	r2, [sp, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfb8      	it	lt
 80064e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064ec:	3402      	adds	r4, #2
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80065b8 <_svfiprintf_r+0x1f8>
 80064f4:	7821      	ldrb	r1, [r4, #0]
 80064f6:	2203      	movs	r2, #3
 80064f8:	4650      	mov	r0, sl
 80064fa:	f7f9 fe91 	bl	8000220 <memchr>
 80064fe:	b138      	cbz	r0, 8006510 <_svfiprintf_r+0x150>
 8006500:	9b04      	ldr	r3, [sp, #16]
 8006502:	eba0 000a 	sub.w	r0, r0, sl
 8006506:	2240      	movs	r2, #64	; 0x40
 8006508:	4082      	lsls	r2, r0
 800650a:	4313      	orrs	r3, r2
 800650c:	3401      	adds	r4, #1
 800650e:	9304      	str	r3, [sp, #16]
 8006510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006514:	4825      	ldr	r0, [pc, #148]	; (80065ac <_svfiprintf_r+0x1ec>)
 8006516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800651a:	2206      	movs	r2, #6
 800651c:	f7f9 fe80 	bl	8000220 <memchr>
 8006520:	2800      	cmp	r0, #0
 8006522:	d038      	beq.n	8006596 <_svfiprintf_r+0x1d6>
 8006524:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <_svfiprintf_r+0x1f0>)
 8006526:	bb1b      	cbnz	r3, 8006570 <_svfiprintf_r+0x1b0>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	3307      	adds	r3, #7
 800652c:	f023 0307 	bic.w	r3, r3, #7
 8006530:	3308      	adds	r3, #8
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006536:	4433      	add	r3, r6
 8006538:	9309      	str	r3, [sp, #36]	; 0x24
 800653a:	e768      	b.n	800640e <_svfiprintf_r+0x4e>
 800653c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006540:	460c      	mov	r4, r1
 8006542:	2001      	movs	r0, #1
 8006544:	e7a6      	b.n	8006494 <_svfiprintf_r+0xd4>
 8006546:	2300      	movs	r3, #0
 8006548:	3401      	adds	r4, #1
 800654a:	9305      	str	r3, [sp, #20]
 800654c:	4619      	mov	r1, r3
 800654e:	f04f 0c0a 	mov.w	ip, #10
 8006552:	4620      	mov	r0, r4
 8006554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006558:	3a30      	subs	r2, #48	; 0x30
 800655a:	2a09      	cmp	r2, #9
 800655c:	d903      	bls.n	8006566 <_svfiprintf_r+0x1a6>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0c6      	beq.n	80064f0 <_svfiprintf_r+0x130>
 8006562:	9105      	str	r1, [sp, #20]
 8006564:	e7c4      	b.n	80064f0 <_svfiprintf_r+0x130>
 8006566:	fb0c 2101 	mla	r1, ip, r1, r2
 800656a:	4604      	mov	r4, r0
 800656c:	2301      	movs	r3, #1
 800656e:	e7f0      	b.n	8006552 <_svfiprintf_r+0x192>
 8006570:	ab03      	add	r3, sp, #12
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	462a      	mov	r2, r5
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <_svfiprintf_r+0x1f4>)
 8006578:	a904      	add	r1, sp, #16
 800657a:	4638      	mov	r0, r7
 800657c:	f3af 8000 	nop.w
 8006580:	1c42      	adds	r2, r0, #1
 8006582:	4606      	mov	r6, r0
 8006584:	d1d6      	bne.n	8006534 <_svfiprintf_r+0x174>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	065b      	lsls	r3, r3, #25
 800658a:	f53f af2d 	bmi.w	80063e8 <_svfiprintf_r+0x28>
 800658e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006590:	b01d      	add	sp, #116	; 0x74
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	ab03      	add	r3, sp, #12
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	462a      	mov	r2, r5
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <_svfiprintf_r+0x1f4>)
 800659e:	a904      	add	r1, sp, #16
 80065a0:	4638      	mov	r0, r7
 80065a2:	f000 f9bd 	bl	8006920 <_printf_i>
 80065a6:	e7eb      	b.n	8006580 <_svfiprintf_r+0x1c0>
 80065a8:	08007661 	.word	0x08007661
 80065ac:	0800766b 	.word	0x0800766b
 80065b0:	00000000 	.word	0x00000000
 80065b4:	0800630d 	.word	0x0800630d
 80065b8:	08007667 	.word	0x08007667

080065bc <__sfputc_r>:
 80065bc:	6893      	ldr	r3, [r2, #8]
 80065be:	3b01      	subs	r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	b410      	push	{r4}
 80065c4:	6093      	str	r3, [r2, #8]
 80065c6:	da08      	bge.n	80065da <__sfputc_r+0x1e>
 80065c8:	6994      	ldr	r4, [r2, #24]
 80065ca:	42a3      	cmp	r3, r4
 80065cc:	db01      	blt.n	80065d2 <__sfputc_r+0x16>
 80065ce:	290a      	cmp	r1, #10
 80065d0:	d103      	bne.n	80065da <__sfputc_r+0x1e>
 80065d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065d6:	f7ff bbc4 	b.w	8005d62 <__swbuf_r>
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	1c58      	adds	r0, r3, #1
 80065de:	6010      	str	r0, [r2, #0]
 80065e0:	7019      	strb	r1, [r3, #0]
 80065e2:	4608      	mov	r0, r1
 80065e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <__sfputs_r>:
 80065ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ec:	4606      	mov	r6, r0
 80065ee:	460f      	mov	r7, r1
 80065f0:	4614      	mov	r4, r2
 80065f2:	18d5      	adds	r5, r2, r3
 80065f4:	42ac      	cmp	r4, r5
 80065f6:	d101      	bne.n	80065fc <__sfputs_r+0x12>
 80065f8:	2000      	movs	r0, #0
 80065fa:	e007      	b.n	800660c <__sfputs_r+0x22>
 80065fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006600:	463a      	mov	r2, r7
 8006602:	4630      	mov	r0, r6
 8006604:	f7ff ffda 	bl	80065bc <__sfputc_r>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d1f3      	bne.n	80065f4 <__sfputs_r+0xa>
 800660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006610 <_vfiprintf_r>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	460d      	mov	r5, r1
 8006616:	b09d      	sub	sp, #116	; 0x74
 8006618:	4614      	mov	r4, r2
 800661a:	4698      	mov	r8, r3
 800661c:	4606      	mov	r6, r0
 800661e:	b118      	cbz	r0, 8006628 <_vfiprintf_r+0x18>
 8006620:	6a03      	ldr	r3, [r0, #32]
 8006622:	b90b      	cbnz	r3, 8006628 <_vfiprintf_r+0x18>
 8006624:	f7ff fa8e 	bl	8005b44 <__sinit>
 8006628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800662a:	07d9      	lsls	r1, r3, #31
 800662c:	d405      	bmi.n	800663a <_vfiprintf_r+0x2a>
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	059a      	lsls	r2, r3, #22
 8006632:	d402      	bmi.n	800663a <_vfiprintf_r+0x2a>
 8006634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006636:	f7ff fd33 	bl	80060a0 <__retarget_lock_acquire_recursive>
 800663a:	89ab      	ldrh	r3, [r5, #12]
 800663c:	071b      	lsls	r3, r3, #28
 800663e:	d501      	bpl.n	8006644 <_vfiprintf_r+0x34>
 8006640:	692b      	ldr	r3, [r5, #16]
 8006642:	b99b      	cbnz	r3, 800666c <_vfiprintf_r+0x5c>
 8006644:	4629      	mov	r1, r5
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff fbc8 	bl	8005ddc <__swsetup_r>
 800664c:	b170      	cbz	r0, 800666c <_vfiprintf_r+0x5c>
 800664e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006650:	07dc      	lsls	r4, r3, #31
 8006652:	d504      	bpl.n	800665e <_vfiprintf_r+0x4e>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	b01d      	add	sp, #116	; 0x74
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	0598      	lsls	r0, r3, #22
 8006662:	d4f7      	bmi.n	8006654 <_vfiprintf_r+0x44>
 8006664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006666:	f7ff fd1c 	bl	80060a2 <__retarget_lock_release_recursive>
 800666a:	e7f3      	b.n	8006654 <_vfiprintf_r+0x44>
 800666c:	2300      	movs	r3, #0
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	2320      	movs	r3, #32
 8006672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006676:	f8cd 800c 	str.w	r8, [sp, #12]
 800667a:	2330      	movs	r3, #48	; 0x30
 800667c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006830 <_vfiprintf_r+0x220>
 8006680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006684:	f04f 0901 	mov.w	r9, #1
 8006688:	4623      	mov	r3, r4
 800668a:	469a      	mov	sl, r3
 800668c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006690:	b10a      	cbz	r2, 8006696 <_vfiprintf_r+0x86>
 8006692:	2a25      	cmp	r2, #37	; 0x25
 8006694:	d1f9      	bne.n	800668a <_vfiprintf_r+0x7a>
 8006696:	ebba 0b04 	subs.w	fp, sl, r4
 800669a:	d00b      	beq.n	80066b4 <_vfiprintf_r+0xa4>
 800669c:	465b      	mov	r3, fp
 800669e:	4622      	mov	r2, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff ffa1 	bl	80065ea <__sfputs_r>
 80066a8:	3001      	adds	r0, #1
 80066aa:	f000 80a9 	beq.w	8006800 <_vfiprintf_r+0x1f0>
 80066ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b0:	445a      	add	r2, fp
 80066b2:	9209      	str	r2, [sp, #36]	; 0x24
 80066b4:	f89a 3000 	ldrb.w	r3, [sl]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80a1 	beq.w	8006800 <_vfiprintf_r+0x1f0>
 80066be:	2300      	movs	r3, #0
 80066c0:	f04f 32ff 	mov.w	r2, #4294967295
 80066c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066c8:	f10a 0a01 	add.w	sl, sl, #1
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	9307      	str	r3, [sp, #28]
 80066d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066d4:	931a      	str	r3, [sp, #104]	; 0x68
 80066d6:	4654      	mov	r4, sl
 80066d8:	2205      	movs	r2, #5
 80066da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066de:	4854      	ldr	r0, [pc, #336]	; (8006830 <_vfiprintf_r+0x220>)
 80066e0:	f7f9 fd9e 	bl	8000220 <memchr>
 80066e4:	9a04      	ldr	r2, [sp, #16]
 80066e6:	b9d8      	cbnz	r0, 8006720 <_vfiprintf_r+0x110>
 80066e8:	06d1      	lsls	r1, r2, #27
 80066ea:	bf44      	itt	mi
 80066ec:	2320      	movmi	r3, #32
 80066ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f2:	0713      	lsls	r3, r2, #28
 80066f4:	bf44      	itt	mi
 80066f6:	232b      	movmi	r3, #43	; 0x2b
 80066f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006700:	2b2a      	cmp	r3, #42	; 0x2a
 8006702:	d015      	beq.n	8006730 <_vfiprintf_r+0x120>
 8006704:	9a07      	ldr	r2, [sp, #28]
 8006706:	4654      	mov	r4, sl
 8006708:	2000      	movs	r0, #0
 800670a:	f04f 0c0a 	mov.w	ip, #10
 800670e:	4621      	mov	r1, r4
 8006710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006714:	3b30      	subs	r3, #48	; 0x30
 8006716:	2b09      	cmp	r3, #9
 8006718:	d94d      	bls.n	80067b6 <_vfiprintf_r+0x1a6>
 800671a:	b1b0      	cbz	r0, 800674a <_vfiprintf_r+0x13a>
 800671c:	9207      	str	r2, [sp, #28]
 800671e:	e014      	b.n	800674a <_vfiprintf_r+0x13a>
 8006720:	eba0 0308 	sub.w	r3, r0, r8
 8006724:	fa09 f303 	lsl.w	r3, r9, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	46a2      	mov	sl, r4
 800672e:	e7d2      	b.n	80066d6 <_vfiprintf_r+0xc6>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	1d19      	adds	r1, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	9103      	str	r1, [sp, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	bfbb      	ittet	lt
 800673c:	425b      	neglt	r3, r3
 800673e:	f042 0202 	orrlt.w	r2, r2, #2
 8006742:	9307      	strge	r3, [sp, #28]
 8006744:	9307      	strlt	r3, [sp, #28]
 8006746:	bfb8      	it	lt
 8006748:	9204      	strlt	r2, [sp, #16]
 800674a:	7823      	ldrb	r3, [r4, #0]
 800674c:	2b2e      	cmp	r3, #46	; 0x2e
 800674e:	d10c      	bne.n	800676a <_vfiprintf_r+0x15a>
 8006750:	7863      	ldrb	r3, [r4, #1]
 8006752:	2b2a      	cmp	r3, #42	; 0x2a
 8006754:	d134      	bne.n	80067c0 <_vfiprintf_r+0x1b0>
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	9203      	str	r2, [sp, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	f04f 33ff 	movlt.w	r3, #4294967295
 8006766:	3402      	adds	r4, #2
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006840 <_vfiprintf_r+0x230>
 800676e:	7821      	ldrb	r1, [r4, #0]
 8006770:	2203      	movs	r2, #3
 8006772:	4650      	mov	r0, sl
 8006774:	f7f9 fd54 	bl	8000220 <memchr>
 8006778:	b138      	cbz	r0, 800678a <_vfiprintf_r+0x17a>
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	eba0 000a 	sub.w	r0, r0, sl
 8006780:	2240      	movs	r2, #64	; 0x40
 8006782:	4082      	lsls	r2, r0
 8006784:	4313      	orrs	r3, r2
 8006786:	3401      	adds	r4, #1
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800678e:	4829      	ldr	r0, [pc, #164]	; (8006834 <_vfiprintf_r+0x224>)
 8006790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006794:	2206      	movs	r2, #6
 8006796:	f7f9 fd43 	bl	8000220 <memchr>
 800679a:	2800      	cmp	r0, #0
 800679c:	d03f      	beq.n	800681e <_vfiprintf_r+0x20e>
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <_vfiprintf_r+0x228>)
 80067a0:	bb1b      	cbnz	r3, 80067ea <_vfiprintf_r+0x1da>
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	3307      	adds	r3, #7
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	3308      	adds	r3, #8
 80067ac:	9303      	str	r3, [sp, #12]
 80067ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b0:	443b      	add	r3, r7
 80067b2:	9309      	str	r3, [sp, #36]	; 0x24
 80067b4:	e768      	b.n	8006688 <_vfiprintf_r+0x78>
 80067b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ba:	460c      	mov	r4, r1
 80067bc:	2001      	movs	r0, #1
 80067be:	e7a6      	b.n	800670e <_vfiprintf_r+0xfe>
 80067c0:	2300      	movs	r3, #0
 80067c2:	3401      	adds	r4, #1
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	4619      	mov	r1, r3
 80067c8:	f04f 0c0a 	mov.w	ip, #10
 80067cc:	4620      	mov	r0, r4
 80067ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d2:	3a30      	subs	r2, #48	; 0x30
 80067d4:	2a09      	cmp	r2, #9
 80067d6:	d903      	bls.n	80067e0 <_vfiprintf_r+0x1d0>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0c6      	beq.n	800676a <_vfiprintf_r+0x15a>
 80067dc:	9105      	str	r1, [sp, #20]
 80067de:	e7c4      	b.n	800676a <_vfiprintf_r+0x15a>
 80067e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e4:	4604      	mov	r4, r0
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7f0      	b.n	80067cc <_vfiprintf_r+0x1bc>
 80067ea:	ab03      	add	r3, sp, #12
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	462a      	mov	r2, r5
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <_vfiprintf_r+0x22c>)
 80067f2:	a904      	add	r1, sp, #16
 80067f4:	4630      	mov	r0, r6
 80067f6:	f3af 8000 	nop.w
 80067fa:	4607      	mov	r7, r0
 80067fc:	1c78      	adds	r0, r7, #1
 80067fe:	d1d6      	bne.n	80067ae <_vfiprintf_r+0x19e>
 8006800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	d405      	bmi.n	8006812 <_vfiprintf_r+0x202>
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	059a      	lsls	r2, r3, #22
 800680a:	d402      	bmi.n	8006812 <_vfiprintf_r+0x202>
 800680c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800680e:	f7ff fc48 	bl	80060a2 <__retarget_lock_release_recursive>
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	065b      	lsls	r3, r3, #25
 8006816:	f53f af1d 	bmi.w	8006654 <_vfiprintf_r+0x44>
 800681a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800681c:	e71c      	b.n	8006658 <_vfiprintf_r+0x48>
 800681e:	ab03      	add	r3, sp, #12
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	462a      	mov	r2, r5
 8006824:	4b05      	ldr	r3, [pc, #20]	; (800683c <_vfiprintf_r+0x22c>)
 8006826:	a904      	add	r1, sp, #16
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f879 	bl	8006920 <_printf_i>
 800682e:	e7e4      	b.n	80067fa <_vfiprintf_r+0x1ea>
 8006830:	08007661 	.word	0x08007661
 8006834:	0800766b 	.word	0x0800766b
 8006838:	00000000 	.word	0x00000000
 800683c:	080065eb 	.word	0x080065eb
 8006840:	08007667 	.word	0x08007667

08006844 <_printf_common>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	4616      	mov	r6, r2
 800684a:	4699      	mov	r9, r3
 800684c:	688a      	ldr	r2, [r1, #8]
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006854:	4293      	cmp	r3, r2
 8006856:	bfb8      	it	lt
 8006858:	4613      	movlt	r3, r2
 800685a:	6033      	str	r3, [r6, #0]
 800685c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006860:	4607      	mov	r7, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b10a      	cbz	r2, 800686a <_printf_common+0x26>
 8006866:	3301      	adds	r3, #1
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	0699      	lsls	r1, r3, #26
 800686e:	bf42      	ittt	mi
 8006870:	6833      	ldrmi	r3, [r6, #0]
 8006872:	3302      	addmi	r3, #2
 8006874:	6033      	strmi	r3, [r6, #0]
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	f015 0506 	ands.w	r5, r5, #6
 800687c:	d106      	bne.n	800688c <_printf_common+0x48>
 800687e:	f104 0a19 	add.w	sl, r4, #25
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	6832      	ldr	r2, [r6, #0]
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	42ab      	cmp	r3, r5
 800688a:	dc26      	bgt.n	80068da <_printf_common+0x96>
 800688c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006890:	1e13      	subs	r3, r2, #0
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	bf18      	it	ne
 8006896:	2301      	movne	r3, #1
 8006898:	0692      	lsls	r2, r2, #26
 800689a:	d42b      	bmi.n	80068f4 <_printf_common+0xb0>
 800689c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	3001      	adds	r0, #1
 80068a8:	d01e      	beq.n	80068e8 <_printf_common+0xa4>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	6922      	ldr	r2, [r4, #16]
 80068ae:	f003 0306 	and.w	r3, r3, #6
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	bf02      	ittt	eq
 80068b6:	68e5      	ldreq	r5, [r4, #12]
 80068b8:	6833      	ldreq	r3, [r6, #0]
 80068ba:	1aed      	subeq	r5, r5, r3
 80068bc:	68a3      	ldr	r3, [r4, #8]
 80068be:	bf0c      	ite	eq
 80068c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c4:	2500      	movne	r5, #0
 80068c6:	4293      	cmp	r3, r2
 80068c8:	bfc4      	itt	gt
 80068ca:	1a9b      	subgt	r3, r3, r2
 80068cc:	18ed      	addgt	r5, r5, r3
 80068ce:	2600      	movs	r6, #0
 80068d0:	341a      	adds	r4, #26
 80068d2:	42b5      	cmp	r5, r6
 80068d4:	d11a      	bne.n	800690c <_printf_common+0xc8>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e008      	b.n	80068ec <_printf_common+0xa8>
 80068da:	2301      	movs	r3, #1
 80068dc:	4652      	mov	r2, sl
 80068de:	4649      	mov	r1, r9
 80068e0:	4638      	mov	r0, r7
 80068e2:	47c0      	blx	r8
 80068e4:	3001      	adds	r0, #1
 80068e6:	d103      	bne.n	80068f0 <_printf_common+0xac>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f0:	3501      	adds	r5, #1
 80068f2:	e7c6      	b.n	8006882 <_printf_common+0x3e>
 80068f4:	18e1      	adds	r1, r4, r3
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	2030      	movs	r0, #48	; 0x30
 80068fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068fe:	4422      	add	r2, r4
 8006900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006908:	3302      	adds	r3, #2
 800690a:	e7c7      	b.n	800689c <_printf_common+0x58>
 800690c:	2301      	movs	r3, #1
 800690e:	4622      	mov	r2, r4
 8006910:	4649      	mov	r1, r9
 8006912:	4638      	mov	r0, r7
 8006914:	47c0      	blx	r8
 8006916:	3001      	adds	r0, #1
 8006918:	d0e6      	beq.n	80068e8 <_printf_common+0xa4>
 800691a:	3601      	adds	r6, #1
 800691c:	e7d9      	b.n	80068d2 <_printf_common+0x8e>
	...

08006920 <_printf_i>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	7e0f      	ldrb	r7, [r1, #24]
 8006926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006928:	2f78      	cmp	r7, #120	; 0x78
 800692a:	4691      	mov	r9, r2
 800692c:	4680      	mov	r8, r0
 800692e:	460c      	mov	r4, r1
 8006930:	469a      	mov	sl, r3
 8006932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006936:	d807      	bhi.n	8006948 <_printf_i+0x28>
 8006938:	2f62      	cmp	r7, #98	; 0x62
 800693a:	d80a      	bhi.n	8006952 <_printf_i+0x32>
 800693c:	2f00      	cmp	r7, #0
 800693e:	f000 80d4 	beq.w	8006aea <_printf_i+0x1ca>
 8006942:	2f58      	cmp	r7, #88	; 0x58
 8006944:	f000 80c0 	beq.w	8006ac8 <_printf_i+0x1a8>
 8006948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800694c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006950:	e03a      	b.n	80069c8 <_printf_i+0xa8>
 8006952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006956:	2b15      	cmp	r3, #21
 8006958:	d8f6      	bhi.n	8006948 <_printf_i+0x28>
 800695a:	a101      	add	r1, pc, #4	; (adr r1, 8006960 <_printf_i+0x40>)
 800695c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069cd 	.word	0x080069cd
 8006968:	08006949 	.word	0x08006949
 800696c:	08006949 	.word	0x08006949
 8006970:	08006949 	.word	0x08006949
 8006974:	08006949 	.word	0x08006949
 8006978:	080069cd 	.word	0x080069cd
 800697c:	08006949 	.word	0x08006949
 8006980:	08006949 	.word	0x08006949
 8006984:	08006949 	.word	0x08006949
 8006988:	08006949 	.word	0x08006949
 800698c:	08006ad1 	.word	0x08006ad1
 8006990:	080069f9 	.word	0x080069f9
 8006994:	08006a8b 	.word	0x08006a8b
 8006998:	08006949 	.word	0x08006949
 800699c:	08006949 	.word	0x08006949
 80069a0:	08006af3 	.word	0x08006af3
 80069a4:	08006949 	.word	0x08006949
 80069a8:	080069f9 	.word	0x080069f9
 80069ac:	08006949 	.word	0x08006949
 80069b0:	08006949 	.word	0x08006949
 80069b4:	08006a93 	.word	0x08006a93
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	1d1a      	adds	r2, r3, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	602a      	str	r2, [r5, #0]
 80069c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069c8:	2301      	movs	r3, #1
 80069ca:	e09f      	b.n	8006b0c <_printf_i+0x1ec>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	0607      	lsls	r7, r0, #24
 80069d2:	f103 0104 	add.w	r1, r3, #4
 80069d6:	6029      	str	r1, [r5, #0]
 80069d8:	d501      	bpl.n	80069de <_printf_i+0xbe>
 80069da:	681e      	ldr	r6, [r3, #0]
 80069dc:	e003      	b.n	80069e6 <_printf_i+0xc6>
 80069de:	0646      	lsls	r6, r0, #25
 80069e0:	d5fb      	bpl.n	80069da <_printf_i+0xba>
 80069e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	da03      	bge.n	80069f2 <_printf_i+0xd2>
 80069ea:	232d      	movs	r3, #45	; 0x2d
 80069ec:	4276      	negs	r6, r6
 80069ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f2:	485a      	ldr	r0, [pc, #360]	; (8006b5c <_printf_i+0x23c>)
 80069f4:	230a      	movs	r3, #10
 80069f6:	e012      	b.n	8006a1e <_printf_i+0xfe>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	6820      	ldr	r0, [r4, #0]
 80069fc:	1d19      	adds	r1, r3, #4
 80069fe:	6029      	str	r1, [r5, #0]
 8006a00:	0605      	lsls	r5, r0, #24
 8006a02:	d501      	bpl.n	8006a08 <_printf_i+0xe8>
 8006a04:	681e      	ldr	r6, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <_printf_i+0xee>
 8006a08:	0641      	lsls	r1, r0, #25
 8006a0a:	d5fb      	bpl.n	8006a04 <_printf_i+0xe4>
 8006a0c:	881e      	ldrh	r6, [r3, #0]
 8006a0e:	4853      	ldr	r0, [pc, #332]	; (8006b5c <_printf_i+0x23c>)
 8006a10:	2f6f      	cmp	r7, #111	; 0x6f
 8006a12:	bf0c      	ite	eq
 8006a14:	2308      	moveq	r3, #8
 8006a16:	230a      	movne	r3, #10
 8006a18:	2100      	movs	r1, #0
 8006a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a1e:	6865      	ldr	r5, [r4, #4]
 8006a20:	60a5      	str	r5, [r4, #8]
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	bfa2      	ittt	ge
 8006a26:	6821      	ldrge	r1, [r4, #0]
 8006a28:	f021 0104 	bicge.w	r1, r1, #4
 8006a2c:	6021      	strge	r1, [r4, #0]
 8006a2e:	b90e      	cbnz	r6, 8006a34 <_printf_i+0x114>
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	d04b      	beq.n	8006acc <_printf_i+0x1ac>
 8006a34:	4615      	mov	r5, r2
 8006a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8006a3e:	5dc7      	ldrb	r7, [r0, r7]
 8006a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a44:	4637      	mov	r7, r6
 8006a46:	42bb      	cmp	r3, r7
 8006a48:	460e      	mov	r6, r1
 8006a4a:	d9f4      	bls.n	8006a36 <_printf_i+0x116>
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d10b      	bne.n	8006a68 <_printf_i+0x148>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	07de      	lsls	r6, r3, #31
 8006a54:	d508      	bpl.n	8006a68 <_printf_i+0x148>
 8006a56:	6923      	ldr	r3, [r4, #16]
 8006a58:	6861      	ldr	r1, [r4, #4]
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	bfde      	ittt	le
 8006a5e:	2330      	movle	r3, #48	; 0x30
 8006a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a68:	1b52      	subs	r2, r2, r5
 8006a6a:	6122      	str	r2, [r4, #16]
 8006a6c:	f8cd a000 	str.w	sl, [sp]
 8006a70:	464b      	mov	r3, r9
 8006a72:	aa03      	add	r2, sp, #12
 8006a74:	4621      	mov	r1, r4
 8006a76:	4640      	mov	r0, r8
 8006a78:	f7ff fee4 	bl	8006844 <_printf_common>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d14a      	bne.n	8006b16 <_printf_i+0x1f6>
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	b004      	add	sp, #16
 8006a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	f043 0320 	orr.w	r3, r3, #32
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	4833      	ldr	r0, [pc, #204]	; (8006b60 <_printf_i+0x240>)
 8006a94:	2778      	movs	r7, #120	; 0x78
 8006a96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	6829      	ldr	r1, [r5, #0]
 8006a9e:	061f      	lsls	r7, r3, #24
 8006aa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aa4:	d402      	bmi.n	8006aac <_printf_i+0x18c>
 8006aa6:	065f      	lsls	r7, r3, #25
 8006aa8:	bf48      	it	mi
 8006aaa:	b2b6      	uxthmi	r6, r6
 8006aac:	07df      	lsls	r7, r3, #31
 8006aae:	bf48      	it	mi
 8006ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab4:	6029      	str	r1, [r5, #0]
 8006ab6:	bf48      	it	mi
 8006ab8:	6023      	strmi	r3, [r4, #0]
 8006aba:	b91e      	cbnz	r6, 8006ac4 <_printf_i+0x1a4>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	f023 0320 	bic.w	r3, r3, #32
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	e7a7      	b.n	8006a18 <_printf_i+0xf8>
 8006ac8:	4824      	ldr	r0, [pc, #144]	; (8006b5c <_printf_i+0x23c>)
 8006aca:	e7e4      	b.n	8006a96 <_printf_i+0x176>
 8006acc:	4615      	mov	r5, r2
 8006ace:	e7bd      	b.n	8006a4c <_printf_i+0x12c>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	6826      	ldr	r6, [r4, #0]
 8006ad4:	6961      	ldr	r1, [r4, #20]
 8006ad6:	1d18      	adds	r0, r3, #4
 8006ad8:	6028      	str	r0, [r5, #0]
 8006ada:	0635      	lsls	r5, r6, #24
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0x1c4>
 8006ae0:	6019      	str	r1, [r3, #0]
 8006ae2:	e002      	b.n	8006aea <_printf_i+0x1ca>
 8006ae4:	0670      	lsls	r0, r6, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0x1c0>
 8006ae8:	8019      	strh	r1, [r3, #0]
 8006aea:	2300      	movs	r3, #0
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	4615      	mov	r5, r2
 8006af0:	e7bc      	b.n	8006a6c <_printf_i+0x14c>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	1d1a      	adds	r2, r3, #4
 8006af6:	602a      	str	r2, [r5, #0]
 8006af8:	681d      	ldr	r5, [r3, #0]
 8006afa:	6862      	ldr	r2, [r4, #4]
 8006afc:	2100      	movs	r1, #0
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7f9 fb8e 	bl	8000220 <memchr>
 8006b04:	b108      	cbz	r0, 8006b0a <_printf_i+0x1ea>
 8006b06:	1b40      	subs	r0, r0, r5
 8006b08:	6060      	str	r0, [r4, #4]
 8006b0a:	6863      	ldr	r3, [r4, #4]
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b14:	e7aa      	b.n	8006a6c <_printf_i+0x14c>
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	4640      	mov	r0, r8
 8006b1e:	47d0      	blx	sl
 8006b20:	3001      	adds	r0, #1
 8006b22:	d0ad      	beq.n	8006a80 <_printf_i+0x160>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	079b      	lsls	r3, r3, #30
 8006b28:	d413      	bmi.n	8006b52 <_printf_i+0x232>
 8006b2a:	68e0      	ldr	r0, [r4, #12]
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	4298      	cmp	r0, r3
 8006b30:	bfb8      	it	lt
 8006b32:	4618      	movlt	r0, r3
 8006b34:	e7a6      	b.n	8006a84 <_printf_i+0x164>
 8006b36:	2301      	movs	r3, #1
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	47d0      	blx	sl
 8006b40:	3001      	adds	r0, #1
 8006b42:	d09d      	beq.n	8006a80 <_printf_i+0x160>
 8006b44:	3501      	adds	r5, #1
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	9903      	ldr	r1, [sp, #12]
 8006b4a:	1a5b      	subs	r3, r3, r1
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dcf2      	bgt.n	8006b36 <_printf_i+0x216>
 8006b50:	e7eb      	b.n	8006b2a <_printf_i+0x20a>
 8006b52:	2500      	movs	r5, #0
 8006b54:	f104 0619 	add.w	r6, r4, #25
 8006b58:	e7f5      	b.n	8006b46 <_printf_i+0x226>
 8006b5a:	bf00      	nop
 8006b5c:	08007672 	.word	0x08007672
 8006b60:	08007683 	.word	0x08007683

08006b64 <__sflush_r>:
 8006b64:	898a      	ldrh	r2, [r1, #12]
 8006b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	0710      	lsls	r0, r2, #28
 8006b6e:	460c      	mov	r4, r1
 8006b70:	d458      	bmi.n	8006c24 <__sflush_r+0xc0>
 8006b72:	684b      	ldr	r3, [r1, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dc05      	bgt.n	8006b84 <__sflush_r+0x20>
 8006b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dc02      	bgt.n	8006b84 <__sflush_r+0x20>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	d0f9      	beq.n	8006b7e <__sflush_r+0x1a>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b90:	682f      	ldr	r7, [r5, #0]
 8006b92:	6a21      	ldr	r1, [r4, #32]
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	d032      	beq.n	8006bfe <__sflush_r+0x9a>
 8006b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	075a      	lsls	r2, r3, #29
 8006b9e:	d505      	bpl.n	8006bac <__sflush_r+0x48>
 8006ba0:	6863      	ldr	r3, [r4, #4]
 8006ba2:	1ac0      	subs	r0, r0, r3
 8006ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ba6:	b10b      	cbz	r3, 8006bac <__sflush_r+0x48>
 8006ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006baa:	1ac0      	subs	r0, r0, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	47b0      	blx	r6
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	d106      	bne.n	8006bcc <__sflush_r+0x68>
 8006bbe:	6829      	ldr	r1, [r5, #0]
 8006bc0:	291d      	cmp	r1, #29
 8006bc2:	d82b      	bhi.n	8006c1c <__sflush_r+0xb8>
 8006bc4:	4a29      	ldr	r2, [pc, #164]	; (8006c6c <__sflush_r+0x108>)
 8006bc6:	410a      	asrs	r2, r1
 8006bc8:	07d6      	lsls	r6, r2, #31
 8006bca:	d427      	bmi.n	8006c1c <__sflush_r+0xb8>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	6062      	str	r2, [r4, #4]
 8006bd0:	04d9      	lsls	r1, r3, #19
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	d504      	bpl.n	8006be2 <__sflush_r+0x7e>
 8006bd8:	1c42      	adds	r2, r0, #1
 8006bda:	d101      	bne.n	8006be0 <__sflush_r+0x7c>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b903      	cbnz	r3, 8006be2 <__sflush_r+0x7e>
 8006be0:	6560      	str	r0, [r4, #84]	; 0x54
 8006be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006be4:	602f      	str	r7, [r5, #0]
 8006be6:	2900      	cmp	r1, #0
 8006be8:	d0c9      	beq.n	8006b7e <__sflush_r+0x1a>
 8006bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	d002      	beq.n	8006bf8 <__sflush_r+0x94>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7ff fa8a 	bl	800610c <_free_r>
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8006bfc:	e7c0      	b.n	8006b80 <__sflush_r+0x1c>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b0      	blx	r6
 8006c04:	1c41      	adds	r1, r0, #1
 8006c06:	d1c8      	bne.n	8006b9a <__sflush_r+0x36>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0c5      	beq.n	8006b9a <__sflush_r+0x36>
 8006c0e:	2b1d      	cmp	r3, #29
 8006c10:	d001      	beq.n	8006c16 <__sflush_r+0xb2>
 8006c12:	2b16      	cmp	r3, #22
 8006c14:	d101      	bne.n	8006c1a <__sflush_r+0xb6>
 8006c16:	602f      	str	r7, [r5, #0]
 8006c18:	e7b1      	b.n	8006b7e <__sflush_r+0x1a>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	e7ad      	b.n	8006b80 <__sflush_r+0x1c>
 8006c24:	690f      	ldr	r7, [r1, #16]
 8006c26:	2f00      	cmp	r7, #0
 8006c28:	d0a9      	beq.n	8006b7e <__sflush_r+0x1a>
 8006c2a:	0793      	lsls	r3, r2, #30
 8006c2c:	680e      	ldr	r6, [r1, #0]
 8006c2e:	bf08      	it	eq
 8006c30:	694b      	ldreq	r3, [r1, #20]
 8006c32:	600f      	str	r7, [r1, #0]
 8006c34:	bf18      	it	ne
 8006c36:	2300      	movne	r3, #0
 8006c38:	eba6 0807 	sub.w	r8, r6, r7
 8006c3c:	608b      	str	r3, [r1, #8]
 8006c3e:	f1b8 0f00 	cmp.w	r8, #0
 8006c42:	dd9c      	ble.n	8006b7e <__sflush_r+0x1a>
 8006c44:	6a21      	ldr	r1, [r4, #32]
 8006c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c48:	4643      	mov	r3, r8
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	47b0      	blx	r6
 8006c50:	2800      	cmp	r0, #0
 8006c52:	dc06      	bgt.n	8006c62 <__sflush_r+0xfe>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e78e      	b.n	8006b80 <__sflush_r+0x1c>
 8006c62:	4407      	add	r7, r0
 8006c64:	eba8 0800 	sub.w	r8, r8, r0
 8006c68:	e7e9      	b.n	8006c3e <__sflush_r+0xda>
 8006c6a:	bf00      	nop
 8006c6c:	dfbffffe 	.word	0xdfbffffe

08006c70 <_fflush_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	690b      	ldr	r3, [r1, #16]
 8006c74:	4605      	mov	r5, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	b913      	cbnz	r3, 8006c80 <_fflush_r+0x10>
 8006c7a:	2500      	movs	r5, #0
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	b118      	cbz	r0, 8006c8a <_fflush_r+0x1a>
 8006c82:	6a03      	ldr	r3, [r0, #32]
 8006c84:	b90b      	cbnz	r3, 8006c8a <_fflush_r+0x1a>
 8006c86:	f7fe ff5d 	bl	8005b44 <__sinit>
 8006c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0f3      	beq.n	8006c7a <_fflush_r+0xa>
 8006c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c94:	07d0      	lsls	r0, r2, #31
 8006c96:	d404      	bmi.n	8006ca2 <_fflush_r+0x32>
 8006c98:	0599      	lsls	r1, r3, #22
 8006c9a:	d402      	bmi.n	8006ca2 <_fflush_r+0x32>
 8006c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c9e:	f7ff f9ff 	bl	80060a0 <__retarget_lock_acquire_recursive>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f7ff ff5d 	bl	8006b64 <__sflush_r>
 8006caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cac:	07da      	lsls	r2, r3, #31
 8006cae:	4605      	mov	r5, r0
 8006cb0:	d4e4      	bmi.n	8006c7c <_fflush_r+0xc>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	059b      	lsls	r3, r3, #22
 8006cb6:	d4e1      	bmi.n	8006c7c <_fflush_r+0xc>
 8006cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cba:	f7ff f9f2 	bl	80060a2 <__retarget_lock_release_recursive>
 8006cbe:	e7dd      	b.n	8006c7c <_fflush_r+0xc>

08006cc0 <fiprintf>:
 8006cc0:	b40e      	push	{r1, r2, r3}
 8006cc2:	b503      	push	{r0, r1, lr}
 8006cc4:	4601      	mov	r1, r0
 8006cc6:	ab03      	add	r3, sp, #12
 8006cc8:	4805      	ldr	r0, [pc, #20]	; (8006ce0 <fiprintf+0x20>)
 8006cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f7ff fc9d 	bl	8006610 <_vfiprintf_r>
 8006cd6:	b002      	add	sp, #8
 8006cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cdc:	b003      	add	sp, #12
 8006cde:	4770      	bx	lr
 8006ce0:	20000064 	.word	0x20000064

08006ce4 <__swhatbuf_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	b096      	sub	sp, #88	; 0x58
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	461e      	mov	r6, r3
 8006cf4:	da0d      	bge.n	8006d12 <__swhatbuf_r+0x2e>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cfc:	f04f 0100 	mov.w	r1, #0
 8006d00:	bf0c      	ite	eq
 8006d02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d06:	2340      	movne	r3, #64	; 0x40
 8006d08:	2000      	movs	r0, #0
 8006d0a:	6031      	str	r1, [r6, #0]
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	b016      	add	sp, #88	; 0x58
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	466a      	mov	r2, sp
 8006d14:	f000 f896 	bl	8006e44 <_fstat_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	dbec      	blt.n	8006cf6 <__swhatbuf_r+0x12>
 8006d1c:	9901      	ldr	r1, [sp, #4]
 8006d1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d26:	4259      	negs	r1, r3
 8006d28:	4159      	adcs	r1, r3
 8006d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d2e:	e7eb      	b.n	8006d08 <__swhatbuf_r+0x24>

08006d30 <__smakebuf_r>:
 8006d30:	898b      	ldrh	r3, [r1, #12]
 8006d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d34:	079d      	lsls	r5, r3, #30
 8006d36:	4606      	mov	r6, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	d507      	bpl.n	8006d4c <__smakebuf_r+0x1c>
 8006d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	2301      	movs	r3, #1
 8006d46:	6163      	str	r3, [r4, #20]
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	ab01      	add	r3, sp, #4
 8006d4e:	466a      	mov	r2, sp
 8006d50:	f7ff ffc8 	bl	8006ce4 <__swhatbuf_r>
 8006d54:	9900      	ldr	r1, [sp, #0]
 8006d56:	4605      	mov	r5, r0
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff fa4b 	bl	80061f4 <_malloc_r>
 8006d5e:	b948      	cbnz	r0, 8006d74 <__smakebuf_r+0x44>
 8006d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d64:	059a      	lsls	r2, r3, #22
 8006d66:	d4ef      	bmi.n	8006d48 <__smakebuf_r+0x18>
 8006d68:	f023 0303 	bic.w	r3, r3, #3
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	e7e3      	b.n	8006d3c <__smakebuf_r+0xc>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	6020      	str	r0, [r4, #0]
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	9b00      	ldr	r3, [sp, #0]
 8006d80:	6163      	str	r3, [r4, #20]
 8006d82:	9b01      	ldr	r3, [sp, #4]
 8006d84:	6120      	str	r0, [r4, #16]
 8006d86:	b15b      	cbz	r3, 8006da0 <__smakebuf_r+0x70>
 8006d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f000 f86b 	bl	8006e68 <_isatty_r>
 8006d92:	b128      	cbz	r0, 8006da0 <__smakebuf_r+0x70>
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	f043 0301 	orr.w	r3, r3, #1
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	431d      	orrs	r5, r3
 8006da4:	81a5      	strh	r5, [r4, #12]
 8006da6:	e7cf      	b.n	8006d48 <__smakebuf_r+0x18>

08006da8 <_putc_r>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	460d      	mov	r5, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	4606      	mov	r6, r0
 8006db0:	b118      	cbz	r0, 8006dba <_putc_r+0x12>
 8006db2:	6a03      	ldr	r3, [r0, #32]
 8006db4:	b90b      	cbnz	r3, 8006dba <_putc_r+0x12>
 8006db6:	f7fe fec5 	bl	8005b44 <__sinit>
 8006dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dbc:	07d8      	lsls	r0, r3, #31
 8006dbe:	d405      	bmi.n	8006dcc <_putc_r+0x24>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	0599      	lsls	r1, r3, #22
 8006dc4:	d402      	bmi.n	8006dcc <_putc_r+0x24>
 8006dc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc8:	f7ff f96a 	bl	80060a0 <__retarget_lock_acquire_recursive>
 8006dcc:	68a3      	ldr	r3, [r4, #8]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	da05      	bge.n	8006de2 <_putc_r+0x3a>
 8006dd6:	69a2      	ldr	r2, [r4, #24]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	db12      	blt.n	8006e02 <_putc_r+0x5a>
 8006ddc:	b2eb      	uxtb	r3, r5
 8006dde:	2b0a      	cmp	r3, #10
 8006de0:	d00f      	beq.n	8006e02 <_putc_r+0x5a>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	6022      	str	r2, [r4, #0]
 8006de8:	701d      	strb	r5, [r3, #0]
 8006dea:	b2ed      	uxtb	r5, r5
 8006dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dee:	07da      	lsls	r2, r3, #31
 8006df0:	d405      	bmi.n	8006dfe <_putc_r+0x56>
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	d402      	bmi.n	8006dfe <_putc_r+0x56>
 8006df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfa:	f7ff f952 	bl	80060a2 <__retarget_lock_release_recursive>
 8006dfe:	4628      	mov	r0, r5
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	4629      	mov	r1, r5
 8006e04:	4622      	mov	r2, r4
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7fe ffab 	bl	8005d62 <__swbuf_r>
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	e7ed      	b.n	8006dec <_putc_r+0x44>

08006e10 <memmove>:
 8006e10:	4288      	cmp	r0, r1
 8006e12:	b510      	push	{r4, lr}
 8006e14:	eb01 0402 	add.w	r4, r1, r2
 8006e18:	d902      	bls.n	8006e20 <memmove+0x10>
 8006e1a:	4284      	cmp	r4, r0
 8006e1c:	4623      	mov	r3, r4
 8006e1e:	d807      	bhi.n	8006e30 <memmove+0x20>
 8006e20:	1e43      	subs	r3, r0, #1
 8006e22:	42a1      	cmp	r1, r4
 8006e24:	d008      	beq.n	8006e38 <memmove+0x28>
 8006e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e2e:	e7f8      	b.n	8006e22 <memmove+0x12>
 8006e30:	4402      	add	r2, r0
 8006e32:	4601      	mov	r1, r0
 8006e34:	428a      	cmp	r2, r1
 8006e36:	d100      	bne.n	8006e3a <memmove+0x2a>
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e42:	e7f7      	b.n	8006e34 <memmove+0x24>

08006e44 <_fstat_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	; (8006e64 <_fstat_r+0x20>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	4611      	mov	r1, r2
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f7fb fcae 	bl	80027b2 <_fstat>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d102      	bne.n	8006e60 <_fstat_r+0x1c>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	b103      	cbz	r3, 8006e60 <_fstat_r+0x1c>
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	bd38      	pop	{r3, r4, r5, pc}
 8006e62:	bf00      	nop
 8006e64:	200011e4 	.word	0x200011e4

08006e68 <_isatty_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	; (8006e84 <_isatty_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7fb fcad 	bl	80027d2 <_isatty>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_isatty_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_isatty_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	200011e4 	.word	0x200011e4

08006e88 <_sbrk_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d06      	ldr	r5, [pc, #24]	; (8006ea4 <_sbrk_r+0x1c>)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	f7fb fcb6 	bl	8002804 <_sbrk>
 8006e98:	1c43      	adds	r3, r0, #1
 8006e9a:	d102      	bne.n	8006ea2 <_sbrk_r+0x1a>
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	b103      	cbz	r3, 8006ea2 <_sbrk_r+0x1a>
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	bd38      	pop	{r3, r4, r5, pc}
 8006ea4:	200011e4 	.word	0x200011e4

08006ea8 <abort>:
 8006ea8:	b508      	push	{r3, lr}
 8006eaa:	2006      	movs	r0, #6
 8006eac:	f000 f85a 	bl	8006f64 <raise>
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	f7fb fc2f 	bl	8002714 <_exit>

08006eb6 <_realloc_r>:
 8006eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eba:	4680      	mov	r8, r0
 8006ebc:	4614      	mov	r4, r2
 8006ebe:	460e      	mov	r6, r1
 8006ec0:	b921      	cbnz	r1, 8006ecc <_realloc_r+0x16>
 8006ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	f7ff b994 	b.w	80061f4 <_malloc_r>
 8006ecc:	b92a      	cbnz	r2, 8006eda <_realloc_r+0x24>
 8006ece:	f7ff f91d 	bl	800610c <_free_r>
 8006ed2:	4625      	mov	r5, r4
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eda:	f000 f85f 	bl	8006f9c <_malloc_usable_size_r>
 8006ede:	4284      	cmp	r4, r0
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	d802      	bhi.n	8006eea <_realloc_r+0x34>
 8006ee4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ee8:	d812      	bhi.n	8006f10 <_realloc_r+0x5a>
 8006eea:	4621      	mov	r1, r4
 8006eec:	4640      	mov	r0, r8
 8006eee:	f7ff f981 	bl	80061f4 <_malloc_r>
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0ed      	beq.n	8006ed4 <_realloc_r+0x1e>
 8006ef8:	42bc      	cmp	r4, r7
 8006efa:	4622      	mov	r2, r4
 8006efc:	4631      	mov	r1, r6
 8006efe:	bf28      	it	cs
 8006f00:	463a      	movcs	r2, r7
 8006f02:	f7ff f8d7 	bl	80060b4 <memcpy>
 8006f06:	4631      	mov	r1, r6
 8006f08:	4640      	mov	r0, r8
 8006f0a:	f7ff f8ff 	bl	800610c <_free_r>
 8006f0e:	e7e1      	b.n	8006ed4 <_realloc_r+0x1e>
 8006f10:	4635      	mov	r5, r6
 8006f12:	e7df      	b.n	8006ed4 <_realloc_r+0x1e>

08006f14 <_raise_r>:
 8006f14:	291f      	cmp	r1, #31
 8006f16:	b538      	push	{r3, r4, r5, lr}
 8006f18:	4604      	mov	r4, r0
 8006f1a:	460d      	mov	r5, r1
 8006f1c:	d904      	bls.n	8006f28 <_raise_r+0x14>
 8006f1e:	2316      	movs	r3, #22
 8006f20:	6003      	str	r3, [r0, #0]
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f2a:	b112      	cbz	r2, 8006f32 <_raise_r+0x1e>
 8006f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f30:	b94b      	cbnz	r3, 8006f46 <_raise_r+0x32>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f830 	bl	8006f98 <_getpid_r>
 8006f38:	462a      	mov	r2, r5
 8006f3a:	4601      	mov	r1, r0
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f42:	f000 b817 	b.w	8006f74 <_kill_r>
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d00a      	beq.n	8006f60 <_raise_r+0x4c>
 8006f4a:	1c59      	adds	r1, r3, #1
 8006f4c:	d103      	bne.n	8006f56 <_raise_r+0x42>
 8006f4e:	2316      	movs	r3, #22
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	2001      	movs	r0, #1
 8006f54:	e7e7      	b.n	8006f26 <_raise_r+0x12>
 8006f56:	2400      	movs	r4, #0
 8006f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	4798      	blx	r3
 8006f60:	2000      	movs	r0, #0
 8006f62:	e7e0      	b.n	8006f26 <_raise_r+0x12>

08006f64 <raise>:
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <raise+0xc>)
 8006f66:	4601      	mov	r1, r0
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	f7ff bfd3 	b.w	8006f14 <_raise_r>
 8006f6e:	bf00      	nop
 8006f70:	20000064 	.word	0x20000064

08006f74 <_kill_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	; (8006f94 <_kill_r+0x20>)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	4611      	mov	r1, r2
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	f7fb fbb7 	bl	80026f4 <_kill>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d102      	bne.n	8006f90 <_kill_r+0x1c>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	b103      	cbz	r3, 8006f90 <_kill_r+0x1c>
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	bd38      	pop	{r3, r4, r5, pc}
 8006f92:	bf00      	nop
 8006f94:	200011e4 	.word	0x200011e4

08006f98 <_getpid_r>:
 8006f98:	f7fb bba4 	b.w	80026e4 <_getpid>

08006f9c <_malloc_usable_size_r>:
 8006f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa0:	1f18      	subs	r0, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	bfbc      	itt	lt
 8006fa6:	580b      	ldrlt	r3, [r1, r0]
 8006fa8:	18c0      	addlt	r0, r0, r3
 8006faa:	4770      	bx	lr

08006fac <_init>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr

08006fb8 <_fini>:
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fba:	bf00      	nop
 8006fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fbe:	bc08      	pop	{r3}
 8006fc0:	469e      	mov	lr, r3
 8006fc2:	4770      	bx	lr
